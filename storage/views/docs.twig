<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Yabasi Framework Documentation: Comprehensive Guide for Modern PHP Development</title>
    <meta name="description" content="Explore the powerful features of Yabasi, a cutting-edge PHP framework. Learn about routing, ORM, caching, security, and more.">

    <meta name="author" content="Yabasi Framework">
    <meta name="robots" content="index, follow">
    <link rel="canonical" href="{{ url('/docs') }}">

    <meta property="og:title" content="{{ pageTitle }}">
    <meta property="og:description" content="{{ pageDescription }}">
    <meta property="og:type" content="article">
    <meta property="og:url" content="{{ url('/docs') }}">
    <meta property="og:image" content="{{ url('img/logo.png') }}">

    <meta name="twitter:card" content="summary_large_image">
    <meta name="twitter:title" content="{{ pageTitle }}">
    <meta name="twitter:description" content="{{ pageDescription }}">
    <meta name="twitter:image" content="{{ url('img/logo.png') }}">

    <link rel="icon" href="{{ url('img/favicon.ico') }}" type="image/x-icon">

    <script src="https://cdn.tailwindcss.com"></script>
    <script src="https://cdn.jsdelivr.net/npm/alpinejs@3.x.x/dist/cdn.min.js" defer></script>

    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.3/css/all.min.css">
</head>
<body class="bg-gray-100 text-gray-800 antialiased" x-data="{ sidebarOpen: false }">

<nav class="bg-white shadow-md fixed w-full z-10">
    <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        <div class="flex justify-between items-center h-16">
            <a href="{{ url('') }}" class="flex items-center">
                <img src="{{ url('img/logo.png') }}" width="120" alt="Yabasi" />
            </a>
            <div class="hidden md:flex space-x-4">
                <a href="{{ url('') }}" class="text-gray-700 hover:text-indigo-600 transition-colors">Home</a>
                <a href="https://github.com/yabasi/yabasi" target="_blank" class="text-gray-700 hover:text-indigo-600 transition-colors">
                    <i class="fab fa-github"></i> GitHub
                </a>
            </div>
            <button @click="sidebarOpen = !sidebarOpen" class="md:hidden text-gray-700 hover:text-indigo-600">
                <i class="fas fa-bars"></i>
            </button>
        </div>
    </div>
</nav>

<aside class="bg-white w-64 h-screen fixed left-0 top-0 overflow-y-auto transition-transform duration-200 ease-in-out z-20 transform md:translate-x-0"
       :class="{'translate-x-0': sidebarOpen, '-translate-x-full': !sidebarOpen}">
    <div class="p-4">
        <input type="text" placeholder="Search docs..." class="w-full px-3 py-2 border rounded-md mb-4">
        <nav>
            <ul class="space-y-2">
                <li><a href="#introduction" class="block py-1 hover:text-indigo-600">Introduction</a></li>
                <li><a href="#getting-started" class="block py-1 hover:text-indigo-600">Getting Started</a></li>
                <li><a href="#core-concepts" class="block py-1 hover:text-indigo-600">Core Concepts</a></li>
                <li><a href="#routing" class="block py-1 hover:text-indigo-600">Routing</a></li>
                <li><a href="#controllers" class="block py-1 hover:text-indigo-600">Controllers</a></li>
                <li><a href="#views" class="block py-1 hover:text-indigo-600">Views</a></li>
                <li><a href="#models" class="block py-1 hover:text-indigo-600">Models</a></li>
                <li><a href="#database" class="block py-1 hover:text-indigo-600">Database</a></li>
                <li><a href="#forms-validation" class="block py-1 hover:text-indigo-600">Forms & Validation</a></li>
                <li><a href="#authentication" class="block py-1 hover:text-indigo-600">Authentication</a></li>
                <li><a href="#caching" class="block py-1 hover:text-indigo-600">Caching</a></li>
                <li><a href="#session-management" class="block py-1 hover:text-indigo-600">Session Management</a></li>
                <li><a href="#error-handling-logging" class="block py-1 hover:text-indigo-600">Error Handling & Logging</a></li>
                <li><a href="#security" class="block py-1 hover:text-indigo-600">Security</a></li>
                <li><a href="#cli-artisan" class="block py-1 hover:text-indigo-600">CLI & Artisan</a></li>
                <li><a href="#testing" class="block py-1 hover:text-indigo-600">Testing</a></li>
                <li><a href="#events-listeners" class="block py-1 hover:text-indigo-600">Events & Listeners</a></li>
                <li><a href="#queues-jobs" class="block py-1 hover:text-indigo-600">Queues & Jobs</a></li>
                <li><a href="#api-development" class="block py-1 hover:text-indigo-600">API Development</a></li>
                <li><a href="#websockets" class="block py-1 hover:text-indigo-600">WebSockets</a></li>
                <li><a href="#localization" class="block py-1 hover:text-indigo-600">Localization</a></li>
                <li><a href="#file-storage" class="block py-1 hover:text-indigo-600">File Storage</a></li>
                <li><a href="#helpers-utilities" class="block py-1 hover:text-indigo-600">Helpers & Utilities</a></li>
                <li><a href="#deployment" class="block py-1 hover:text-indigo-600">Deployment</a></li>
                <li><a href="#extending-yabasi" class="block py-1 hover:text-indigo-600">Extending Yabasi</a></li>
                <li><a href="#upgrade-guide" class="block py-1 hover:text-indigo-600">Upgrade Guide</a></li>
                <li><a href="#troubleshooting" class="block py-1 hover:text-indigo-600">Troubleshooting</a></li>
                <li><a href="#contribution-guide" class="block py-1 hover:text-indigo-600">Contribution Guide</a></li>
            </ul>
        </nav>
    </div>
</aside>

<main class="md:ml-64 pt-28 pb-16 px-4">
    <div class="max-w-3xl mx-auto">
        <section id="introduction" class="mb-12">
            <h1 class="text-4xl font-bold mb-6">Introduction to Yabasi Framework</h1>

            <p class="mb-4">
                Yabasi is a powerful, flexible, and modern PHP framework designed for rapid application development. It combines the best practices of popular frameworks with innovative features to provide developers with a robust toolkit for building scalable and maintainable web applications.
            </p>

            <h2 class="text-2xl font-semibold mb-3">Key Features</h2>
            <ul class="list-disc list-inside mb-4">
                <li>Elegant MVC Architecture</li>
                <li>Powerful Routing System</li>
                <li>Intuitive ORM with advanced database abstraction</li>
                <li>Flexible Template Engine with Twig integration</li>
                <li>Built-in Security Features including CSRF protection and XSS prevention</li>
                <li>Dependency Injection Container for efficient service management</li>
                <li>Event-driven architecture for extensibility</li>
                <li>Command-line interface for automated tasks and migrations</li>
                <li>Comprehensive caching system</li>
                <li>RESTful API development tools</li>
                <li>WebSocket support for real-time applications</li>
                <li>Robust error handling and logging capabilities</li>
            </ul>

            <h2 class="text-2xl font-semibold mb-3">Philosophy</h2>
            <p class="mb-4">
                Yabasi is built on the principles of simplicity, flexibility, and performance. It aims to provide developers with a clean and intuitive API while offering the power and features needed for complex applications. The framework encourages best practices in software design and promotes code reusability and maintainability.
            </p>

            <h2 class="text-2xl font-semibold mb-3">Community and Ecosystem</h2>
            <p class="mb-4">
                Yabasi boasts a growing community of developers and a rich ecosystem of packages and extensions. The framework is open-source, encouraging collaboration and continuous improvement. Whether you're building a simple website or a complex enterprise application, Yabasi provides the tools and support you need to succeed.
            </p>

            <h2 class="text-2xl font-semibold mb-3">Who is Yabasi For?</h2>
            <p class="mb-4">
                Yabasi is designed for developers of all skill levels:
            </p>
            <ul class="list-disc list-inside mb-4">
                <li>Beginners will appreciate its clear documentation and gentle learning curve</li>
                <li>Experienced developers will love its powerful features and flexibility</li>
                <li>Teams will benefit from its emphasis on clean architecture and maintainable code</li>
            </ul>

            <h2 class="text-2xl font-semibold mb-3">Getting Started</h2>
            <p class="mb-4">
                Ready to dive in? The next sections will guide you through installing Yabasi and creating your first application. Whether you're new to PHP frameworks or an experienced developer, you'll find Yabasi intuitive and powerful.
            </p>
        </section>

        <section id="getting-started" class="mb-12">
            <h1 class="text-4xl font-bold mb-6">Getting Started with Yabasi</h1>

            <p class="mb-4">
                This section will guide you through the process of setting up your first Yabasi project. We'll cover installation, configuration, and creating a basic application.
            </p>

            <h2 class="text-2xl font-semibold mb-3">System Requirements</h2>
            <p class="mb-4">Before installing Yabasi, ensure your system meets the following requirements:</p>
            <ul class="list-disc list-inside mb-4">
                <li>PHP >= 8.1</li>
                <li>Composer</li>
                <li>PDO PHP Extension</li>
                <li>OpenSSL PHP Extension</li>
                <li>Mbstring PHP Extension</li>
                <li>Tokenizer PHP Extension</li>
            </ul>

            <h2 class="text-2xl font-semibold mb-3">Installation</h2>
            <p class="mb-4">Yabasi utilizes Composer for dependency management. To create a new Yabasi project, run the following command in your terminal:</p>

            <div class="bg-black rounded-lg shadow-md p-4 mb-4 relative">
                <button onclick="copyCode(this)" class="absolute top-2 right-2 text-gray-400 hover:text-white">
                    <i class="fas fa-copy"></i>
                </button>
                <code class="font-mono text-white">
                    <span class="text-purple-400">composer</span>
                    <span class="text-blue-400">create-project</span>
                    <span class="text-green-400">yabasi/yabasi</span>
                    <span class="text-yellow-400">your-project-name</span>
                </code>
            </div>

            <p class="mb-4">This command will create a new Yabasi project in the `your-project-name` directory.</p>

            <h2 class="text-2xl font-semibold mb-3">Configuration</h2>
            <p class="mb-4">After installation, you need to configure your application:</p>
            <ol class="list-decimal list-inside mb-4">
                <li>Rename the `.env.example` file to `.env`</li>
                <li>Open the `.env` file and update the database credentials and other configuration options</li>
                <li>Generate an application key by running:</li>
            </ol>

            <div class="bg-gray-900 rounded-lg shadow-md p-4 mb-4 relative">
                <button onclick="copyCode(this)" class="absolute top-2 right-2 text-gray-400 hover:text-white focus:outline-none">
                    <i class="fas fa-copy"></i>
                </button>
                <code class="font-mono text-white">
                    <span class="text-blue-400">php</span>
                    <span class="text-orange-400">yabasi</span>
                    <span class="text-yellow-400">key:generate</span>
                </code>
            </div>

            <h2 class="text-2xl font-semibold mb-3">Directory Structure</h2>
            <p class="mb-4">Familiarize yourself with the Yabasi directory structure:</p>
            <ul class="list-disc list-inside mb-4">
                <li><code>app/</code> - Contains the core code of your application</li>
                <li><code>config/</code> - Houses all of your application's configuration files</li>
                <li><code>public/</code> - The public directory contains the index.php file, which is the entry point for all requests</li>
                <li><code>resources/</code> - Contains your views and raw, un-compiled assets</li>
                <li><code>routes/</code> - Contains all of the route definitions for your application</li>
                <li><code>storage/</code> - Contains compiled Twig templates, file based sessions, file caches and other files generated by the framework</li>
                <li><code>tests/</code> - Contains your automated tests</li>
                <li><code>vendor/</code> - Contains your Composer dependencies</li>
            </ul>

            <h2 class="text-2xl font-semibold mb-3">Creating Your First Route</h2>
            <p class="mb-4">Let's create a simple route to test our installation. Open the `routes/web.php` file and add the following code:</p>

            <div class="bg-gray-900 rounded-lg shadow-lg overflow-hidden mb-4">
                <div class="flex items-center bg-gray-800 px-4 py-2 border-b border-gray-700">
                    <div class="flex space-x-2">
                        <div class="w-3 h-3 rounded-full bg-red-500"></div>
                        <div class="w-3 h-3 rounded-full bg-yellow-500"></div>
                        <div class="w-3 h-3 rounded-full bg-green-500"></div>
                    </div>
                    <span class="ml-4 text-gray-400 text-sm">routes/web.php</span>
                </div>
                <div class="flex">
                    <div class="py-4 px-2 text-right bg-gray-800 text-gray-500 select-none" aria-hidden="true" style="min-width: 2.5rem;">
                        <div>1</div>
                        <div>2</div>
                        <div>3</div>
                        <div>4</div>
                        <div>5</div>
                    </div>
                    <pre class="language-php flex-grow p-4 text-gray-300 overflow-x-auto" style="background-color: #2b2b2b;">
<code><span style="color: #cc7832;">use</span> Yabasi\Routing\Router;

<span style="color: #bbb529;">$router</span>-><span style="color: #ffc66d;">get</span>(<span style="color: #6a8759;">'/'</span>, <span style="color: #cc7832;">function</span>() {
    <span style="color: #cc7832;">return</span> <span style="color: #6a8759;">'Hello, Yabasi!'</span>;
});
</code></pre>
                </div>
            </div>


            <h2 class="text-2xl font-semibold mb-3">Running Your Application</h2>
            <p class="mb-4">You can use PHP's built-in server to run your application locally. Navigate to your project directory in the terminal and run:</p>

            <div class="bg-gray-900 rounded-lg shadow-md p-4 mb-4 relative">
                <button onclick="copyCode(this)" class="absolute top-2 right-2 text-gray-400 hover:text-white focus:outline-none">
                    <i class="fas fa-copy"></i>
                </button>
                <code class="font-mono text-white">
                    <span class="text-blue-400">php</span>
                    <span class="text-yellow-400">-S</span>
                    <span class="text-green-400">localhost:8000</span>
                    <span class="text-yellow-400">-t</span>
                    <span class="text-purple-400">public</span>
                </code>
            </div>

            <p class="mb-4">Now, open your web browser and visit `http://localhost:8000`. You should see "Hello, Yabasi!" displayed.</p>

            <h2 class="text-2xl font-semibold mb-3">Next Steps</h2>
            <p class="mb-4">Congratulations! You've successfully set up your first Yabasi application. From here, you can:</p>
            <ul class="list-disc list-inside mb-4">
                <li>Explore the <a href="#routing" class="text-blue-600 hover:underline">Routing</a> system</li>
                <li>Learn about <a href="#controllers" class="text-blue-600 hover:underline">Controllers</a></li>
                <li>Dive into <a href="#views" class="text-blue-600 hover:underline">Views</a> and templating</li>
                <li>Understand <a href="#models" class="text-blue-600 hover:underline">Models</a> and database interactions</li>
            </ul>

            <p class="mb-4">The following sections will guide you through these topics and more, helping you harness the full power of Yabasi framework.</p>
        </section>

        <section id="core-concepts" class="mb-12">
            <h1 class="text-4xl font-bold mb-6">Core Concepts</h1>

            <p class="mb-4">
                Yabasi Framework is built on several core concepts that form the foundation of its architecture and functionality. Understanding these concepts is crucial for effectively using the framework.
            </p>

            <h2 class="text-2xl font-semibold mb-3">MVC Architecture</h2>
            <p class="mb-4">
                Yabasi follows the Model-View-Controller (MVC) architectural pattern:
            </p>
            <ul class="list-disc list-inside mb-4">
                <li><strong>Models:</strong> Represent your data structure and handle database interactions.</li>
                <li><strong>Views:</strong> Handle the presentation logic and render the user interface.</li>
                <li><strong>Controllers:</strong> Act as intermediaries between Models and Views, processing requests and managing application logic.</li>
            </ul>

            <h2 class="text-2xl font-semibold mb-3">Dependency Injection</h2>
            <p class="mb-4">
                Yabasi uses a powerful Dependency Injection Container to manage class dependencies and perform dependency injection, promoting loose coupling and easier testing.
            </p>

            <h2 class="text-2xl font-semibold mb-3">Service Providers</h2>
            <p class="mb-4">
                Service Providers are the central place of all Yabasi application bootstrapping. They allow you to register services, event listeners, middleware, and even routes within your application.
            </p>

            <h2 class="text-2xl font-semibold mb-3">Middleware</h2>
            <p class="mb-4">
                Middleware provide a convenient mechanism for filtering HTTP requests entering your application, allowing you to perform actions before a request reaches your route or controller.
            </p>

            <h2 class="text-2xl font-semibold mb-3">ORM (Object-Relational Mapping)</h2>
            <p class="mb-4">
                Yabasi includes a powerful ORM that makes it easy to interact with your database using eloquent, intuitive syntax, without writing raw SQL queries.
            </p>

            <h2 class="text-2xl font-semibold mb-3">Event System</h2>
            <p class="mb-4">
                The event system allows you to subscribe and listen to various events that occur within your application, providing a great way to decouple various aspects of your application.
            </p>

            <h2 class="text-2xl font-semibold mb-3">Facades</h2>
            <p class="mb-4">
                Facades provide a static interface to classes that are available in the application's service container, offering the benefit of a terse, expressive syntax while maintaining more testability and flexibility than traditional static methods.
            </p>

            <p class="mt-4">
                As you delve deeper into Yabasi, you'll see how these core concepts work together to create a robust, flexible framework for your web applications.
            </p>
        </section>

        <section id="routing" class="mb-12">
            <h1 class="text-4xl font-bold mb-6">Routing</h1>

            <p class="mb-4">
                Routing is a core feature of Yabasi that allows you to map URLs to specific parts of your application. Yabasi provides a powerful and flexible routing system that can handle simple routes to complex patterns with ease.
            </p>

            <h2 class="text-2xl font-semibold mb-3">Basic Routing</h2>
            <p class="mb-4">
                The most basic Yabasi routes accept a URI and a closure:
            </p>

            <div class="bg-gray-900 rounded-lg shadow-lg overflow-hidden mb-4">
                <div class="flex items-center bg-gray-800 px-4 py-2 border-b border-gray-700">
                    <div class="flex space-x-2">
                        <div class="w-3 h-3 rounded-full bg-red-500"></div>
                        <div class="w-3 h-3 rounded-full bg-yellow-500"></div>
                        <div class="w-3 h-3 rounded-full bg-green-500"></div>
                    </div>
                    <span class="ml-4 text-gray-400 text-sm">routes/web.php</span>
                </div>
                <div class="flex">
                    <div class="py-4 px-2 text-right bg-gray-800 text-gray-500 select-none" aria-hidden="true" style="min-width: 2.5rem;">
                        <div>1</div>
                        <div>2</div>
                        <div>3</div>
                        <div>4</div>
                        <div>5</div>
                    </div>
                    <pre class="language-php flex-grow p-4 text-gray-300 overflow-x-auto" style="background-color: #2b2b2b;">
<code><span style="color: #cc7832;">use</span> Yabasi\Routing\Router;

<span style="color: #bbb529;">$router</span>-><span style="color: #ffc66d;">get</span>(<span style="color: #6a8759;">'/greeting'</span>, <span style="color: #cc7832;">function</span> () {
    <span style="color: #cc7832;">return</span> <span style="color: #6a8759;">'Hello, World!'</span>;
});
</code></pre>
                </div>
            </div>


            <h2 class="text-2xl font-semibold mb-3">Available Router Methods</h2>
            <p class="mb-4">
                The router provides methods for all common HTTP verbs:
            </p>

            <div class="bg-gray-900 rounded-lg shadow-lg overflow-hidden mb-4">
                <div class="flex items-center bg-gray-800 px-4 py-2 border-b border-gray-700">
                    <div class="flex space-x-2">
                        <div class="w-3 h-3 rounded-full bg-red-500"></div>
                        <div class="w-3 h-3 rounded-full bg-yellow-500"></div>
                        <div class="w-3 h-3 rounded-full bg-green-500"></div>
                    </div>
                    <span class="ml-4 text-gray-400 text-sm">routes/web.php</span>
                </div>
                <div class="flex">
                    <div class="py-4 px-2 text-right bg-gray-800 text-gray-500 select-none" aria-hidden="true" style="min-width: 2.5rem;">
                        <div>1</div>
                        <div>2</div>
                        <div>3</div>
                        <div>4</div>
                        <div>5</div>
                        <div>6</div>
                    </div>
                    <pre class="language-php flex-grow p-4 text-gray-300 overflow-x-auto" style="background-color: #2b2b2b;">
<code><span style="color: #bbb529;">$router</span>-><span style="color: #ffc66d;">get</span>(<span style="color: #6a8759;">$uri</span>, <span style="color: #6a8759;">$callback</span>);
<span style="color: #bbb529;">$router</span>-><span style="color: #ffc66d;">post</span>(<span style="color: #6a8759;">$uri</span>, <span style="color: #6a8759;">$callback</span>);
<span style="color: #bbb529;">$router</span>-><span style="color: #ffc66d;">put</span>(<span style="color: #6a8759;">$uri</span>, <span style="color: #6a8759;">$callback</span>);
<span style="color: #bbb529;">$router</span>-><span style="color: #ffc66d;">patch</span>(<span style="color: #6a8759;">$uri</span>, <span style="color: #6a8759;">$callback</span>);
<span style="color: #bbb529;">$router</span>-><span style="color: #ffc66d;">delete</span>(<span style="color: #6a8759;">$uri</span>, <span style="color: #6a8759;">$callback</span>);
<span style="color: #bbb529;">$router</span>-><span style="color: #ffc66d;">options</span>(<span style="color: #6a8759;">$uri</span>, <span style="color: #6a8759;">$callback</span>);
</code></pre>
                </div>
            </div>


            <h2 class="text-2xl font-semibold mb-3">Route Groups</h2>
            <p class="mb-4">
                Route groups allow you to share route attributes across a large number of routes without needing to define those attributes on each individual route:
            </p>

            <div class="bg-gray-900 rounded-lg shadow-lg overflow-hidden mb-4">
                <div class="flex items-center bg-gray-800 px-4 py-2 border-b border-gray-700">
                    <div class="flex space-x-2">
                        <div class="w-3 h-3 rounded-full bg-red-500"></div>
                        <div class="w-3 h-3 rounded-full bg-yellow-500"></div>
                        <div class="w-3 h-3 rounded-full bg-green-500"></div>
                    </div>
                    <span class="ml-4 text-gray-400 text-sm">routes/web.php</span>
                </div>
                <div class="flex">
                    <div class="py-4 px-2 text-right bg-gray-800 text-gray-500 select-none" aria-hidden="true" style="min-width: 2.5rem;">
                        <div>1</div>
                        <div>2</div>
                        <div>3</div>
                        <div>4</div>
                    </div>
                    <pre class="language-php flex-grow p-4 text-gray-300 overflow-x-auto" style="background-color: #2b2b2b;">
<code><span style="color: #bbb529;">$router</span>-><span style="color: #ffc66d;">group</span>([<span style="color: #6a8759;">'middleware'</span> => <span style="color: #6a8759;">[SessionMiddleware::class]</span>], <span style="color: #cc7832;">function</span> (<span style="color: #bbb529;">$router</span>) {
    <span style="color: #bbb529;">$router</span>-><span style="color: #ffc66d;">get</span>(<span style="color: #6a8759;">'/dashboard'</span>, <span style="color: #6a8759;">'DashboardController@index'</span>);
    <span style="color: #bbb529;">$router</span>-><span style="color: #ffc66d;">get</span>(<span style="color: #6a8759;">'/account'</span>, <span style="color: #6a8759;">'AccountController@show'</span>);
});
</code></pre>
                </div>
            </div>


            <h2 class="text-2xl font-semibold mb-3">Form Method Spoofing</h2>
            <p class="mb-4">
                HTML forms don't support PUT, PATCH or DELETE actions. To use these verb, add a hidden _method field to your form:
            </p>

            <div class="bg-gray-900 rounded-lg shadow-lg overflow-hidden mb-4">
                <div class="flex items-center bg-gray-800 px-4 py-2 border-b border-gray-700">
                    <div class="flex space-x-2">
                        <div class="w-3 h-3 rounded-full bg-red-500"></div>
                        <div class="w-3 h-3 rounded-full bg-yellow-500"></div>
                        <div class="w-3 h-3 rounded-full bg-green-500"></div>
                    </div>
                    <span class="ml-4 text-gray-400 text-sm">storage/view/form.twig</span>
                </div>
                <div class="flex">
                    <div class="py-4 px-2 text-right bg-gray-800 text-gray-500 select-none" aria-hidden="true" style="min-width: 2.5rem;">
                        <div>1</div>
                        <div>2</div>
                        <div>3</div>
                        <div>4</div>
                    </div>
                    <pre class="language-twig flex-grow p-4 text-gray-300 overflow-x-auto" style="background-color: #2b2b2b;">
<code>&lt;form action=&quot;/foo/bar&quot; method=&quot;POST&quot;&gt;
    &lt;input type=&quot;hidden&quot; name=&quot;_method&quot; value=&quot;PUT&quot;&gt;
    &#123;&#123; csrf_field()|raw &#125;&#125;
&lt;/form&gt;
</code></pre>
                </div>
            </div>

            <p class="mt-4">
                The routing system in Yabasi is both powerful and flexible, allowing you to structure your application's URLs in a way that makes sense for your project. As you build more complex applications, you'll find that mastering the routing system is key to creating clean, maintainable code.
            </p>
        </section>

        <section id="controllers" class="mb-12">
            <h1 class="text-4xl font-bold mb-6">Controllers</h1>

            <p class="mb-4">
                Controllers are a fundamental part of Yabasi's MVC architecture. They handle incoming HTTP requests, interact with models, and return responses. Let's dive deep into how controllers work in Yabasi.
            </p>

            <h2 class="text-2xl font-semibold mb-3">Basic Controller Structure</h2>
            <p class="mb-4">Here's a basic example of a controller in Yabasi:</p>

            <div class="bg-gray-900 rounded-lg shadow-lg overflow-hidden mb-4">
                <div class="flex items-center bg-gray-800 px-4 py-2 border-b border-gray-700">
                    <div class="flex space-x-2">
                        <div class="w-3 h-3 rounded-full bg-red-500"></div>
                        <div class="w-3 h-3 rounded-full bg-yellow-500"></div>
                        <div class="w-3 h-3 rounded-full bg-green-500"></div>
                    </div>
                    <span class="ml-4 text-gray-400 text-sm">app/Controllers/UserController.php</span>
                </div>
                <div class="flex">
                    <div class="py-4 px-2 text-right bg-gray-800 text-gray-500 select-none" aria-hidden="true" style="min-width: 2.5rem;">
                        <div>1</div><div>2</div><div>3</div><div>4</div><div>5</div><div>6</div><div>7</div><div>8</div><div>9</div><div>10</div>
                        <div>11</div><div>12</div><div>13</div><div>14</div><div>15</div><div>16</div><div>17</div><div>18</div><div>19</div><div>20</div>
                        <div>21</div><div>22</div><div>23</div><div>24</div><div>25</div><div>26</div><div>27</div><div>28</div><div>29</div><div>30</div>
                        <div>31</div><div>32</div><div>33</div><div>34</div><div>35</div><div>36</div><div>37</div><div>38</div><div>39</div><div>40</div>
                        <div>41</div><div>42</div><div>43</div><div>44</div><div>45</div><div>46</div><div>47</div><div>48</div><div>49</div><div>50</div>
                        <div>51</div><div>52</div><div>53</div><div>54</div><div>55</div><div>56</div><div>57</div><div>58</div><div>59</div><div>60</div>
                        <div>61</div><div>62</div><div>63</div><div>64</div><div>65</div><div>66</div><div>67</div><div>68</div><div>69</div><div>70</div>
                        <div>71</div><div>72</div><div>73</div><div>74</div><div>75</div><div>76</div><div>77</div><div>78</div><div>79</div><div>80</div>
                        <div>81</div><div>82</div><div>83</div><div>84</div><div>85</div><div>86</div><div>87</div><div>88</div><div>89</div><div>90</div>
                        <div>91</div><div>92</div><div>93</div><div>94</div>
                    </div>
                    <pre class="language-php flex-grow p-4 text-gray-300 overflow-x-auto" style="background-color: #2b2b2b;">
<code><span style="color: #cc7832;">namespace</span> Yabasi\Controllers;

<span style="color: #cc7832;">use</span> Exception;
<span style="color: #cc7832;">use</span> Yabasi\Container\Container;
<span style="color: #cc7832;">use</span> Yabasi\Controller\Controller;
<span style="color: #cc7832;">use</span> Yabasi\Http\Request;
<span style="color: #cc7832;">use</span> Yabasi\Http\Response;
<span style="color: #cc7832;">use</span> Yabasi\Logging\Logger;
<span style="color: #cc7832;">use</span> Yabasi\Models\Users;
<span style="color: #cc7832;">use</span> Yabasi\Requests\UserRegistrationRequest;
<span style="color: #cc7832;">use</span> Yabasi\Session\SessionManager;

<span style="color: #cc7832;">class</span> <span style="color: #ffc66d;">UserController</span> <span style="color: #cc7832;">extends</span> Controller
{
    <span style="color: #cc7832;">protected</span> SessionManager <span style="color: #9876aa;">$session</span>;
    <span style="color: #cc7832;">protected</span> Logger <span style="color: #9876aa;">$logger</span>;

    <span style="color: #cc7832;">public function</span> <span style="color: #ffc66d;">__construct</span>(Container <span style="color: #9876aa;">$container</span>)
    {
        parent::__construct(<span style="color: #9876aa;">$container</span>);
        <span style="color: #cc7832;">$this</span>->logger = <span style="color: #cc7832;">$this</span>->container->get(Logger::class);
    }

    <span style="color: #cc7832;">public function</span> <span style="color: #ffc66d;">index</span>(Request <span style="color: #9876aa;">$request</span>): Response
    {
        <span style="color: #808080;">// Fetch users from the database</span>
        <span style="color: #9876aa;">$users</span> = Users::all();

        <span style="color: #808080;">// Return a view with the users</span>
        <span style="color: #cc7832;">return</span> <span style="color: #cc7832;">$this</span>->view(<span style="color: #6a8759;">'users'</span>, [<span style="color: #6a8759;">'users'</span> => <span style="color: #9876aa;">$users</span>]);
    }

    <span style="color: #cc7832;">public function</span> <span style="color: #ffc66d;">store</span>(UserRegistrationRequest <span style="color: #9876aa;">$request</span>): Response
    {
        <span style="color: #808080;">// Early return if validation fails</span>
        <span style="color: #cc7832;">if</span> (!<span style="color: #9876aa;">$request</span>->validate()) {
            <span style="color: #cc7832;">return</span> (<span style="color: #cc7832;">new</span> Response())->redirect(<span style="color: #6a8759;">'/register'</span>);
        }

        <span style="color: #808080;">// Input validation</span>
        <span style="color: #9876aa;">$name</span> = trim(<span style="color: #9876aa;">$request</span>->input(<span style="color: #6a8759;">'name'</span>));
        <span style="color: #9876aa;">$email</span> = filter_var(<span style="color: #9876aa;">$request</span>->input(<span style="color: #6a8759;">'email'</span>), FILTER_SANITIZE_EMAIL);
        <span style="color: #9876aa;">$password</span> = <span style="color: #9876aa;">$request</span>->input(<span style="color: #6a8759;">'password'</span>);

        <span style="color: #808080;">// Additional input checks</span>
        <span style="color: #cc7832;">if</span> (empty(<span style="color: #9876aa;">$name</span>) || empty(<span style="color: #9876aa;">$email</span>) || empty(<span style="color: #9876aa;">$password</span>)) {
            <span style="color: #cc7832;">$this</span>->session->flash(<span style="color: #6a8759;">'error'</span>, <span style="color: #6a8759;">'All fields are required.'</span>);
            <span style="color: #cc7832;">$this</span>->session->flash(<span style="color: #6a8759;">'_old_input'</span>, <span style="color: #9876aa;">$request</span>->except([<span style="color: #6a8759;">'password'</span>]));
            <span style="color: #cc7832;">return</span> (<span style="color: #cc7832;">new</span> Response())->redirect(<span style="color: #6a8759;">'/register'</span>);
        }

        <span style="color: #808080;">// Email format check</span>
        <span style="color: #cc7832;">if</span> (!filter_var(<span style="color: #9876aa;">$email</span>, FILTER_VALIDATE_EMAIL)) {
            <span style="color: #cc7832;">$this</span>->session->flash(<span style="color: #6a8759;">'error'</span>, <span style="color: #6a8759;">'Invalid email format.'</span>);
            <span style="color: #cc7832;">$this</span>->session->flash(<span style="color: #6a8759;">'_old_input'</span>, <span style="color: #9876aa;">$request</span>->except([<span style="color: #6a8759;">'password'</span>]));
            <span style="color: #cc7832;">return</span> (<span style="color: #cc7832;">new</span> Response())->redirect(<span style="color: #6a8759;">'/register'</span>);
        }

        <span style="color: #cc7832;">try</span> {
            <span style="color: #808080;">// Check if email already exists</span>
            <span style="color: #9876aa;">$existingUser</span> = Users::query()->where(<span style="color: #6a8759;">'email'</span>, <span style="color: #9876aa;">$email</span>)->first();
            <span style="color: #cc7832;">if</span> (<span style="color: #9876aa;">$existingUser</span>) {
                <span style="color: #cc7832;">$this</span>->session->flash(<span style="color: #6a8759;">'error'</span>, <span style="color: #6a8759;">'Email already registered.'</span>);
                <span style="color: #cc7832;">$this</span>->session->flash(<span style="color: #6a8759;">'_old_input'</span>, <span style="color: #9876aa;">$request</span>->except([<span style="color: #6a8759;">'password'</span>]));
                <span style="color: #cc7832;">return</span> (<span style="color: #cc7832;">new</span> Response())->redirect(<span style="color: #6a8759;">'/register'</span>);
            }

            <span style="color: #808080;">// Create new user</span>
            <span style="color: #9876aa;">$user</span> = <span style="color: #cc7832;">new</span> Users();
            <span style="color: #9876aa;">$user</span>->setName(<span style="color: #9876aa;">$request</span>->input(<span style="color: #6a8759;">'name'</span>));
            <span style="color: #9876aa;">$user</span>->setEmail(<span style="color: #9876aa;">$request</span>->input(<span style="color: #6a8759;">'email'</span>));
            <span style="color: #9876aa;">$user</span>->setPassword(password_hash(<span style="color: #9876aa;">$request</span>->input(<span style="color: #6a8759;">'password'</span>), PASSWORD_DEFAULT));

            <span style="color: #808080;">// Save user</span>
            <span style="color: #cc7832;">if</span> (<span style="color: #9876aa;">$user</span>->save()) {
                <span style="color: #cc7832;">return</span> (<span style="color: #cc7832;">new</span> Response())->redirect(<span style="color: #6a8759;">'/'</span>);
            } <span style="color: #cc7832;">else</span> {
                <span style="color: #cc7832;">throw new</span> Exception(<span style="color: #6a8759;">"Failed to save user"</span>);
            }

        } <span style="color: #cc7832;">catch</span> (Exception <span style="color: #9876aa;">$e</span>) {
            <span style="color: #808080;">// Log the error with more details</span>
            <span style="color: #cc7832;">$this</span>->logger->error(<span style="color: #6a8759;">"User registration failed"</span>, [
                <span style="color: #6a8759;">'error'</span> => <span style="color: #9876aa;">$e</span>->getMessage(),
                <span style="color: #6a8759;">'email'</span> => <span style="color: #9876aa;">$email</span>,
                <span style="color: #6a8759;">'trace'</span> => <span style="color: #9876aa;">$e</span>->getTraceAsString()
            ]);

            <span style="color: #808080;">// User friendly error message</span>
            <span style="color: #cc7832;">$this</span>->session->flash(<span style="color: #6a8759;">'error'</span>, <span style="color: #6a8759;">'Registration failed. Please try again later.'</span>);
            <span style="color: #cc7832;">return</span> (<span style="color: #cc7832;">new</span> Response())->redirect(<span style="color: #6a8759;">'/register'</span>);
        }
    }
}</code></pre>
                </div>
            </div>


            <h2 class="text-2xl font-semibold mb-3">Controller Methods</h2>
            <p class="mb-4">
                Controller methods typically correspond to HTTP verbs and URIs. Common method names include:
            </p>
            <ul class="list-disc list-inside mb-4">
                <li><code>index()</code> - Display a list of resources</li>
                <li><code>show($id)</code> - Display a specific resource</li>
                <li><code>create()</code> - Show a form to create a new resource</li>
                <li><code>store(Request $request)</code> - Store a new resource</li>
                <li><code>edit($id)</code> - Show a form to edit an existing resource</li>
                <li><code>update(Request $request, $id)</code> - Update an existing resource</li>
                <li><code>destroy($id)</code> - Delete a resource</li>
            </ul>

            <h2 class="text-2xl font-semibold mb-3">Dependency Injection</h2>
            <p class="mb-4">
                Yabasi's controllers support automatic dependency injection. You can type-hint any dependencies in your controller's constructor or methods:
            </p>

            <div class="bg-gray-900 rounded-lg shadow-lg overflow-hidden mb-4">
                <div class="flex items-center bg-gray-800 px-4 py-2 border-b border-gray-700">
                    <div class="flex space-x-2">
                        <div class="w-3 h-3 rounded-full bg-red-500"></div>
                        <div class="w-3 h-3 rounded-full bg-yellow-500"></div>
                        <div class="w-3 h-3 rounded-full bg-green-500"></div>
                    </div>
                    <span class="ml-4 text-gray-400 text-sm">UserController.php</span>
                </div>
                <div class="flex">
                    <div class="py-4 px-2 text-right bg-gray-800 text-gray-500 select-none" aria-hidden="true" style="min-width: 2.5rem;">
                        <div>1</div>
                        <div>2</div>
                        <div>3</div>
                        <div>4</div>
                        <div>5</div>
                        <div>6</div>
                        <div>7</div>
                        <div>8</div>
                        <div>9</div>
                        <div>10</div>
                        <div>11</div>
                        <div>12</div>
                    </div>
                    <pre class="language-php flex-grow p-4 text-gray-300 overflow-x-auto" style="background-color: #2b2b2b;">
<code><span style="color: #cc7832;">public function</span> <span style="color: #ffc66d;">__construct</span>(<span style="color: #cc7832;">protected</span> UserService <span style="color: #bbb529;">$userService</span>)
{
    <span style="color: #808080;">// UserService is automatically injected</span>
}

<span style="color: #cc7832;">public function</span> <span style="color: #ffc66d;">show</span>(Request <span style="color: #bbb529;">$request</span>, <span style="color: #6a8759;">$id</span>, Logger <span style="color: #bbb529;">$logger</span>)
{
    <span style="color: #808080;">// Request and Logger are automatically injected</span>
    <span style="color: #bbb529;">$logger</span>-><span style="color: #ffc66d;">info</span>(<span style="color: #6a8759;">"Showing user with ID: {$id}"</span>);
    <span style="color: #bbb529;">$user</span> = <span style="color: #bbb529;">$this</span>-><span style="color: #ffc66d;">userService</span>-><span style="color: #ffc66d;">find</span>(<span style="color: #6a8759;">$id</span>);
    <span style="color: #cc7832;">return</span> <span style="color: #bbb529;">$this</span>-><span style="color: #ffc66d;">view</span>(<span style="color: #6a8759;">'users.show'</span>, [<span style="color: #6a8759;">'user'</span> => <span style="color: #bbb529;">$user</span>]);
}
</code></pre>
                </div>
            </div>


            <h2 class="text-2xl font-semibold mb-3">Resource Controllers</h2>
            <p class="mb-4">
                Yabasi provides a convenient way to create resource controllers that handle all CRUD operations for a resource:
            </p>

            <div class="bg-gray-900 rounded-lg p-4 mb-4 shadow-md relative">
                <button onclick="copyCode(this)" class="absolute top-2 right-2 text-gray-400 hover:text-white focus:outline-none">
                    <i class="fas fa-copy"></i>
                </button>
                <code class="font-mono text-white">
                    <span class="text-blue-400">php</span>
                    <span class="text-orange-400">yabasi</span>
                    <span class="text-yellow-400">make:controller</span>
                    <span class="text-green-400">UserController</span>
                    <span class="text-purple-400">--resource</span>
                </code>
            </div>

            <p class="mb-4">
                This command creates a controller with all the necessary methods for handling a resource.
            </p>

            <h2 class="text-2xl font-semibold mb-3">Controller Middleware</h2>
            <p class="mb-4">
                You can apply middleware to your controllers using the <code>middleware()</code> method:
            </p>

            <div class="bg-gray-900 rounded-lg shadow-lg overflow-hidden mb-4">
                <div class="flex items-center bg-gray-800 px-4 py-2 border-b border-gray-700">
                    <div class="flex space-x-2">
                        <div class="w-3 h-3 rounded-full bg-red-500"></div>
                        <div class="w-3 h-3 rounded-full bg-yellow-500"></div>
                        <div class="w-3 h-3 rounded-full bg-green-500"></div>
                    </div>
                    <span class="ml-4 text-gray-400 text-sm">UserController.php</span>
                </div>
                <div class="flex">
                    <div class="py-4 px-2 text-right bg-gray-800 text-gray-500 select-none" aria-hidden="true" style="min-width: 2.5rem;">
                        <div>1</div>
                        <div>2</div>
                        <div>3</div>
                        <div>4</div>
                        <div>5</div>
                    </div>
                    <pre class="language-php flex-grow p-4 text-gray-300 overflow-x-auto" style="background-color: #2b2b2b;">
<code><span style="color: #cc7832;">public function</span> <span style="color: #ffc66d;">__construct</span>()
{
    <span style="color: #bbb529;">$this</span>-><span style="color: #ffc66d;">middleware</span>(<span style="color: #6a8759;">'auth'</span>)-><span style="color: #ffc66d;">only</span>([<span style="color: #6a8759;">'store'</span>, <span style="color: #6a8759;">'update'</span>, <span style="color: #6a8759;">'destroy'</span>]);
    <span style="color: #bbb529;">$this</span>-><span style="color: #ffc66d;">middleware</span>(<span style="color: #6a8759;">'log'</span>)-><span style="color: #ffc66d;">except</span>(<span style="color: #6a8759;">'index'</span>);
}
</code></pre>
                </div>
            </div>


            <p class="mb-4">
                This allows you to filter HTTP requests entering your application before they reach your controller methods.
            </p>

            <p class="mt-4">
                Controllers are a crucial part of your Yabasi application, handling the core logic of your requests and responses. As you become more familiar with controllers, you'll be able to structure your application logic in a clean, organized manner.
            </p>
        </section>

        <section id="views" class="mb-12">
            <h1 class="text-4xl font-bold mb-6">Views</h1>

            <p class="mb-4">
                Views in Yabasi are responsible for containing the HTML served by your application. They separate your controller and application logic from your presentation logic, promoting cleaner, more maintainable code.
            </p>

            <h2 class="text-2xl font-semibold mb-3">Creating Views</h2>
            <p class="mb-4">
                Views are stored in the <code>resources/views</code> directory. A simple view might look like this:
            </p>

            <div class="bg-gray-900 rounded-lg shadow-lg overflow-hidden mb-4">
                <div class="flex items-center bg-gray-800 px-4 py-2 border-b border-gray-700">
                    <div class="flex space-x-2">
                        <div class="w-3 h-3 rounded-full bg-red-500"></div>
                        <div class="w-3 h-3 rounded-full bg-yellow-500"></div>
                        <div class="w-3 h-3 rounded-full bg-green-500"></div>
                    </div>
                    <span class="ml-4 text-gray-400 text-sm">storage/views/greeting.twig</span>
                </div>
                <div class="flex">
                    <div class="py-4 px-2 text-right bg-gray-800 text-gray-500 select-none" aria-hidden="true" style="min-width: 2.5rem;">
                        <div>1</div>
                        <div>2</div>
                        <div>3</div>
                        <div>4</div>
                        <div>5</div>
                    </div>
                    <pre class="language-twig flex-grow p-4 text-gray-300 overflow-x-auto" style="background-color: #2b2b2b;">
<code>&lt;html&gt;
    &lt;body&gt;
        &lt;h1&gt;Hello, &#123;&#123; name &#125;&#125;!&lt;/h1&gt;
    &lt;/body&gt;
&lt;/html&gt;
</code></pre>
                </div>
            </div>


            <h2 class="text-2xl font-semibold mb-3">Returning Views from Controllers</h2>
            <p class="mb-4">
                You can return a view from your controller using the <code>view()</code> helper method:
            </p>

            <div class="bg-gray-900 rounded-lg shadow-lg overflow-hidden mb-4">
                <div class="flex items-center bg-gray-800 px-4 py-2 border-b border-gray-700">
                    <div class="flex space-x-2">
                        <div class="w-3 h-3 rounded-full bg-red-500"></div>
                        <div class="w-3 h-3 rounded-full bg-yellow-500"></div>
                        <div class="w-3 h-3 rounded-full bg-green-500"></div>
                    </div>
                    <span class="ml-4 text-gray-400 text-sm">UserController.php</span>
                </div>
                <div class="flex">
                    <div class="py-4 px-2 text-right bg-gray-800 text-gray-500 select-none" aria-hidden="true" style="min-width: 2.5rem;">
                        <div>1</div>
                        <div>2</div>
                        <div>3</div>
                        <div>4</div>
                        <div>5</div>
                    </div>
                    <pre class="language-php flex-grow p-4 text-gray-300 overflow-x-auto" style="background-color: #2b2b2b;">
<code><span style="color: #cc7832;">public function</span> <span style="color: #ffc66d;">show</span>(<span style="color: #bbb529;">$id</span>)
{
    <span style="color: #bbb529;">$user</span> = User::<span style="color: #ffc66d;">find</span>(<span style="color: #bbb529;">$id</span>);
    <span style="color: #cc7832;">return</span> <span style="color: #bbb529;">$this</span>-><span style="color: #ffc66d;">view</span>(<span style="color: #6a8759;">'user.profile'</span>, [<span style="color: #6a8759;">'user'</span> => <span style="color: #bbb529;">$user</span>]);
}
</code></pre>
                </div>
            </div>


            <h2 class="text-2xl font-semibold mb-3">Passing Data to Views</h2>
            <p class="mb-4">
                You can pass data to views as an array:
            </p>

            <div class="bg-gray-900 rounded-lg shadow-lg overflow-hidden mb-4">
                <div class="flex items-center bg-gray-800 px-4 py-2 border-b border-gray-700">
                    <div class="flex space-x-2">
                        <div class="w-3 h-3 rounded-full bg-red-500"></div>
                        <div class="w-3 h-3 rounded-full bg-yellow-500"></div>
                        <div class="w-3 h-3 rounded-full bg-green-500"></div>
                    </div>
                    <span class="ml-4 text-gray-400 text-sm">UserController.php</span>
                </div>
                <div class="flex">
                    <div class="py-4 px-2 text-right bg-gray-800 text-gray-500 select-none" aria-hidden="true" style="min-width: 2.5rem;">
                        <div>1</div>
                        <div>2</div>
                        <div>3</div>
                        <div>4</div>
                    </div>
                    <pre class="language-php flex-grow p-4 text-gray-300 overflow-x-auto" style="background-color: #2b2b2b;">
<code><span style="color: #cc7832;">return</span> <span style="color: #bbb529;">$this</span>-><span style="color: #ffc66d;">view</span>(<span style="color: #6a8759;">'user.profile'</span>, [
    <span style="color: #6a8759;">'user'</span> => User::<span style="color: #ffc66d;">find</span>(<span style="color: #bbb529;">$id</span>),
    <span style="color: #6a8759;">'articles'</span> => Article::<span style="color: #ffc66d;">latest</span>()-><span style="color: #ffc66d;">get</span>()
]);
</code></pre>
                </div>
            </div>


            <h2 class="text-2xl font-semibold mb-3">Twig Templating Engine</h2>
            <p class="mb-4">
                Yabasi uses the Twig templating engine, which provides a powerful set of features for creating views:
            </p>

            <h3 class="text-xl font-semibold mb-2">Variables</h3>
            <div class="bg-gray-900 rounded-lg shadow-lg overflow-hidden mb-4">
                <div class="flex items-center bg-gray-800 px-4 py-2 border-b border-gray-700">
                    <div class="flex space-x-2">
                        <div class="w-3 h-3 rounded-full bg-red-500"></div>
                        <div class="w-3 h-3 rounded-full bg-yellow-500"></div>
                        <div class="w-3 h-3 rounded-full bg-green-500"></div>
                    </div>
                    <span class="ml-4 text-gray-400 text-sm">templates/example.twig</span>
                </div>
                <div class="flex">
                    <div class="py-4 px-2 text-right bg-gray-800 text-gray-500 select-none" aria-hidden="true" style="min-width: 2.5rem;">
                        <div>1</div>
                        <div>2</div>
                        <div>3</div>
                    </div>
                    <pre class="language-twig flex-grow p-4 text-gray-300 overflow-x-auto" style="background-color: #2b2b2b;">
<code>&#123;&#123; variable &#125;&#125;
&#123;&#123; user.name &#125;&#125;
&#123;&#123; user[&#39;name&#39;] &#125;&#125;
</code></pre>
                </div>
            </div>

            <h3 class="text-xl font-semibold mb-2">Control Structures</h3>
            <div class="bg-gray-900 rounded-lg shadow-lg overflow-hidden mb-4">
                <div class="flex items-center bg-gray-800 px-4 py-2 border-b border-gray-700">
                    <div class="flex space-x-2">
                        <div class="w-3 h-3 rounded-full bg-red-500"></div>
                        <div class="w-3 h-3 rounded-full bg-yellow-500"></div>
                        <div class="w-3 h-3 rounded-full bg-green-500"></div>
                    </div>
                    <span class="ml-4 text-gray-400 text-sm">templates/example.twig</span>
                </div>
                <div class="flex">
                    <div class="py-4 px-2 text-right bg-gray-800 text-gray-500 select-none" aria-hidden="true" style="min-width: 2.5rem;">
                        <div>1</div>
                        <div>2</div>
                        <div>3</div>
                        <div>4</div>
                        <div>5</div>
                        <div>6</div>
                        <div>7</div>
                    </div>
                    <pre class="language-twig flex-grow p-4 text-gray-300 overflow-x-auto" style="background-color: #2b2b2b;">
<code>&#123;% if user %&#125;
    Hello, &#123;&#123; user.name &#125;&#125;!
&#123;% endif %&#125;

&#123;% for user in users %&#125;
    &lt;li&gt;&#123;&#123; user.name &#125;&#125;&lt;/li&gt;
&#123;% endfor %&#125;
</code></pre>
                </div>
            </div>


            <h3 class="text-xl font-semibold mb-2">Template Inheritance</h3>
            <p class="mb-4">
                Twig allows you to build a base "skeleton" template that contains all the common elements of your site:
            </p>

            <div class="bg-gray-900 rounded-lg shadow-lg overflow-hidden mb-4">
                <div class="flex items-center bg-gray-800 px-4 py-2 border-b border-gray-700">
                    <div class="flex space-x-2">
                        <div class="w-3 h-3 rounded-full bg-red-500"></div>
                        <div class="w-3 h-3 rounded-full bg-yellow-500"></div>
                        <div class="w-3 h-3 rounded-full bg-green-500"></div>
                    </div>
                    <span class="ml-4 text-gray-400 text-sm">layout.twig / child.twig</span>
                </div>
                <div class="flex">
                    <div class="py-4 px-2 text-right bg-gray-800 text-gray-500 select-none" aria-hidden="true" style="min-width: 2.5rem;">
                        <div>1</div>
                        <div>2</div>
                        <div>3</div>
                        <div>4</div>
                        <div>5</div>
                        <div>6</div>
                        <div>7</div>
                        <div>8</div>
                        <div>9</div>
                        <div>10</div>
                        <div>11</div>
                        <div>12</div>
                        <div>13</div>
                        <div>14</div>
                        <div>15</div>
                        <div>16</div>
                    </div>
                    <pre class="language-twig flex-grow p-4 text-gray-300 overflow-x-auto" style="background-color: #2b2b2b;">
<code>&lt;!-- layout.twig --&gt;
&lt;html&gt;
    &lt;head&gt;
        &lt;title&gt;&#123;% block title %&#125;My Site&#123;% endblock %&#125;&lt;/title&gt;
    &lt;/head&gt;
    &lt;body&gt;
        &#123;% block content %&#125;&#123;% endblock %&#125;
    &lt;/body&gt;
&lt;/html&gt;

&lt;!-- child.twig --&gt;
&#123;% extends &quot;layout.twig&quot; %&#125;

&#123;% block title %&#125;My Page&#123;% endblock %&#125;

&#123;% block content %&#125;
    &lt;h1&gt;Welcome to my page!&lt;/h1&gt;
&#123;% endblock %&#125;
</code></pre>
                </div>
            </div>


            <h2 class="text-2xl font-semibold mb-3">View Composers</h2>
            <p class="mb-4">
                View composers are callbacks or class methods that are called when a view is rendered. They allow you to bind data to a view each time it's rendered:
            </p>

            <div class="bg-gray-900 rounded-lg shadow-lg overflow-hidden mb-4">
                <div class="flex items-center bg-gray-800 px-4 py-2 border-b border-gray-700">
                    <div class="flex space-x-2">
                        <div class="w-3 h-3 rounded-full bg-red-500"></div>
                        <div class="w-3 h-3 rounded-full bg-yellow-500"></div>
                        <div class="w-3 h-3 rounded-full bg-green-500"></div>
                    </div>
                    <span class="ml-4 text-gray-400 text-sm">routes/web.php</span>
                </div>
                <div class="flex">
                    <div class="py-4 px-2 text-right bg-gray-800 text-gray-500 select-none" aria-hidden="true" style="min-width: 2.5rem;">
                        <div>1</div>
                        <div>2</div>
                        <div>3</div>
                    </div>
                    <pre class="language-php flex-grow p-4 text-gray-300 overflow-x-auto" style="background-color: #2b2b2b;">
<code><span style="color: #cc7832;">View</span>::<span style="color: #ffc66d;">composer</span>(<span style="color: #6a8759;">'user.profile'</span>, <span style="color: #cc7832;">function</span>(<span style="color: #bbb529;">$view</span>) {
    <span style="color: #bbb529;">$view</span>-><span style="color: #ffc66d;">with</span>(<span style="color: #6a8759;">'count'</span>, User::<span style="color: #ffc66d;">count</span>());
});
</code></pre>
                </div>
            </div>


            <h2 class="text-2xl font-semibold mb-3">Optimization</h2>
            <p class="mb-4">
                Yabasi can cache your views for faster rendering. To cache all your views, run:
            </p>

            <div class="bg-gray-900 rounded-lg p-4 mb-4 shadow-md relative">
                <button onclick="copyCode(this)"
                        class="absolute top-2 right-2 text-gray-400 hover:text-white focus:outline-none">
                    <i class="fas fa-copy"></i>
                </button>
                <code class="font-mono text-white">
                    <span class="text-blue-400">php</span>
                    <span class="text-orange-400">yabasi</span>
                    <span class="text-yellow-400">view:cache</span>
                </code>
            </div>

            <p class="mb-4">
                To clear the view cache:
            </p>

            <div class="bg-gray-900 rounded-lg p-4 mb-4 shadow-md relative">
                <button onclick="copyCode(this)"
                        class="absolute top-2 right-2 text-gray-400 hover:text-white focus:outline-none">
                    <i class="fas fa-copy"></i>
                </button>
                <code class="font-mono text-white">
                    <span class="text-blue-400">php</span>
                    <span class="text-orange-400">yabasi</span>
                    <span class="text-yellow-400">view:clear</span>
                </code>
            </div>

            <h2 class="text-2xl font-semibold mb-3">Custom Twig Extensions</h2>
            <p class="mb-4">
                Yabasi allows you to create custom Twig extensions to add extra functionality to your views:
            </p>

            <div class="bg-gray-900 rounded-lg shadow-lg overflow-hidden mb-4">
                <div class="flex items-center bg-gray-800 px-4 py-2 border-b border-gray-700">
                    <div class="flex space-x-2">
                        <div class="w-3 h-3 rounded-full bg-red-500"></div>
                        <div class="w-3 h-3 rounded-full bg-yellow-500"></div>
                        <div class="w-3 h-3 rounded-full bg-green-500"></div>
                    </div>
                    <span class="ml-4 text-gray-400 text-sm">MyCustomExtension.php</span>
                </div>
                <div class="flex">
                    <div class="py-4 px-2 text-right bg-gray-800 text-gray-500 select-none" aria-hidden="true" style="min-width: 2.5rem;">
                        <div>1</div>
                        <div>2</div>
                        <div>3</div>
                        <div>4</div>
                        <div>5</div>
                        <div>6</div>
                        <div>7</div>
                        <div>8</div>
                        <div>9</div>
                        <div>10</div>
                        <div>11</div>
                        <div>12</div>
                        <div>13</div>
                        <div>14</div>
                        <div>15</div>
                        <div>16</div>
                        <div>17</div>
                        <div>18</div>
                        <div>19</div>
                        <div>20</div>
                        <div>21</div>
                        <div>22</div>
                        <div>23</div>
                        <div>24</div>
                    </div>
                    <pre class="language-php flex-grow p-4 text-gray-300 overflow-x-auto" style="background-color: #2b2b2b;">
<code><span style="color: #cc7832;">use</span> Twig\Extension\AbstractExtension;
<span style="color: #cc7832;">use</span> Twig\TwigFilter;

<span style="color: #cc7832;">class</span> <span style="color: #ffc66d;">MyCustomExtension</span> <span style="color: #cc7832;">extends</span> AbstractExtension
{
    <span style="color: #cc7832;">public function</span> <span style="color: #ffc66d;">getFilters</span>()
    {
        <span style="color: #cc7832;">return</span> [
            <span style="color: #cc7832;">new</span> TwigFilter(<span style="color: #6a8759;">'price'</span>, [<span style="color: #cc7832;">$this</span>, <span style="color: #6a8759;">'formatPrice'</span>]),
        ];
    }

    <span style="color: #cc7832;">public function</span> <span style="color: #ffc66d;">formatPrice</span>(<span style="color: #bbb529;">$number</span>, <span style="color: #bbb529;">$decimals</span> = <span style="color: #6a8759;">2</span>, <span style="color: #bbb529;">$decPoint</span> = <span style="color: #6a8759;">'.'</span>, <span style="color: #bbb529;">$thousandsSep</span> = <span style="color: #6a8759;">','</span>)
    {
        <span style="color: #cc7832;">return</span> <span style="color: #6a8759;">'$'</span> . <span style="color: #ccc;">number_format</span>(<span style="color: #bbb529;">$number</span>, <span style="color: #bbb529;">$decimals</span>, <span style="color: #bbb529;">$decPoint</span>, <span style="color: #bbb529;">$thousandsSep</span>);
    }
}

<span style="color: #808080;">// In a service provider:</span>
<span style="color: #bbb529;">$this</span>->app-><span style="color: #ffc66d;">singleton</span>(Twig\Environment::class, <span style="color: #cc7832;">function</span> (<span style="color: #bbb529;">$app</span>) {
    <span style="color: #bbb529;">$twig</span> = <span style="color: #cc7832;">new</span> Twig\Environment(...);
    <span style="color: #bbb529;">$twig</span>-><span style="color: #ffc66d;">addExtension</span>(<span style="color: #cc7832;">new</span> MyCustomExtension());
    <span style="color: #cc7832;">return</span> <span style="color: #bbb529;">$twig</span>;
});
</code></pre>
                </div>
            </div>


            <p class="mt-4">
                Views are an essential part of any web application, and Yabasi provides a flexible and powerful system for managing your application's presentation layer. By leveraging Twig's features and Yabasi's view helpers, you can create complex, dynamic user interfaces with ease.
            </p>
        </section>

        <section id="models" class="mb-12">
            <h1 class="text-4xl font-bold mb-6">Models</h1>

            <p class="mb-4">
                Models in Yabasi represent the data structure and business logic of your application. They interact with the database, handle relationships between different entities, and provide an elegant way to work with your data.
            </p>

            <h2 class="text-2xl font-semibold mb-3">Defining Models</h2>
            <p class="mb-4">
                To create a model, extend the <code>Yabasi\Database\Model</code> class:
            </p>

            <div class="bg-gray-900 rounded-lg shadow-lg overflow-hidden mb-4">
                <div class="flex items-center bg-gray-800 px-4 py-2 border-b border-gray-700">
                    <div class="flex space-x-2">
                        <div class="w-3 h-3 rounded-full bg-red-500"></div>
                        <div class="w-3 h-3 rounded-full bg-yellow-500"></div>
                        <div class="w-3 h-3 rounded-full bg-green-500"></div>
                    </div>
                    <span class="ml-4 text-gray-400 text-sm">User.php</span>
                </div>
                <div class="flex">
                    <div class="py-4 px-2 text-right bg-gray-800 text-gray-500 select-none" aria-hidden="true" style="min-width: 2.5rem;">
                        <div>1</div>
                        <div>2</div>
                        <div>3</div>
                        <div>4</div>
                        <div>5</div>
                        <div>6</div>
                        <div>7</div>
                        <div>8</div>
                        <div>9</div>
                    </div>
                    <pre class="language-php flex-grow p-4 text-gray-300 overflow-x-auto" style="background-color: #2b2b2b;">
<code><span style="color: #cc7832;">namespace</span> Yabasi\Models;

<span style="color: #cc7832;">use</span> Yabasi\Database\Model;

<span style="color: #cc7832;">class</span> <span style="color: #ffc66d;">User</span> <span style="color: #cc7832;">extends</span> Model
{
    <span style="color: #cc7832;">protected static string</span> <span style="color: #9876aa;">$table</span> = <span style="color: #6a8759;">'users'</span>;
    <span style="color: #cc7832;">protected array</span> <span style="color: #9876aa;">$fillable</span> = [<span style="color: #6a8759;">'name'</span>, <span style="color: #6a8759;">'email'</span>, <span style="color: #6a8759;">'password'</span>];
}</code></pre>
                </div>
            </div>

            <h2 class="text-2xl font-semibold mb-3">Creating and Saving Models</h2>
            <p class="mb-4">
                You can create and save model instances like this:
            </p>

            <div class="bg-gray-900 rounded-lg shadow-lg overflow-hidden mb-4">
                <div class="flex items-center bg-gray-800 px-4 py-2 border-b border-gray-700">
                    <div class="flex space-x-2">
                        <div class="w-3 h-3 rounded-full bg-red-500"></div>
                        <div class="w-3 h-3 rounded-full bg-yellow-500"></div>
                        <div class="w-3 h-3 rounded-full bg-green-500"></div>
                    </div>
                    <span class="ml-4 text-gray-400 text-sm">UserController.php</span>
                </div>
                <div class="flex">
                    <div class="py-4 px-2 text-right bg-gray-800 text-gray-500 select-none" aria-hidden="true" style="min-width: 2.5rem;">
                        <div>1</div>
                        <div>2</div>
                        <div>3</div>
                        <div>4</div>
                        <div>5</div>
                        <div>6</div>
                        <div>7</div>
                    </div>
                    <pre class="language-php flex-grow p-4 text-gray-300 overflow-x-auto" style="background-color: #2b2b2b;">
<code><span style="color: #bbb529;">$user</span> = <span style="color: #cc7832;">new</span> User();
<span style="color: #bbb529;">$user</span>->setName(<span style="color: #6a8759;">"John Doe"</span>);
<span style="color: #bbb529;">$user</span>->setEmail(<span style="color: #6a8759;">"john@example.com"</span>);
<span style="color: #bbb529;">$user</span>->setPassword(<span style="color: #6a8759;">"secret"</span>);
<span style="color: #bbb529;">$result</span> = <span style="color: #bbb529;">$user</span>->save();

<span style="color: #cc7832;">echo</span> <span style="color: #6a8759;">"User save result: "</span> . (<span style="color: #bbb529;">$result</span> ? <span style="color: #6a8759;">"true"</span> : <span style="color: #6a8759;">"false"</span>);</code></pre>
                </div>
            </div>

            <h2 class="text-2xl font-semibold mb-3">Retrieving Models</h2>
            <p class="mb-4">
                Yabasi provides various methods to retrieve models:
            </p>

            <div class="bg-gray-900 rounded-lg shadow-lg overflow-hidden mb-4">
                <div class="flex items-center bg-gray-800 px-4 py-2 border-b border-gray-700">
                    <div class="flex space-x-2">
                        <div class="w-3 h-3 rounded-full bg-red-500"></div>
                        <div class="w-3 h-3 rounded-full bg-yellow-500"></div>
                        <div class="w-3 h-3 rounded-full bg-green-500"></div>
                    </div>
                    <span class="ml-4 text-gray-400 text-sm">UserController.php</span>
                </div>
                <div class="flex">
                    <div class="py-4 px-2 text-right bg-gray-800 text-gray-500 select-none" aria-hidden="true" style="min-width: 2.5rem;">
                        <div>1</div>
                        <div>2</div>
                        <div>3</div>
                        <div>4</div>
                        <div>5</div>
                        <div>6</div>
                        <div>7</div>
                        <div>8</div>
                        <div>9</div>
                        <div>10</div>
                        <div>11</div>
                    </div>
                    <pre class="language-php flex-grow p-4 text-gray-300 overflow-x-auto" style="background-color: #2b2b2b;">
<code><span style="color: #808080;">// Find by ID</span>
<span style="color: #bbb529;">$user</span> = User::<span style="color: #ffc66d;">find</span>(<span style="color: #6897bb;">1</span>);

<span style="color: #808080;">// Find by email</span>
<span style="color: #bbb529;">$user</span> = User::query()->where(<span style="color: #6a8759;">'email'</span>, <span style="color: #6a8759;">'john@example.com'</span>)->first();

<span style="color: #808080;">// Get all users</span>
<span style="color: #bbb529;">$allUsers</span> = User::<span style="color: #ffc66d;">all</span>();

<span style="color: #808080;">// Count users</span>
<span style="color: #bbb529;">$userCount</span> = User::<span style="color: #ffc66d;">count</span>();</code></pre>
                </div>
            </div>

            <h2 class="text-2xl font-semibold mb-3">Updating Models</h2>
            <p class="mb-4">
                You can update model attributes and save changes:
            </p>

            <div class="bg-gray-900 rounded-lg shadow-lg overflow-hidden mb-4">
                <div class="flex items-center bg-gray-800 px-4 py-2 border-b border-gray-700">
                    <div class="flex space-x-2">
                        <div class="w-3 h-3 rounded-full bg-red-500"></div>
                        <div class="w-3 h-3 rounded-full bg-yellow-500"></div>
                        <div class="w-3 h-3 rounded-full bg-green-500"></div>
                    </div>
                    <span class="ml-4 text-gray-400 text-sm">UserController.php</span>
                </div>
                <div class="flex">
                    <div class="py-4 px-2 text-right bg-gray-800 text-gray-500 select-none" aria-hidden="true" style="min-width: 2.5rem;">
                        <div>1</div>
                        <div>2</div>
                        <div>3</div>
                        <div>4</div>
                    </div>
                    <pre class="language-php flex-grow p-4 text-gray-300 overflow-x-auto" style="background-color: #2b2b2b;">
<code><span style="color: #bbb529;">$user</span> = User::<span style="color: #ffc66d;">find</span>(<span style="color: #6897bb;">1</span>);
<span style="color: #bbb529;">$user</span>->setName(<span style="color: #6a8759;">"John Updated"</span>);
<span style="color: #bbb529;">$updateResult</span> = <span style="color: #bbb529;">$user</span>->save();
<span style="color: #cc7832;">echo</span> <span style="color: #6a8759;">"User update result: "</span> . (<span style="color: #bbb529;">$updateResult</span> ? <span style="color: #6a8759;">"true"</span> : <span style="color: #6a8759;">"false"</span>);</code></pre>
                </div>
            </div>

            <h2 class="text-2xl font-semibold mb-3">Deleting Models</h2>
            <p class="mb-4">
                To delete a model:
            </p>

            <div class="bg-gray-900 rounded-lg shadow-lg overflow-hidden mb-4">
                <div class="flex items-center bg-gray-800 px-4 py-2 border-b border-gray-700">
                    <div class="flex space-x-2">
                        <div class="w-3 h-3 rounded-full bg-red-500"></div>
                        <div class="w-3 h-3 rounded-full bg-yellow-500"></div>
                        <div class="w-3 h-3 rounded-full bg-green-500"></div>
                    </div>
                    <span class="ml-4 text-gray-400 text-sm">UserController.php</span>
                </div>
                <div class="flex">
                    <div class="py-4 px-2 text-right bg-gray-800 text-gray-500 select-none" aria-hidden="true" style="min-width: 2.5rem;">
                        <div>1</div>
                        <div>2</div>
                    </div>
                    <pre class="language-php flex-grow p-4 text-gray-300 overflow-x-auto" style="background-color: #2b2b2b;">
<code><span style="color: #bbb529;">$user</span> = User::<span style="color: #ffc66d;">find</span>(<span style="color: #6897bb;">1</span>);
<span style="color: #bbb529;">$deleteResult</span> = <span style="color: #bbb529;">$user</span>->delete();</code></pre>
                </div>
            </div>

            <h2 class="text-2xl font-semibold mb-3">Query Building</h2>
            <p class="mb-4">
                Yabasi provides a fluent query builder:
            </p>

            <div class="bg-gray-900 rounded-lg shadow-lg overflow-hidden mb-4">
                <div class="flex items-center bg-gray-800 px-4 py-2 border-b border-gray-700">
                    <div class="flex space-x-2">
                        <div class="w-3 h-3 rounded-full bg-red-500"></div>
                        <div class="w-3 h-3 rounded-full bg-yellow-500"></div>
                        <div class="w-3 h-3 rounded-full bg-green-500"></div>
                    </div>
                    <span class="ml-4 text-gray-400 text-sm">UserController.php</span>
                </div>
                <div class="flex">
                    <div class="py-4 px-2 text-right bg-gray-800 text-gray-500 select-none" aria-hidden="true" style="min-width: 2.5rem;">
                        <div>1</div>
                        <div>2</div>
                        <div>3</div>
                        <div>4</div>
                        <div>5</div>
                    </div>
                    <pre class="language-php flex-grow p-4 text-gray-300 overflow-x-auto" style="background-color: #2b2b2b;">
<code><span style="color: #bbb529;">$recentUsers</span> = User::query()
    ->where(<span style="color: #6a8759;">'name'</span>, <span style="color: #6a8759;">'LIKE'</span>, <span style="color: #6a8759;">'John%'</span>)
    ->orderBy(<span style="color: #6a8759;">'created_at'</span>, <span style="color: #6a8759;">'DESC'</span>)
    ->limit(<span style="color: #6897bb;">5</span>)
    ->get();</code></pre>
                </div>
            </div>

            <h2 class="text-2xl font-semibold mb-3">Relationships</h2>
            <p class="mb-4">
                Yabasi supports various types of relationships between models, allowing you to easily work with related data:
            </p>
            <h3 class="text-xl font-semibold mb-2">One-to-Many Relationship</h3>
            <div class="bg-gray-900 rounded-lg shadow-lg overflow-hidden mb-4">
                <div class="flex items-center bg-gray-800 px-4 py-2 border-b border-gray-700">
                    <div class="flex space-x-2">
                        <div class="w-3 h-3 rounded-full bg-red-500"></div>
                        <div class="w-3 h-3 rounded-full bg-yellow-500"></div>
                        <div class="w-3 h-3 rounded-full bg-green-500"></div>
                    </div>
                    <span class="ml-4 text-gray-400 text-sm">User.php</span>
                </div>
                <div class="flex">
                    <div class="py-4 px-2 text-right bg-gray-800 text-gray-500 select-none" aria-hidden="true" style="min-width: 2.5rem;">
                        <div>1</div>
                        <div>2</div>
                        <div>3</div>
                        <div>4</div>
                        <div>5</div>
                        <div>6</div>
                    </div>
                    <pre class="language-php flex-grow p-4 text-gray-300 overflow-x-auto" style="background-color: #2b2b2b;">
<code><span style="color: #cc7832;">class</span> <span style="color: #ffc66d;">User</span> <span style="color: #cc7832;">extends</span> Model
{
    <span style="color: #cc7832;">public function</span> <span style="color: #ffc66d;">posts</span>() {
        <span style="color: #cc7832;">return</span> <span style="color: #bbb529;">$this</span>->hasMany(Post::<span style="color: #cc7832;">class</span>);
    }
}</code></pre>
                </div>
            </div>
            <h3 class="text-xl font-semibold mb-2">Belongs-To Relationship</h3>
            <div class="bg-gray-900 rounded-lg shadow-lg overflow-hidden mb-4">
                <div class="flex items-center bg-gray-800 px-4 py-2 border-b border-gray-700">
                    <div class="flex space-x-2">
                        <div class="w-3 h-3 rounded-full bg-red-500"></div>
                        <div class="w-3 h-3 rounded-full bg-yellow-500"></div>
                        <div class="w-3 h-3 rounded-full bg-green-500"></div>
                    </div>
                    <span class="ml-4 text-gray-400 text-sm">Post.php</span>
                </div>
                <div class="flex">
                    <div class="py-4 px-2 text-right bg-gray-800 text-gray-500 select-none" aria-hidden="true" style="min-width: 2.5rem;">
                        <div>1</div>
                        <div>2</div>
                        <div>3</div>
                        <div>4</div>
                        <div>5</div>
                        <div>6</div>
                    </div>
                    <pre class="language-php flex-grow p-4 text-gray-300 overflow-x-auto" style="background-color: #2b2b2b;">
<code><span style="color: #cc7832;">class</span> <span style="color: #ffc66d;">Post</span> <span style="color: #cc7832;">extends</span> Model
{
    <span style="color: #cc7832;">public function</span> <span style="color: #ffc66d;">author</span>() {
        <span style="color: #cc7832;">return</span> <span style="color: #bbb529;">$this</span>->belongsTo(User::<span style="color: #cc7832;">class</span>);
    }
}</code></pre>
                </div>
            </div>
            <h3 class="text-xl font-semibold mb-2">Using Relationships</h3>
            <p class="mb-4">
                You can easily access related models:
            </p>
            <div class="bg-gray-900 rounded-lg shadow-lg overflow-hidden mb-4">
                <div class="flex items-center bg-gray-800 px-4 py-2 border-b border-gray-700">
                    <div class="flex space-x-2">
                        <div class="w-3 h-3 rounded-full bg-red-500"></div>
                        <div class="w-3 h-3 rounded-full bg-yellow-500"></div>
                        <div class="w-3 h-3 rounded-full bg-green-500"></div>
                    </div>
                    <span class="ml-4 text-gray-400 text-sm">UserController.php</span>
                </div>
                <div class="flex">
                    <div class="py-4 px-2 text-right bg-gray-800 text-gray-500 select-none" aria-hidden="true" style="min-width: 2.5rem;">
                        <div>1</div>
                        <div>2</div>
                        <div>3</div>
                        <div>4</div>
                        <div>5</div>
                        <div>6</div>
                        <div>7</div>
                        <div>8</div>
                    </div>
                    <pre class="language-php flex-grow p-4 text-gray-300 overflow-x-auto" style="background-color: #2b2b2b;">
<code><span style="color: #bbb529;">$user</span> = User::<span style="color: #ffc66d;">find</span>(<span style="color: #6897bb;">1</span>);
<span style="color: #bbb529;">$posts</span> = <span style="color: #bbb529;">$user</span>->posts;
<span style="color: #cc7832;">foreach</span> (<span style="color: #bbb529;">$posts</span> <span style="color: #cc7832;">as</span> <span style="color: #bbb529;">$post</span>) {
    <span style="color: #cc7832;">echo</span> <span style="color: #bbb529;">$post</span>->title . <span style="color: #6a8759;">" by "</span> . <span style="color: #bbb529;">$post</span>->author->name . <span style="color: #6a8759;">"\n"</span>;
}

<span style="color: #bbb529;">$post</span> = Post::<span style="color: #ffc66d;">find</span>(<span style="color: #6897bb;">1</span>);
<span style="color: #cc7832;">echo</span> <span style="color: #6a8759;">"Author: "</span> . <span style="color: #bbb529;">$post</span>->author->name;</code></pre>
                </div>
            </div>
            <h3 class="text-xl font-semibold mb-2">Eager Loading</h3>
            <p class="mb-4">
                To avoid the N+1 query problem, you can use eager loading:
            </p>
            <div class="bg-gray-900 rounded-lg shadow-lg overflow-hidden mb-4">
                <div class="flex items-center bg-gray-800 px-4 py-2 border-b border-gray-700">
                    <div class="flex space-x-2">
                        <div class="w-3 h-3 rounded-full bg-red-500"></div>
                        <div class="w-3 h-3 rounded-full bg-yellow-500"></div>
                        <div class="w-3 h-3 rounded-full bg-green-500"></div>
                    </div>
                    <span class="ml-4 text-gray-400 text-sm">UserController.php</span>
                </div>
                <div class="flex">
                    <div class="py-4 px-2 text-right bg-gray-800 text-gray-500 select-none" aria-hidden="true" style="min-width: 2.5rem;">
                        <div>1</div>
                        <div>2</div>
                        <div>3</div>
                        <div>4</div>
                    </div>
                    <pre class="language-php flex-grow p-4 text-gray-300 overflow-x-auto" style="background-color: #2b2b2b;">
<code><span style="color: #bbb529;">$users</span> = User::with(<span style="color: #6a8759;">'posts'</span>)->get();
<span style="color: #cc7832;">foreach</span> (<span style="color: #bbb529;">$users</span> <span style="color: #cc7832;">as</span> <span style="color: #bbb529;">$user</span>) {
    <span style="color: #cc7832;">echo</span> <span style="color: #bbb529;">$user</span>->name . <span style="color: #6a8759;">" has "</span> . <span style="color: #bbb529;">$user</span>->posts->count() . <span style="color: #6a8759;">" posts.\n"</span>;
}</code></pre>
                </div>
            </div>
            <h2 class="text-2xl font-semibold mb-3">Mass Assignment</h2>
            <p class="mb-4">
                Yabasi allows you to set multiple attributes at once using the <code>fill()</code> method:
            </p>
            <div class="bg-gray-900 rounded-lg shadow-lg overflow-hidden mb-4">
                <div class="flex items-center bg-gray-800 px-4 py-2 border-b border-gray-700">
                    <div class="flex space-x-2">
                        <div class="w-3 h-3 rounded-full bg-red-500"></div>
                        <div class="w-3 h-3 rounded-full bg-yellow-500"></div>
                        <div class="w-3 h-3 rounded-full bg-green-500"></div>
                    </div>
                    <span class="ml-4 text-gray-400 text-sm">UserController.php</span>
                </div>
                <div class="flex">
                    <div class="py-4 px-2 text-right bg-gray-800 text-gray-500 select-none" aria-hidden="true" style="min-width: 2.5rem;">
                        <div>1</div>
                        <div>2</div>
                        <div>3</div>
                        <div>4</div>
                        <div>5</div>
                        <div>6</div>
                        <div>7</div>
                        <div>8</div>
                    </div>
                    <pre class="language-php flex-grow p-4 text-gray-300 overflow-x-auto" style="background-color: #2b2b2b;">
<code><span style="color: #bbb529;">$user</span> = <span style="color: #cc7832;">new</span> User();
<span style="color: #bbb529;">$user</span>->fill([
    <span style="color: #6a8759;">'name'</span> => <span style="color: #6a8759;">'Jane Doe'</span>,
    <span style="color: #6a8759;">'email'</span> => <span style="color: #6a8759;">'jane@example.com'</span>,
    <span style="color: #6a8759;">'password'</span> => <span style="color: #6a8759;">'secret'</span>
]);

<span style="color: #bbb529;">$result</span> = <span style="color: #bbb529;">$user</span>->save();
<span style="color: #cc7832;">echo</span> <span style="color: #6a8759;">"User save result: "</span> . (<span style="color: #bbb529;">$result</span> ? <span style="color: #6a8759;">"true"</span> : <span style="color: #6a8759;">"false"</span>);</code></pre>
                </div>
            </div>
            <h2 class="text-2xl font-semibold mb-3">Accessors and Mutators</h2>
            <p class="mb-4">
                You can define accessors and mutators to format attribute values when retrieving or setting them:
            </p>
            <div class="bg-gray-900 rounded-lg shadow-lg overflow-hidden mb-4">
                <div class="flex items-center bg-gray-800 px-4 py-2 border-b border-gray-700">
                    <div class="flex space-x-2">
                        <div class="w-3 h-3 rounded-full bg-red-500"></div>
                        <div class="w-3 h-3 rounded-full bg-yellow-500"></div>
                        <div class="w-3 h-3 rounded-full bg-green-500"></div>
                    </div>
                    <span class="ml-4 text-gray-400 text-sm">User.php</span>
                </div>
                <div class="flex">
                    <div class="py-4 px-2 text-right bg-gray-800 text-gray-500 select-none" aria-hidden="true" style="min-width: 2.5rem;">
                        <div>1</div>
                        <div>2</div>
                        <div>3</div>
                        <div>4</div>
                        <div>5</div>
                        <div>6</div>
                        <div>7</div>
                        <div>8</div>
                        <div>9</div>
                        <div>10</div>
                        <div>11</div>
                        <div>12</div>
                    </div>
                    <pre class="language-php flex-grow p-4 text-gray-300 overflow-x-auto" style="background-color: #2b2b2b;">
<code><span style="color: #cc7832;">class</span> <span style="color: #ffc66d;">User</span> <span style="color: #cc7832;">extends</span> Model
{
    <span style="color: #cc7832;">public function</span> <span style="color: #ffc66d;">getName</span>(): string
    {
        <span style="color: #cc7832;">return</span> ucfirst(<span style="color: #bbb529;">$this</span>->attributes[<span style="color: #6a8759;">'name'</span>]);
    }

    <span style="color: #cc7832;">public function</span> <span style="color: #ffc66d;">setPassword</span>(<span style="color: #bbb529;">$value</span>): <span style="color: #cc7832;">void</span>
    {
        <span style="color: #bbb529;">$this</span>->attributes[<span style="color: #6a8759;">'password'</span>] = password_hash(<span style="color: #bbb529;">$value</span>, PASSWORD_DEFAULT);
    }
}</code></pre>
                </div>
            </div>
            <p class="mt-4">
                These features of Yabasi's ORM allow you to work with your database in an object-oriented manner, making your code more readable and maintainable. The relationships feature, in particular, helps you to efficiently work with related data across multiple tables.
            </p>
        </section>

        <section id="database" class="mb-12">
            <h1 class="text-4xl font-bold mb-6">Database</h1>

            <p class="mb-4">
                Yabasi provides a robust and flexible database layer, supporting various database systems and offering an intuitive API for database operations.
            </p>

            <h2 class="text-2xl font-semibold mb-3">Configuration</h2>
            <p class="mb-4">
                Database configuration is typically stored in the <code>config/config.php</code> file:
            </p>

            <div class="bg-gray-900 rounded-lg shadow-lg overflow-hidden mb-4">
                <div class="flex items-center bg-gray-800 px-4 py-2 border-b border-gray-700">
                    <div class="flex space-x-2">
                        <div class="w-3 h-3 rounded-full bg-red-500"></div>
                        <div class="w-3 h-3 rounded-full bg-yellow-500"></div>
                        <div class="w-3 h-3 rounded-full bg-green-500"></div>
                    </div>
                    <span class="ml-4 text-gray-400 text-sm">config/config.php</span>
                </div>
                <div class="flex">
                    <div class="py-4 px-2 text-right bg-gray-800 text-gray-500 select-none" aria-hidden="true" style="min-width: 2.5rem;">
                        <div>1</div>
                        <div>2</div>
                        <div>3</div>
                        <div>4</div>
                        <div>5</div>
                        <div>6</div>
                        <div>7</div>
                        <div>8</div>
                    </div>
                    <pre class="language-php flex-grow p-4 text-gray-300 overflow-x-auto" style="background-color: #2b2b2b;">
<code><span style="color: #cc7832;">return</span> [
    <span style="color: #6a8759;">'database'</span> => [
        <span style="color: #6a8759;">'driver'</span>   => <span style="color: #6a8759;">'mysql'</span>,
        <span style="color: #6a8759;">'host'</span>     => <span style="color: #6a8759;">'localhost'</span>,
        <span style="color: #6a8759;">'database'</span> => <span style="color: #6a8759;">'yabasi_db'</span>,
        <span style="color: #6a8759;">'username'</span> => <span style="color: #6a8759;">'root'</span>,
        <span style="color: #6a8759;">'password'</span> => <span style="color: #6a8759;">''</span>,
    ],
];</code></pre>
                </div>
            </div>

            <h2 class="text-2xl font-semibold mb-3">Query Builder</h2>
            <p class="mb-4">
                Yabasi's query builder provides a convenient, fluent interface for creating and running database queries:
            </p>

            <div class="bg-gray-900 rounded-lg shadow-lg overflow-hidden mb-4">
                <div class="flex items-center bg-gray-800 px-4 py-2 border-b border-gray-700">
                    <div class="flex space-x-2">
                        <div class="w-3 h-3 rounded-full bg-red-500"></div>
                        <div class="w-3 h-3 rounded-full bg-yellow-500"></div>
                        <div class="w-3 h-3 rounded-full bg-green-500"></div>
                    </div>
                    <span class="ml-4 text-gray-400 text-sm">UserController.php</span>
                </div>
                <div class="flex">
                    <div class="py-4 px-2 text-right bg-gray-800 text-gray-500 select-none" aria-hidden="true" style="min-width: 2.5rem;">
                        <div>1</div>
                        <div>2</div>
                        <div>3</div>
                        <div>4</div>
                        <div>5</div>
                        <div>6</div>
                    </div>
                    <pre class="language-php flex-grow p-4 text-gray-300 overflow-x-auto" style="background-color: #2b2b2b;">
<code><span style="color: #bbb529;">$users</span> = User::query()
    ->where(<span style="color: #6a8759;">'active'</span>, <span style="color: #cc7832;">true</span>)
    ->where(<span style="color: #6a8759;">'age'</span>, <span style="color: #6a8759;">'>'</span>, <span style="color: #6897bb;">18</span>)
    ->orderBy(<span style="color: #6a8759;">'name'</span>, <span style="color: #6a8759;">'asc'</span>)
    ->limit(<span style="color: #6897bb;">10</span>)
    ->get();</code></pre>
                </div>
            </div>

            <h2 class="text-2xl font-semibold mb-3">Raw Queries</h2>
            <p class="mb-4">
                For more complex queries, you can use raw SQL:
            </p>

            <div class="bg-gray-900 rounded-lg shadow-lg overflow-hidden mb-4">
                <div class="flex items-center bg-gray-800 px-4 py-2 border-b border-gray-700">
                    <div class="flex space-x-2">
                        <div class="w-3 h-3 rounded-full bg-red-500"></div>
                        <div class="w-3 h-3 rounded-full bg-yellow-500"></div>
                        <div class="w-3 h-3 rounded-full bg-green-500"></div>
                    </div>
                    <span class="ml-4 text-gray-400 text-sm">UserController.php</span>
                </div>
                <div class="flex">
                    <div class="py-4 px-2 text-right bg-gray-800 text-gray-500 select-none" aria-hidden="true" style="min-width: 2.5rem;">
                        <div>1</div>
                        <div>2</div>
                        <div>3</div>
                    </div>
                    <pre class="language-php flex-grow p-4 text-gray-300 overflow-x-auto" style="background-color: #2b2b2b;">
<code><span style="color: #bbb529;">$results</span> = DB::select(<span style="color: #6a8759;">'SELECT * FROM users WHERE active = ?'</span>, [<span style="color: #cc7832;">true</span>]);

<span style="color: #bbb529;">$affected</span> = DB::update(<span style="color: #6a8759;">'UPDATE users SET status = ? WHERE id = ?'</span>, [<span style="color: #6a8759;">'active'</span>, <span style="color: #6897bb;">1</span>]);</code></pre>
                </div>
            </div>

            <h2 class="text-2xl font-semibold mb-3">Transactions</h2>
            <p class="mb-4">
                Yabasi supports database transactions to ensure data integrity:
            </p>

            <div class="bg-gray-900 rounded-lg shadow-lg overflow-hidden mb-4">
                <div class="flex items-center bg-gray-800 px-4 py-2 border-b border-gray-700">
                    <div class="flex space-x-2">
                        <div class="w-3 h-3 rounded-full bg-red-500"></div>
                        <div class="w-3 h-3 rounded-full bg-yellow-500"></div>
                        <div class="w-3 h-3 rounded-full bg-green-500"></div>
                    </div>
                    <span class="ml-4 text-gray-400 text-sm">TransferController.php</span>
                </div>
                <div class="flex">
                    <div class="py-4 px-2 text-right bg-gray-800 text-gray-500 select-none" aria-hidden="true" style="min-width: 2.5rem;">
                        <div>1</div>
                        <div>2</div>
                        <div>3</div>
                        <div>4</div>
                        <div>5</div>
                        <div>6</div>
                        <div>7</div>
                        <div>8</div>
                        <div>9</div>
                        <div>10</div>
                    </div>
                    <pre class="language-php flex-grow p-4 text-gray-300 overflow-x-auto" style="background-color: #2b2b2b;">
<code>DB::beginTransaction();

<span style="color: #cc7832;">try</span> {
    DB::update(<span style="color: #6a8759;">'UPDATE accounts SET balance = balance - ? WHERE id = ?'</span>, [<span style="color: #6897bb;">100</span>, <span style="color: #6897bb;">1</span>]);
    DB::update(<span style="color: #6a8759;">'UPDATE accounts SET balance = balance + ? WHERE id = ?'</span>, [<span style="color: #6897bb;">100</span>, <span style="color: #6897bb;">2</span>]);
    DB::commit();
} <span style="color: #cc7832;">catch</span> (\Exception <span style="color: #bbb529;">$e</span>) {
    DB::rollBack();
    <span style="color: #cc7832;">throw</span> <span style="color: #bbb529;">$e</span>;
}</code></pre>
                </div>
            </div>

            <h2 class="text-2xl font-semibold mb-3">Migrations</h2>
            <p class="mb-4">
                Yabasi provides a powerful migration system for managing database schema:
            </p>

            <div class="bg-gray-900 rounded-lg shadow-lg overflow-hidden mb-4">
                <div class="flex items-center bg-gray-800 px-4 py-2 border-b border-gray-700">
                    <div class="flex space-x-2">
                        <div class="w-3 h-3 rounded-full bg-red-500"></div>
                        <div class="w-3 h-3 rounded-full bg-yellow-500"></div>
                        <div class="w-3 h-3 rounded-full bg-green-500"></div>
                    </div>
                    <span class="ml-4 text-gray-400 text-sm">2024_10_20_create_users_table.php</span>
                </div>
                <div class="flex">
                    <div class="py-4 px-2 text-right bg-gray-800 text-gray-500 select-none" aria-hidden="true" style="min-width: 2.5rem;">
                        <div>1</div>
                        <div>2</div>
                        <div>3</div>
                        <div>4</div>
                        <div>5</div>
                        <div>6</div>
                        <div>7</div>
                        <div>8</div>
                        <div>9</div>
                        <div>10</div>
                        <div>11</div>
                        <div>12</div>
                    </div>
                    <pre class="language-php flex-grow p-4 text-gray-300 overflow-x-auto" style="background-color: #2b2b2b;">
<code><span style="color: #cc7832;">use</span> Yabasi\Database\Schema\Blueprint;
<span style="color: #cc7832;">use</span> Yabasi\Database\Migrations\Migration;

<span style="color: #cc7832;">class</span> <span style="color: #ffc66d;">CreateUsersTable</span> <span style="color: #cc7832;">extends</span> Migration
{
    <span style="color: #cc7832;">public function</span> <span style="color: #ffc66d;">up</span>()
    {
        Schema::create(<span style="color: #6a8759;">'users'</span>, <span style="color: #cc7832;">function</span> (Blueprint <span style="color: #bbb529;">$table</span>) {
            <span style="color: #bbb529;">$table</span>->id();
            <span style="color: #bbb529;">$table</span>->string(<span style="color: #6a8759;">'name'</span>);
            <span style="color: #bbb529;">$table</span>->string(<span style="color: #6a8759;">'email'</span>)->unique();
            <span style="color: #bbb529;">$table</span>->timestamps();
        });
    }
}</code></pre>
                </div>
            </div>

            <p class="mt-4">
                These features provide a solid foundation for working with databases in your Yabasi applications. The query builder and ORM work together to offer a powerful yet intuitive interface for database operations, while migrations ensure that your database schema can be easily version-controlled and shared across different environments.
            </p>
        </section>

        <section id="forms-validation" class="mb-12">
            <h1 class="text-4xl font-bold mb-6">Forms & Validation</h1>

            <p class="mb-4">
                Yabasi framework provides a powerful and flexible system for handling forms and validating data. This system allows you to process and validate user inputs securely and efficiently.
            </p>

            <h2 class="text-2xl font-semibold mb-3">Creating Forms</h2>
            <p class="mb-4">
                In Yabasi, forms are typically created within Twig templates. Here's an example of a simple form:
            </p>

            <div class="bg-gray-900 rounded-lg shadow-lg overflow-hidden mb-4">
                <div class="flex items-center bg-gray-800 px-4 py-2 border-b border-gray-700">
                    <div class="flex space-x-2">
                        <div class="w-3 h-3 rounded-full bg-red-500"></div>
                        <div class="w-3 h-3 rounded-full bg-yellow-500"></div>
                        <div class="w-3 h-3 rounded-full bg-green-500"></div>
                    </div>
                    <span class="ml-4 text-gray-400 text-sm">form.twig</span>
                </div>
                <div class="flex">
                    <div class="py-4 px-2 text-right bg-gray-800 text-gray-500 select-none" aria-hidden="true" style="min-width: 2.5rem;">
                        <div>1</div>
                        <div>2</div>
                        <div>3</div>
                        <div>4</div>
                        <div>5</div>
                        <div>6</div>
                        <div>7</div>
                        <div>8</div>
                    </div>
                    <pre class="language-twig flex-grow p-4 text-gray-300 overflow-x-auto" style="background-color: #2b2b2b;">
<code>&lt;form method="POST" action="&#123;&#123; url('user.store') &#125;&#125;"&gt;
    &#123;&#123; csrf_field() &#125;&#125;
    &lt;div&gt;
        &lt;label for="name"&gt;Name:&lt;/label&gt;
        &lt;input type="text" id="name" name="name" value="&#123;&#123; old('name') &#125;&#125;"&gt;
    &lt;/div&gt;
    &lt;button type="submit"&gt;Submit&lt;/button&gt;
&lt;/form&gt;</code></pre>
                </div>
            </div>

            <h2 class="text-2xl font-semibold mb-3">Handling Form Submissions</h2>
            <p class="mb-4">
                Form submissions are typically handled in controller methods. Here's an example of how to handle a form submission:
            </p>

            <div class="bg-gray-900 rounded-lg shadow-lg overflow-hidden mb-4">
                <div class="flex items-center bg-gray-800 px-4 py-2 border-b border-gray-700">
                    <div class="flex space-x-2">
                        <div class="w-3 h-3 rounded-full bg-red-500"></div>
                        <div class="w-3 h-3 rounded-full bg-yellow-500"></div>
                        <div class="w-3 h-3 rounded-full bg-green-500"></div>
                    </div>
                    <span class="ml-4 text-gray-400 text-sm">UserController.php</span>
                </div>
                <div class="flex">
                    <div class="py-4 px-2 text-right bg-gray-800 text-gray-500 select-none" aria-hidden="true" style="min-width: 2.5rem;">
                        <div>1</div>
                        <div>2</div>
                        <div>3</div>
                        <div>4</div>
                        <div>5</div>
                        <div>6</div>
                        <div>7</div>
                        <div>8</div>
                        <div>9</div>
                    </div>
                    <pre class="language-php flex-grow p-4 text-gray-300 overflow-x-auto" style="background-color: #2b2b2b;">
<code><span style="color: #cc7832;">public function</span> <span style="color: #ffc66d;">store</span>(Request <span style="color: #bbb529;">$request</span>)
{
    <span style="color: #bbb529;">$validated</span> = <span style="color: #bbb529;">$request</span>->validate([
        <span style="color: #6a8759;">'name'</span> => <span style="color: #6a8759;">'required|string|max:255'</span>,
    ]);

    <span style="color: #808080;">// Process the validated data</span>
    User::create(<span style="color: #bbb529;">$validated</span>);
}</code></pre>
                </div>
            </div>

            <h2 class="text-2xl font-semibold mb-3">Validation</h2>
            <p class="mb-4">
                Yabasi provides a powerful validation system. You can define validation rules for your form data in various ways:
            </p>

            <h3 class="text-xl font-semibold mb-2">Using the Validator Class</h3>
            <div class="bg-gray-900 rounded-lg shadow-lg overflow-hidden mb-4">
                <div class="flex items-center bg-gray-800 px-4 py-2 border-b border-gray-700">
                    <div class="flex space-x-2">
                        <div class="w-3 h-3 rounded-full bg-red-500"></div>
                        <div class="w-3 h-3 rounded-full bg-yellow-500"></div>
                        <div class="w-3 h-3 rounded-full bg-green-500"></div>
                    </div>
                    <span class="ml-4 text-gray-400 text-sm">UserController.php</span>
                </div>
                <div class="flex">
                    <div class="py-4 px-2 text-right bg-gray-800 text-gray-500 select-none" aria-hidden="true" style="min-width: 2.5rem;">
                        <div>1</div>
                        <div>2</div>
                        <div>3</div>
                        <div>4</div>
                        <div>5</div>
                        <div>6</div>
                        <div>7</div>
                        <div>8</div>
                        <div>9</div>
                        <div>10</div>
                        <div>11</div>
                        <div>12</div>
                        <div>13</div>
                    </div>
                    <pre class="language-php flex-grow p-4 text-gray-300 overflow-x-auto" style="background-color: #2b2b2b;">
<code><span style="color: #cc7832;">use</span> Yabasi\Validation\Validator;

<span style="color: #cc7832;">public function</span> <span style="color: #ffc66d;">store</span>(Request <span style="color: #bbb529;">$request</span>, Validator <span style="color: #bbb529;">$validator</span>)
{
    <span style="color: #bbb529;">$rules</span> = [
        <span style="color: #6a8759;">'name'</span> => <span style="color: #6a8759;">'required|string|max:255'</span>,
        <span style="color: #6a8759;">'email'</span> => <span style="color: #6a8759;">'required|email|unique:users'</span>,
    ];

    <span style="color: #cc7832;">if</span> (!<span style="color: #bbb529;">$validator</span>->make(<span style="color: #bbb529;">$request</span>->all(), <span style="color: #bbb529;">$rules</span>)) {
        <span style="color: #cc7832;">return</span> redirect()->back()->withErrors(<span style="color: #bbb529;">$validator</span>)->withInput();
    }

    <span style="color: #808080;">// Process validated data</span>
}</code></pre>
                </div>
            </div>

            <h3 class="text-xl font-semibold mb-2">Form Request Validation</h3>
            <p class="mb-4">
                For more complex validation scenarios, you can create dedicated Form Request classes:
            </p>

            <div class="bg-gray-900 rounded-lg shadow-lg overflow-hidden mb-4">
                <div class="flex items-center bg-gray-800 px-4 py-2 border-b border-gray-700">
                    <div class="flex space-x-2">
                        <div class="w-3 h-3 rounded-full bg-red-500"></div>
                        <div class="w-3 h-3 rounded-full bg-yellow-500"></div>
                        <div class="w-3 h-3 rounded-full bg-green-500"></div>
                    </div>
                    <span class="ml-4 text-gray-400 text-sm">StoreUserRequest.php</span>
                </div>
                <div class="flex">
                    <div class="py-4 px-2 text-right bg-gray-800 text-gray-500 select-none" aria-hidden="true" style="min-width: 2.5rem;">
                        <div>1</div>
                        <div>2</div>
                        <div>3</div>
                        <div>4</div>
                        <div>5</div>
                        <div>6</div>
                        <div>7</div>
                        <div>8</div>
                        <div>9</div>
                        <div>10</div>
                        <div>11</div>
                        <div>12</div>
                    </div>
                    <pre class="language-php flex-grow p-4 text-gray-300 overflow-x-auto" style="background-color: #2b2b2b;">
<code><span style="color: #cc7832;">use</span> Yabasi\Http\FormRequest;

<span style="color: #cc7832;">class</span> <span style="color: #ffc66d;">StoreUserRequest</span> <span style="color: #cc7832;">extends</span> FormRequest
{
    <span style="color: #cc7832;">public function</span> <span style="color: #ffc66d;">rules</span>(): array
    {
        <span style="color: #cc7832;">return</span> [
            <span style="color: #6a8759;">'name'</span> => <span style="color: #6a8759;">'required|string|max:255'</span>,
            <span style="color: #6a8759;">'email'</span> => <span style="color: #6a8759;">'required|email|unique:users'</span>,
        ];
    }
}</code></pre>
                </div>
            </div>

            <p class="mb-4">
                Then, you can use this Form Request in your controller:
            </p>

            <div class="bg-gray-900 rounded-lg shadow-lg overflow-hidden mb-4">
                <div class="flex items-center bg-gray-800 px-4 py-2 border-b border-gray-700">
                    <div class="flex space-x-2">
                        <div class="w-3 h-3 rounded-full bg-red-500"></div>
                        <div class="w-3 h-3 rounded-full bg-yellow-500"></div>
                        <div class="w-3 h-3 rounded-full bg-green-500"></div>
                    </div>
                    <span class="ml-4 text-gray-400 text-sm">UserController.php</span>
                </div>
                <div class="flex">
                    <div class="py-4 px-2 text-right bg-gray-800 text-gray-500 select-none" aria-hidden="true" style="min-width: 2.5rem;">
                        <div>1</div>
                        <div>2</div>
                        <div>3</div>
                        <div>4</div>
                    </div>
                    <pre class="language-php flex-grow p-4 text-gray-300 overflow-x-auto" style="background-color: #2b2b2b;">
<code><span style="color: #cc7832;">public function</span> <span style="color: #ffc66d;">store</span>(StoreUserRequest <span style="color: #bbb529;">$request</span>)
{
    User::create(<span style="color: #bbb529;">$request</span>->validated());
}</code></pre>
                </div>
            </div>

            <h2 class="text-2xl font-semibold mb-3">Displaying Validation Errors</h2>
            <p class="mb-4">
                Validation errors can be displayed in your Twig templates:
            </p>

            <div class="bg-gray-900 rounded-lg shadow-lg overflow-hidden mb-4">
                <div class="flex items-center bg-gray-800 px-4 py-2 border-b border-gray-700">
                    <div class="flex space-x-2">
                        <div class="w-3 h-3 rounded-full bg-red-500"></div>
                        <div class="w-3 h-3 rounded-full bg-yellow-500"></div>
                        <div class="w-3 h-3 rounded-full bg-green-500"></div>
                    </div>
                    <span class="ml-4 text-gray-400 text-sm">form.twig</span>
                </div>
                <div class="flex">
                    <div class="py-4 px-2 text-right bg-gray-800 text-gray-500 select-none" aria-hidden="true" style="min-width: 2.5rem;">
                        <div>1</div>
                        <div>2</div>
                        <div>3</div>
                        <div>4</div>
                        <div>5</div>
                    </div>
                    <pre class="language-twig flex-grow p-4 text-gray-300 overflow-x-auto" style="background-color: #2b2b2b;">
<code>&#123;% if errors.has('name') %&#125;
    &lt;div class="error"&gt;
        &#123;&#123; errors.first('name') &#125;&#125;
    &lt;/div&gt;
&#123;% endif %&#125;</code></pre>
                </div>
            </div>

            <p class="mt-4">
                Yabasi's form and validation system provides a robust way to handle user input, ensuring data integrity and improving the overall security of your application.
            </p>
        </section>

        <section id="authentication" class="mb-12">
            <h1 class="text-4xl font-bold mb-6">Authentication</h1>

            <p class="mb-4">
                Yabasi framework provides a robust and flexible authentication system. It allows you to easily implement user authentication in your applications.
            </p>

            <h2 class="text-2xl font-semibold mb-3">Configuration</h2>
            <p class="mb-4">
                Authentication configuration is typically stored in the <code>config/config.php</code> file:
            </p>

            <div class="bg-gray-900 rounded-lg shadow-lg overflow-hidden mb-4">
                <div class="flex items-center bg-gray-800 px-4 py-2 border-b border-gray-700">
                    <div class="flex space-x-2">
                        <div class="w-3 h-3 rounded-full bg-red-500"></div>
                        <div class="w-3 h-3 rounded-full bg-yellow-500"></div>
                        <div class="w-3 h-3 rounded-full bg-green-500"></div>
                    </div>
                    <span class="ml-4 text-gray-400 text-sm">config/config.php</span>
                </div>
                <div class="flex">
                    <div class="py-4 px-2 text-right bg-gray-800 text-gray-500 select-none" aria-hidden="true" style="min-width: 2.5rem;">
                        <div>1</div>
                        <div>2</div>
                        <div>3</div>
                        <div>4</div>
                        <div>5</div>
                        <div>6</div>
                        <div>7</div>
                    </div>
                    <pre class="language-php flex-grow p-4 text-gray-300 overflow-x-auto" style="background-color: #2b2b2b;">
<code><span style="color: #cc7832;">return</span> [
    <span style="color: #6a8759;">'auth'</span> => [
        <span style="color: #6a8759;">'model'</span> => Yabasi\Models\User::class,
        <span style="color: #6a8759;">'table'</span> => <span style="color: #6a8759;">'users'</span>,
        <span style="color: #6a8759;">'username'</span> => <span style="color: #6a8759;">'email'</span>,
        <span style="color: #6a8759;">'password'</span> => <span style="color: #6a8759;">'password'</span>,
    ],
];</code></pre>
                </div>
            </div>

            <h2 class="text-2xl font-semibold mb-3">User Registration</h2>
            <p class="mb-4">
                Here's an example of how to implement user registration:
            </p>

            <div class="bg-gray-900 rounded-lg shadow-lg overflow-hidden mb-4">
                <div class="flex items-center bg-gray-800 px-4 py-2 border-b border-gray-700">
                    <div class="flex space-x-2">
                        <div class="w-3 h-3 rounded-full bg-red-500"></div>
                        <div class="w-3 h-3 rounded-full bg-yellow-500"></div>
                        <div class="w-3 h-3 rounded-full bg-green-500"></div>
                    </div>
                    <span class="ml-4 text-gray-400 text-sm">AuthController.php</span>
                </div>
                <div class="flex">
                    <div class="py-4 px-2 text-right bg-gray-800 text-gray-500 select-none" aria-hidden="true" style="min-width: 2.5rem;">
                        <div>1</div>
                        <div>2</div>
                        <div>3</div>
                        <div>4</div>
                        <div>5</div>
                        <div>6</div>
                        <div>7</div>
                        <div>8</div>
                        <div>9</div>
                        <div>10</div>
                        <div>11</div>
                        <div>12</div>
                        <div>13</div>
                    </div>
                    <pre class="language-php flex-grow p-4 text-gray-300 overflow-x-auto" style="background-color: #2b2b2b;">
<code><span style="color: #cc7832;">public function</span> <span style="color: #ffc66d;">register</span>(Request <span style="color: #bbb529;">$request</span>)
{
    <span style="color: #bbb529;">$validated</span> = <span style="color: #bbb529;">$request</span>->validate([
        <span style="color: #6a8759;">'name'</span> => <span style="color: #6a8759;">'required|string|max:255'</span>,
        <span style="color: #6a8759;">'email'</span> => <span style="color: #6a8759;">'required|string|email|max:255|unique:users'</span>,
        <span style="color: #6a8759;">'password'</span> => <span style="color: #6a8759;">'required|string|min:8|confirmed'</span>,
    ]);

    <span style="color: #bbb529;">$user</span> = User::create(<span style="color: #bbb529;">$validated</span>);
    Auth::login(<span style="color: #bbb529;">$user</span>);

    <span style="color: #cc7832;">return</span> redirect()->intended(<span style="color: #6a8759;">'/dashboard'</span>);
}</code></pre>
                </div>
            </div>

            <h2 class="text-2xl font-semibold mb-3">User Login</h2>
            <p class="mb-4">
                Here's an example of how to implement user login:
            </p>

            <div class="bg-gray-900 rounded-lg shadow-lg overflow-hidden mb-4">
                <div class="flex items-center bg-gray-800 px-4 py-2 border-b border-gray-700">
                    <div class="flex space-x-2">
                        <div class="w-3 h-3 rounded-full bg-red-500"></div>
                        <div class="w-3 h-3 rounded-full bg-yellow-500"></div>
                        <div class="w-3 h-3 rounded-full bg-green-500"></div>
                    </div>
                    <span class="ml-4 text-gray-400 text-sm">AuthController.php</span>
                </div>
                <div class="flex">
                    <div class="py-4 px-2 text-right bg-gray-800 text-gray-500 select-none" aria-hidden="true" style="min-width: 2.5rem;">
                        <div>1</div>
                        <div>2</div>
                        <div>3</div>
                        <div>4</div>
                        <div>5</div>
                        <div>6</div>
                        <div>7</div>
                        <div>8</div>
                        <div>9</div>
                        <div>10</div>
                        <div>11</div>
                        <div>12</div>
                        <div>13</div>
                        <div>14</div>
                    </div>
                    <pre class="language-php flex-grow p-4 text-gray-300 overflow-x-auto" style="background-color: #2b2b2b;">
<code><span style="color: #cc7832;">public function</span> <span style="color: #ffc66d;">login</span>(Request <span style="color: #bbb529;">$request</span>)
{
    <span style="color: #bbb529;">$credentials</span> = <span style="color: #bbb529;">$request</span>->validate([
        <span style="color: #6a8759;">'email'</span> => <span style="color: #6a8759;">'required|email'</span>,
        <span style="color: #6a8759;">'password'</span> => <span style="color: #6a8759;">'required'</span>,
    ]);

    <span style="color: #cc7832;">if</span> (Auth::attempt(<span style="color: #bbb529;">$credentials</span>)) {
        <span style="color: #bbb529;">$request</span>->session()->regenerate();
        <span style="color: #cc7832;">return</span> redirect()->intended(<span style="color: #6a8759;">'/dashboard'</span>);
    }

    <span style="color: #cc7832;">return</span> back()->withErrors([<span style="color: #6a8759;">'email'</span> => <span style="color: #6a8759;">'The provided credentials do not match our records.'</span>]);
}</code></pre>
                </div>
            </div>

            <h2 class="text-2xl font-semibold mb-3">Middleware</h2>
            <p class="mb-4">
                Yabasi provides middleware to protect routes that require authentication:
            </p>

            <div class="bg-gray-900 rounded-lg shadow-lg overflow-hidden mb-4">
                <div class="flex items-center bg-gray-800 px-4 py-2 border-b border-gray-700">
                    <div class="flex space-x-2">
                        <div class="w-3 h-3 rounded-full bg-red-500"></div>
                        <div class="w-3 h-3 rounded-full bg-yellow-500"></div>
                        <div class="w-3 h-3 rounded-full bg-green-500"></div>
                    </div>
                    <span class="ml-4 text-gray-400 text-sm">routes/web.php</span>
                </div>
                <div class="flex">
                    <div class="py-4 px-2 text-right bg-gray-800 text-gray-500 select-none" aria-hidden="true" style="min-width: 2.5rem;">
                        <div>1</div>
                        <div>2</div>
                        <div>3</div>
                        <div>4</div>
                        <div>5</div>
                    </div>
                    <pre class="language-php flex-grow p-4 text-gray-300 overflow-x-auto" style="background-color: #2b2b2b;">
<code><span style="color: #bbb529;">$router</span>->group([<span style="color: #6a8759;">'middleware'</span> => [<span style="color: #6a8759;">'auth'</span>]], <span style="color: #cc7832;">function</span> (<span style="color: #bbb529;">$router</span>) {
    <span style="color: #bbb529;">$router</span>->get(<span style="color: #6a8759;">'/dashboard'</span>, <span style="color: #6a8759;">'DashboardController@index'</span>);
    <span style="color: #bbb529;">$router</span>->get(<span style="color: #6a8759;">'/profile'</span>, <span style="color: #6a8759;">'ProfileController@show'</span>);
    <span style="color: #808080;">// Add more protected routes here</span>
});</code></pre>
                </div>
            </div>

            <p class="mt-4">
                Yabasi's authentication system provides a secure and flexible way to manage user authentication in your application. It integrates seamlessly with the framework's other features like middleware and session management.
            </p>
        </section>

        <section id="caching" class="mb-12">
            <h1 class="text-4xl font-bold mb-6">Caching</h1>

            <p class="mb-4">
                Yabasi framework provides a powerful and flexible caching system to improve your application's performance. The caching system supports multiple cache drivers and offers a clean, unified API.
            </p>

            <h2 class="text-2xl font-semibold mb-3">Configuration</h2>
            <p class="mb-4">
                Caching configuration is typically stored in the <code>config/config.php</code> file:
            </p>

            <div class="bg-gray-900 rounded-lg shadow-lg overflow-hidden mb-4">
                <div class="flex items-center bg-gray-800 px-4 py-2 border-b border-gray-700">
                    <div class="flex space-x-2">
                        <div class="w-3 h-3 rounded-full bg-red-500"></div>
                        <div class="w-3 h-3 rounded-full bg-yellow-500"></div>
                        <div class="w-3 h-3 rounded-full bg-green-500"></div>
                    </div>
                    <span class="ml-4 text-gray-400 text-sm">config/config.php</span>
                </div>
                <div class="flex">
                    <div class="py-4 px-2 text-right bg-gray-800 text-gray-500 select-none" aria-hidden="true" style="min-width: 2.5rem;">
                        <div>1</div>
                        <div>2</div>
                        <div>3</div>
                        <div>4</div>
                        <div>5</div>
                        <div>6</div>
                        <div>7</div>
                        <div>8</div>
                        <div>9</div>
                        <div>10</div>
                        <div>11</div>
                        <div>12</div>
                        <div>13</div>
                        <div>14</div>
                        <div>15</div>
                        <div>16</div>
                    </div>
                    <pre class="language-php flex-grow p-4 text-gray-300 overflow-x-auto" style="background-color: #2b2b2b;">
<code><span style="color: #cc7832;">return</span> [
    <span style="color: #6a8759;">'cache'</span> => [
        <span style="color: #6a8759;">'default'</span> => <span style="color: #6a8759;">'file'</span>,  <span style="color: #808080;">// Primary cache store</span>
        <span style="color: #6a8759;">'path'</span>    => BASE_PATH . <span style="color: #6a8759;">'/storage/cache'</span>,
        <span style="color: #6a8759;">'stores'</span>  => [
            <span style="color: #6a8759;">'file'</span>  => [
                <span style="color: #6a8759;">'driver'</span> => <span style="color: #6a8759;">'file'</span>,
                <span style="color: #6a8759;">'path'</span>   => BASE_PATH . <span style="color: #6a8759;">'/storage/cache/data'</span>,
            ],
            <span style="color: #6a8759;">'redis'</span> => [
                <span style="color: #6a8759;">'driver'</span>     => <span style="color: #6a8759;">'redis'</span>,
                <span style="color: #6a8759;">'connection'</span> => <span style="color: #6a8759;">'default'</span>,
            ],
        ],
    ],
];</code></pre>
                </div>
            </div>

            <h2 class="text-2xl font-semibold mb-3">Basic Usage</h2>
            <p class="mb-4">
                Here are some basic operations you can perform with the Yabasi caching system:
            </p>

            <h3 class="text-xl font-semibold mb-2">Setting and Getting Cache Values</h3>
            <div class="bg-gray-900 rounded-lg shadow-lg overflow-hidden mb-4">
                <div class="flex items-center bg-gray-800 px-4 py-2 border-b border-gray-700">
                    <div class="flex space-x-2">
                        <div class="w-3 h-3 rounded-full bg-red-500"></div>
                        <div class="w-3 h-3 rounded-full bg-yellow-500"></div>
                        <div class="w-3 h-3 rounded-full bg-green-500"></div>
                    </div>
                    <span class="ml-4 text-gray-400 text-sm">CacheExample.php</span>
                </div>
                <div class="flex">
                    <div class="py-4 px-2 text-right bg-gray-800 text-gray-500 select-none" aria-hidden="true" style="min-width: 2.5rem;">
                        <div>1</div>
                        <div>2</div>
                        <div>3</div>
                        <div>4</div>
                        <div>5</div>
                    </div>
                    <pre class="language-php flex-grow p-4 text-gray-300 overflow-x-auto" style="background-color: #2b2b2b;">
<code><span style="color: #808080;">// Set a value in the cache for 1 hour</span>
Cache::set(<span style="color: #6a8759;">'user_count'</span>, <span style="color: #6897bb;">100</span>, <span style="color: #6897bb;">3600</span>);

<span style="color: #808080;">// Get a value from the cache</span>
<span style="color: #bbb529;">$userCount</span> = Cache::get(<span style="color: #6a8759;">'user_count'</span>, <span style="color: #6897bb;">0</span>);</code></pre>
                </div>
            </div>

            <h3 class="text-xl font-semibold mb-2">Checking for Existence and Removing Cache Items</h3>
            <div class="bg-gray-900 rounded-lg shadow-lg overflow-hidden mb-4">
                <div class="flex items-center bg-gray-800 px-4 py-2 border-b border-gray-700">
                    <div class="flex space-x-2">
                        <div class="w-3 h-3 rounded-full bg-red-500"></div>
                        <div class="w-3 h-3 rounded-full bg-yellow-500"></div>
                        <div class="w-3 h-3 rounded-full bg-green-500"></div>
                    </div>
                    <span class="ml-4 text-gray-400 text-sm">CacheExample.php</span>
                </div>
                <div class="flex">
                    <div class="py-4 px-2 text-right bg-gray-800 text-gray-500 select-none" aria-hidden="true" style="min-width: 2.5rem;">
                        <div>1</div>
                        <div>2</div>
                        <div>3</div>
                        <div>4</div>
                        <div>5</div>
                        <div>6</div>
                        <div>7</div>
                    </div>
                    <pre class="language-php flex-grow p-4 text-gray-300 overflow-x-auto" style="background-color: #2b2b2b;">
<code><span style="color: #808080;">// Check if a key exists in the cache</span>
<span style="color: #cc7832;">if</span> (Cache::has(<span style="color: #6a8759;">'user_count'</span>)) {
    <span style="color: #cc7832;">echo</span> <span style="color: #6a8759;">"User count is cached."</span>;
}

<span style="color: #808080;">// Remove an item from the cache</span>
Cache::delete(<span style="color: #6a8759;">'user_count'</span>);</code></pre>
                </div>
            </div>

            <h3 class="text-xl font-semibold mb-2">Incrementing and Decrementing Values</h3>
            <div class="bg-gray-900 rounded-lg shadow-lg overflow-hidden mb-4">
                <div class="flex items-center bg-gray-800 px-4 py-2 border-b border-gray-700">
                    <div class="flex space-x-2">
                        <div class="w-3 h-3 rounded-full bg-red-500"></div>
                        <div class="w-3 h-3 rounded-full bg-yellow-500"></div>
                        <div class="w-3 h-3 rounded-full bg-green-500"></div>
                    </div>
                    <span class="ml-4 text-gray-400 text-sm">CacheExample.php</span>
                </div>
                <div class="flex">
                    <div class="py-4 px-2 text-right bg-gray-800 text-gray-500 select-none" aria-hidden="true" style="min-width: 2.5rem;">
                        <div>1</div>
                        <div>2</div>
                        <div>3</div>
                        <div>4</div>
                        <div>5</div>
                    </div>
                    <pre class="language-php flex-grow p-4 text-gray-300 overflow-x-auto" style="background-color: #2b2b2b;">
<code><span style="color: #808080;">// Increment a value</span>
<span style="color: #bbb529;">$newCount</span> = Cache::increment(<span style="color: #6a8759;">'user_count'</span>, <span style="color: #6897bb;">5</span>);

<span style="color: #808080;">// Decrement a value</span>
<span style="color: #bbb529;">$decrementedCount</span> = Cache::decrement(<span style="color: #6a8759;">'user_count'</span>, <span style="color: #6897bb;">2</span>);</code></pre>
                </div>
            </div>

            <h3 class="text-xl font-semibold mb-2">Working with Multiple Cache Items</h3>
            <div class="bg-gray-900 rounded-lg shadow-lg overflow-hidden mb-4">
                <div class="flex items-center bg-gray-800 px-4 py-2 border-b border-gray-700">
                    <div class="flex space-x-2">
                        <div class="w-3 h-3 rounded-full bg-red-500"></div>
                        <div class="w-3 h-3 rounded-full bg-yellow-500"></div>
                        <div class="w-3 h-3 rounded-full bg-green-500"></div>
                    </div>
                    <span class="ml-4 text-gray-400 text-sm">CacheExample.php</span>
                </div>
                <div class="flex">
                    <div class="py-4 px-2 text-right bg-gray-800 text-gray-500 select-none" aria-hidden="true" style="min-width: 2.5rem;">
                        <div>1</div>
                        <div>2</div>
                        <div>3</div>
                        <div>4</div>
                        <div>5</div>
                        <div>6</div>
                        <div>7</div>
                        <div>8</div>
                        <div>9</div>
                        <div>10</div>
                        <div>11</div>
                    </div>
                    <pre class="language-php flex-grow p-4 text-gray-300 overflow-x-auto" style="background-color: #2b2b2b;">
<code><span style="color: #808080;">// Set multiple values</span>
Cache::setMany([
    <span style="color: #6a8759;">'total_posts'</span> => <span style="color: #6897bb;">1000</span>,
    <span style="color: #6a8759;">'total_comments'</span> => <span style="color: #6897bb;">5000</span>
], <span style="color: #6897bb;">1800</span>); <span style="color: #808080;">// Cache for 30 minutes</span>

<span style="color: #808080;">// Get multiple values</span>
<span style="color: #bbb529;">$stats</span> = Cache::many([<span style="color: #6a8759;">'total_posts'</span>, <span style="color: #6a8759;">'total_comments'</span>, <span style="color: #6a8759;">'nonexistent_key'</span>]);

<span style="color: #808080;">// Delete multiple values</span>
Cache::deleteMany([<span style="color: #6a8759;">'total_posts'</span>, <span style="color: #6a8759;">'total_comments'</span>]);</code></pre>
                </div>
            </div>

            <h2 class="text-2xl font-semibold mb-3">Advanced Usage</h2>

            <h3 class="text-xl font-semibold mb-2">Using Different Cache Stores</h3>
            <p class="mb-4">
                You can specify which cache store to use for a particular operation:
            </p>

            <div class="bg-gray-900 rounded-lg shadow-lg overflow-hidden mb-4">
                <div class="flex items-center bg-gray-800 px-4 py-2 border-b border-gray-700">
                    <div class="flex space-x-2">
                        <div class="w-3 h-3 rounded-full bg-red-500"></div>
                        <div class="w-3 h-3 rounded-full bg-yellow-500"></div>
                        <div class="w-3 h-3 rounded-full bg-green-500"></div>
                    </div>
                    <span class="ml-4 text-gray-400 text-sm">CacheExample.php</span>
                </div>
                <div class="flex">
                    <div class="py-4 px-2 text-right bg-gray-800 text-gray-500 select-none" aria-hidden="true" style="min-width: 2.5rem;">
                        <div>1</div>
                        <div>2</div>
                    </div>
                    <pre class="language-php flex-grow p-4 text-gray-300 overflow-x-auto" style="background-color: #2b2b2b;">
<code><span style="color: #bbb529;">$value</span> = Cache::store(<span style="color: #6a8759;">'redis'</span>)->get(<span style="color: #6a8759;">'key'</span>);
Cache::store(<span style="color: #6a8759;">'file'</span>)->put(<span style="color: #6a8759;">'key'</span>, <span style="color: #6a8759;">'value'</span>, <span style="color: #6897bb;">600</span>);</code></pre>
                </div>
            </div>

            <h3 class="text-xl font-semibold mb-2">Atomic Locks</h3>
            <p class="mb-4">
                Yabasi provides atomic locks to manage concurrent access to resources:
            </p>

            <div class="bg-gray-900 rounded-lg shadow-lg overflow-hidden mb-4">
                <div class="flex items-center bg-gray-800 px-4 py-2 border-b border-gray-700">
                    <div class="flex space-x-2">
                        <div class="w-3 h-3 rounded-full bg-red-500"></div>
                        <div class="w-3 h-3 rounded-full bg-yellow-500"></div>
                        <div class="w-3 h-3 rounded-full bg-green-500"></div>
                    </div>
                    <span class="ml-4 text-gray-400 text-sm">AtomicLockExample.php</span>
                </div>
                <div class="flex">
                    <div class="py-4 px-2 text-right bg-gray-800 text-gray-500 select-none" aria-hidden="true" style="min-width: 2.5rem;">
                        <div>1</div>
                        <div>2</div>
                        <div>3</div>
                        <div>4</div>
                        <div>5</div>
                        <div>6</div>
                        <div>7</div>
                        <div>8</div>
                        <div>9</div>
                        <div>10</div>
                    </div>
                    <pre class="language-php flex-grow p-4 text-gray-300 overflow-x-auto" style="background-color: #2b2b2b;">
<code><span style="color: #bbb529;">$lock</span> = Cache::lock(<span style="color: #6a8759;">'processing-report'</span>, <span style="color: #6897bb;">10</span>);

<span style="color: #cc7832;">if</span> (<span style="color: #bbb529;">$lock</span>->get()) {
    <span style="color: #808080;">// Process the report...</span>

    <span style="color: #bbb529;">$lock</span>->release();
} <span style="color: #cc7832;">else</span> {
    <span style="color: #808080;">// Could not obtain lock...</span>
    <span style="color: #cc7832;">return</span> <span style="color: #6a8759;">'Try again later.'</span>;
}</code></pre>
                </div>
            </div>

            <h3 class="text-xl font-semibold mb-2">Cache Tags</h3>
            <p class="mb-4">
                Cache tags allow you to tag related items in the cache and then flush all cached values tagged with a given name:
            </p>

            <div class="bg-gray-900 rounded-lg shadow-lg overflow-hidden mb-4">
                <div class="flex items-center bg-gray-800 px-4 py-2 border-b border-gray-700">
                    <div class="flex space-x-2">
                        <div class="w-3 h-3 rounded-full bg-red-500"></div>
                        <div class="w-3 h-3 rounded-full bg-yellow-500"></div>
                        <div class="w-3 h-3 rounded-full bg-green-500"></div>
                    </div>
                    <span class="ml-4 text-gray-400 text-sm">CacheTagsExample.php</span>
                </div>
                <div class="flex">
                    <div class="py-4 px-2 text-right bg-gray-800 text-gray-500 select-none" aria-hidden="true" style="min-width: 2.5rem;">
                        <div>1</div>
                        <div>2</div>
                        <div>3</div>
                        <div>4</div>
                        <div>5</div>
                        <div>6</div>
                        <div>7</div>
                        <div>8</div>
                    </div>
                    <pre class="language-php flex-grow p-4 text-gray-300 overflow-x-auto" style="background-color: #2b2b2b;">
<code>Cache::tags([<span style="color: #6a8759;">'people'</span>, <span style="color: #6a8759;">'artists'</span>])->put(<span style="color: #6a8759;">'John'</span>, <span style="color: #bbb529;">$johnData</span>, <span style="color: #6897bb;">3600</span>);
Cache::tags([<span style="color: #6a8759;">'people'</span>, <span style="color: #6a8759;">'authors'</span>])->put(<span style="color: #6a8759;">'Anne'</span>, <span style="color: #bbb529;">$anneData</span>, <span style="color: #6897bb;">3600</span>);

<span style="color: #bbb529;">$john</span> = Cache::tags([<span style="color: #6a8759;">'people'</span>, <span style="color: #6a8759;">'artists'</span>])->get(<span style="color: #6a8759;">'John'</span>);
<span style="color: #bbb529;">$anne</span> = Cache::tags([<span style="color: #6a8759;">'people'</span>, <span style="color: #6a8759;">'authors'</span>])->get(<span style="color: #6a8759;">'Anne'</span>);

<span style="color: #808080;">// Remove all entries tagged with 'people'</span>
Cache::tags(<span style="color: #6a8759;">'people'</span>)->flush();</code></pre>
                </div>
            </div>

            <h3 class="text-xl font-semibold mb-2">Cache Helpers</h3>
            <p class="mb-4">
                Yabasi provides several helper functions to make working with the cache easier:
            </p>

            <div class="bg-gray-900 rounded-lg shadow-lg overflow-hidden mb-4">
                <div class="flex items-center bg-gray-800 px-4 py-2 border-b border-gray-700">
                    <div class="flex space-x-2">
                        <div class="w-3 h-3 rounded-full bg-red-500"></div>
                        <div class="w-3 h-3 rounded-full bg-yellow-500"></div>
                        <div class="w-3 h-3 rounded-full bg-green-500"></div>
                    </div>
                    <span class="ml-4 text-gray-400 text-sm">CacheHelpers.php</span>
                </div>
                <div class="flex">
                    <div class="py-4 px-2 text-right bg-gray-800 text-gray-500 select-none" aria-hidden="true" style="min-width: 2.5rem;">
                        <div>1</div>
                        <div>2</div>
                        <div>3</div>
                        <div>4</div>
                        <div>5</div>
                        <div>6</div>
                        <div>7</div>
                        <div>8</div>
                        <div>9</div>
                        <div>10</div>
                        <div>11</div>
                        <div>12</div>
                        <div>13</div>
                    </div>
                    <pre class="language-php flex-grow p-4 text-gray-300 overflow-x-auto" style="background-color: #2b2b2b;">
<code><span style="color: #808080;">// Cache a value if it doesn't exist</span>
<span style="color: #bbb529;">$value</span> = Cache::remember(<span style="color: #6a8759;">'key'</span>, <span style="color: #6897bb;">3600</span>, <span style="color: #cc7832;">function</span> () {
    <span style="color: #cc7832;">return</span> <span style="color: #ccc;">computeExpensiveValue</span>();
});

<span style="color: #808080;">// Cache a value forever</span>
Cache::forever(<span style="color: #6a8759;">'key'</span>, <span style="color: #6a8759;">'value'</span>);

<span style="color: #808080;">// Get and forget a value</span>
<span style="color: #bbb529;">$value</span> = Cache::pull(<span style="color: #6a8759;">'key'</span>);

<span style="color: #808080;">// Clear all items from the cache</span>
Cache::flush();</code></pre>
                </div>
            </div>

            <h2 class="text-2xl font-semibold mb-3">Best Practices</h2>
            <ul class="list-disc list-inside mb-4">
                <li>Use meaningful keys for your cached items to avoid conflicts.</li>
                <li>Set appropriate TTL (Time To Live) values for your cached data to ensure freshness.</li>
                <li>Use cache tags to organize and manage related cache entries.</li>
                <li>Be mindful of cache size, especially when using file-based caching.</li>
                <li>Use atomic locks for operations that require exclusive access.</li>
                <li>Implement cache warming strategies for critical data.</li>
            </ul>

            <p class="mt-4">
                Yabasi's caching system provides a powerful tool to improve your application's performance. By strategically caching data and computationally expensive operations, you can significantly reduce load times and server load.
            </p>
        </section>

        <section id="session-management" class="mb-12">
            <h1 class="text-4xl font-bold mb-6">Session Management</h1>

            <p class="mb-4">
                Yabasi framework provides a robust and flexible session management system. It allows you to easily handle user sessions, store and retrieve data, and implement security measures.
            </p>

            <h2 class="text-2xl font-semibold mb-3">Configuration</h2>
            <p class="mb-4">
                Session configuration is typically stored in the <code>config/config.php</code> file:
            </p>

            <div class="bg-gray-900 rounded-lg shadow-lg overflow-hidden mb-4">
                <div class="flex items-center bg-gray-800 px-4 py-2 border-b border-gray-700">
                    <div class="flex space-x-2">
                        <div class="w-3 h-3 rounded-full bg-red-500"></div>
                        <div class="w-3 h-3 rounded-full bg-yellow-500"></div>
                        <div class="w-3 h-3 rounded-full bg-green-500"></div>
                    </div>
                    <span class="ml-4 text-gray-400 text-sm">config/config.php</span>
                </div>
                <div class="flex">
                    <div class="py-4 px-2 text-right bg-gray-800 text-gray-500 select-none" aria-hidden="true" style="min-width: 2.5rem;">
                        <div>1</div>
                        <div>2</div>
                        <div>3</div>
                        <div>4</div>
                        <div>5</div>
                        <div>6</div>
                        <div>7</div>
                        <div>8</div>
                        <div>9</div>
                        <div>10</div>
                    </div>
                    <pre class="language-php flex-grow p-4 text-gray-300 overflow-x-auto" style="background-color: #2b2b2b;">
<code><span style="color: #cc7832;">return</span> [
    <span style="color: #6a8759;">'session'</span> => [
        <span style="color: #6a8759;">'driver'</span>    => <span style="color: #6a8759;">'file'</span>,
        <span style="color: #6a8759;">'lifetime'</span>  => <span style="color: #ffc66d;">120</span>,
        <span style="color: #6a8759;">'path'</span>      => <span style="color: #6a8759;">'/tmp'</span>,
        <span style="color: #6a8759;">'domain'</span>    => <span style="color: #cc7832;">null</span>,
        <span style="color: #6a8759;">'secure'</span>    => <span style="color: #cc7832;">false</span>,
        <span style="color: #6a8759;">'httponly'</span>  => <span style="color: #cc7832;">true</span>,
    ],
];</code></pre>
                </div>
            </div>


            <h2 class="text-2xl font-semibold mb-3">Basic Usage</h2>
            <p class="mb-4">
                Here are some basic operations you can perform with the Yabasi session management system:
            </p>

            <h3 class="text-xl font-semibold mb-2">Starting a Session</h3>
            <div class="bg-gray-900 rounded-lg shadow-lg overflow-hidden mb-4">
                <div class="flex items-center bg-gray-800 px-4 py-2 border-b border-gray-700">
                    <div class="flex space-x-2">
                        <div class="w-3 h-3 rounded-full bg-red-500"></div>
                        <div class="w-3 h-3 rounded-full bg-yellow-500"></div>
                        <div class="w-3 h-3 rounded-full bg-green-500"></div>
                    </div>
                    <span class="ml-4 text-gray-400 text-sm">SessionExample.php</span>
                </div>
                <div class="flex">
                    <div class="py-4 px-2 text-right bg-gray-800 text-gray-500 select-none" aria-hidden="true" style="min-width: 2.5rem;">
                        <div>1</div>
                        <div>2</div>
                        <div>3</div>
                        <div>4</div>
                    </div>
                    <pre class="language-php flex-grow p-4 text-gray-300 overflow-x-auto" style="background-color: #2b2b2b;">
<code><span style="color: #cc7832;">use</span> <span style="color: #ffc66d;">Yabasi\Session\SessionManager</span>;

<span style="color: #cc7832;">$sessionManager</span> = <span style="color: #cc7832;">new</span> <span style="color: #ffc66d;">SessionManager</span>(<span style="color: #bbb529;">$config</span>, <span style="color: #bbb529;">$securityHandler</span>);
<span style="color: #cc7832;">$sessionManager</span>-><span style="color: #ffc66d;">start</span>();</code></pre>
                </div>
            </div>


            <h3 class="text-xl font-semibold mb-2">Setting and Getting Session Data</h3>
            <div class="bg-gray-900 rounded-lg shadow-lg overflow-hidden mb-4">
                <div class="flex items-center bg-gray-800 px-4 py-2 border-b border-gray-700">
                    <div class="flex space-x-2">
                        <div class="w-3 h-3 rounded-full bg-red-500"></div>
                        <div class="w-3 h-3 rounded-full bg-yellow-500"></div>
                        <div class="w-3 h-3 rounded-full bg-green-500"></div>
                    </div>
                    <span class="ml-4 text-gray-400 text-sm">SessionExample.php</span>
                </div>
                <div class="flex">
                    <div class="py-4 px-2 text-right bg-gray-800 text-gray-500 select-none" aria-hidden="true" style="min-width: 2.5rem;">
                        <div>1</div>
                        <div>2</div>
                        <div>3</div>
                        <div>4</div>
                    </div>
                    <pre class="language-php flex-grow p-4 text-gray-300 overflow-x-auto" style="background-color: #2b2b2b;">
<code><span style="color: #808080;">// Set a session value</span>
<span style="color: #cc7832;">$sessionManager</span>-><span style="color: #ffc66d;">set</span>(<span style="color: #6a8759;">'user_id'</span>, <span style="color: #ffc66d;">123</span>);

<span style="color: #808080;">// Get a session value</span>
<span style="color: #cc7832;">$userId</span> = <span style="color: #cc7832;">$sessionManager</span>-><span style="color: #ffc66d;">get</span>(<span style="color: #6a8759;">'user_id'</span>);</code></pre>
                </div>
            </div>


            <h3 class="text-xl font-semibold mb-2">Checking and Removing Session Data</h3>
            <div class="bg-gray-900 rounded-lg shadow-lg overflow-hidden mb-4">
                <div class="flex items-center bg-gray-800 px-4 py-2 border-b border-gray-700">
                    <div class="flex space-x-2">
                        <div class="w-3 h-3 rounded-full bg-red-500"></div>
                        <div class="w-3 h-3 rounded-full bg-yellow-500"></div>
                        <div class="w-3 h-3 rounded-full bg-green-500"></div>
                    </div>
                    <span class="ml-4 text-gray-400 text-sm">SessionExample.php</span>
                </div>
                <div class="flex">
                    <div class="py-4 px-2 text-right bg-gray-800 text-gray-500 select-none" aria-hidden="true" style="min-width: 2.5rem;">
                        <div>1</div>
                        <div>2</div>
                        <div>3</div>
                        <div>4</div>
                    </div>
                    <pre class="language-php flex-grow p-4 text-gray-300 overflow-x-auto" style="background-color: #2b2b2b;">
<code><span style="color: #cc7832;">if</span> (<span style="color: #cc7832;">$sessionManager</span>-><span style="color: #ffc66d;">has</span>(<span style="color: #6a8759;">'user_id'</span>)) {
    <span style="color: #808080;">// The 'user_id' exists in the session</span>
    <span style="color: #cc7832;">$sessionManager</span>-><span style="color: #ffc66d;">remove</span>(<span style="color: #6a8759;">'user_id'</span>);
}</code></pre>
                </div>
            </div>


            <h2 class="text-2xl font-semibold mb-3">Advanced Features</h2>

            <h3 class="text-xl font-semibold mb-2">Flash Messages</h3>
            <p class="mb-4">
                Flash messages are temporary session data, typically used for one-time notifications:
            </p>
            <div class="bg-gray-900 rounded-lg shadow-lg overflow-hidden mb-4">
                <div class="flex items-center bg-gray-800 px-4 py-2 border-b border-gray-700">
                    <div class="flex space-x-2">
                        <div class="w-3 h-3 rounded-full bg-red-500"></div>
                        <div class="w-3 h-3 rounded-full bg-yellow-500"></div>
                        <div class="w-3 h-3 rounded-full bg-green-500"></div>
                    </div>
                    <span class="ml-4 text-gray-400 text-sm">FlashExample.php</span>
                </div>
                <div class="flex">
                    <div class="py-4 px-2 text-right bg-gray-800 text-gray-500 select-none" aria-hidden="true" style="min-width: 2.5rem;">
                        <div>1</div>
                        <div>2</div>
                        <div>3</div>
                        <div>4</div>
                    </div>
                    <pre class="language-php flex-grow p-4 text-gray-300 overflow-x-auto" style="background-color: #2b2b2b;">
<code><span style="color: #808080;">// Set a flash message</span>
<span style="color: #cc7832;">$sessionManager</span>-><span style="color: #ffc66d;">flash</span>(<span style="color: #6a8759;">'success'</span>, <span style="color: #6a8759;">'Operation completed successfully.'</span>);

<span style="color: #808080;">// Retrieve a flash message</span>
<span style="color: #cc7832;">$flashMessage</span> = <span style="color: #cc7832;">$sessionManager</span>-><span style="color: #ffc66d;">getFlash</span>(<span style="color: #6a8759;">'success'</span>);</code></pre>
                </div>
            </div>

            <h3 class="text-xl font-semibold mb-2">Session Security</h3>
            <p class="mb-4">
                Yabasi provides built-in security features for sessions:
            </p>
            <div class="bg-gray-900 rounded-lg shadow-lg overflow-hidden mb-4">
                <div class="flex items-center bg-gray-800 px-4 py-2 border-b border-gray-700">
                    <div class="flex space-x-2">
                        <div class="w-3 h-3 rounded-full bg-red-500"></div>
                        <div class="w-3 h-3 rounded-full bg-yellow-500"></div>
                        <div class="w-3 h-3 rounded-full bg-green-500"></div>
                    </div>
                    <span class="ml-4 text-gray-400 text-sm">SecurityExample.php</span>
                </div>
                <div class="flex">
                    <div class="py-4 px-2 text-right bg-gray-800 text-gray-500 select-none" aria-hidden="true" style="min-width: 2.5rem;">
                        <div>1</div>
                        <div>2</div>
                        <div>3</div>
                        <div>4</div>
                        <div>5</div>
                    </div>
                    <pre class="language-php flex-grow p-4 text-gray-300 overflow-x-auto" style="background-color: #2b2b2b;">
<code><span style="color: #cc7832;">use</span> <span style="color: #ffc66d;">Yabasi\Session\SecurityHandler</span>;

<span style="color: #cc7832;">$securityHandler</span> = <span style="color: #cc7832;">new</span> <span style="color: #ffc66d;">SecurityHandler</span>();
<span style="color: #cc7832;">$securityHandler</span>-><span style="color: #ffc66d;">setSessionIdentifiers</span>();
<span style="color: #ffc66d;">SecurityHandler</span>::<span style="color: #ffc66d;">preventSessionFixation</span>();</code></pre>
                </div>
            </div>


            <h2 class="text-2xl font-semibold mb-3">Best Practices</h2>
            <ul class="list-disc list-inside mb-4">
                <li>Always start the session before using any session-related functions.</li>
                <li>Use flash messages for temporary data that should only be available for the next request.</li>
                <li>Implement proper session security measures to prevent attacks like session fixation.</li>
                <li>Regularly regenerate session IDs to enhance security.</li>
                <li>Clear sensitive session data when it's no longer needed.</li>
            </ul>

            <p class="mt-4">
                Yabasi's session management system provides a secure and flexible way to handle user sessions in your application. By leveraging these features, you can create robust and secure web applications.
            </p>
        </section>

        <section id="error-handling-logging" class="mb-12">
            <h1 class="text-4xl font-bold mb-6">Error Handling & Logging</h1>

            <p class="mb-4">
                Yabasi framework provides robust error handling and logging capabilities to help you manage and debug your application effectively.
            </p>

            <h2 class="text-2xl font-semibold mb-3">Error Handling</h2>
            <p class="mb-4">
                Yabasi uses a custom exception handler to manage errors gracefully. Here's how you can configure and use it:
            </p>

            <div class="bg-gray-900 rounded-lg shadow-lg overflow-hidden mb-4">
                <div class="flex items-center bg-gray-800 px-4 py-2 border-b border-gray-700">
                    <div class="flex space-x-2">
                        <div class="w-3 h-3 rounded-full bg-red-500"></div>
                        <div class="w-3 h-3 rounded-full bg-yellow-500"></div>
                        <div class="w-3 h-3 rounded-full bg-green-500"></div>
                    </div>
                    <span class="ml-4 text-gray-400 text-sm">Bootstrap.php</span>
                </div>
                <div class="flex">
                    <div class="py-4 px-2 text-right bg-gray-800 text-gray-500 select-none" aria-hidden="true" style="min-width: 2.5rem;">
                        <div>1</div>
                        <div>2</div>
                        <div>3</div>
                        <div>4</div>
                        <div>5</div>
                        <div>6</div>
                        <div>7</div>
                    </div>
                    <pre class="language-php flex-grow p-4 text-gray-300 overflow-x-auto" style="background-color: #2b2b2b;">
<code><span style="color: #cc7832;">use</span> Yabasi\Logging\CustomExceptionHandler;

<span style="color: #bbb529;">$config</span> = <span style="color: #bbb529;">$this</span>->container->get(<span style="color: #6a8759;">'config'</span>);
<span style="color: #bbb529;">$this</span>->exceptionHandler = <span style="color: #cc7832;">new</span> CustomExceptionHandler(
    <span style="color: #bbb529;">$config</span>->get(<span style="color: #6a8759;">'app.debug'</span>, <span style="color: #cc7832;">false</span>)
);</code></pre>
                </div>
            </div>

            <h3 class="text-xl font-semibold mb-2">Handling Exceptions</h3>
            <p class="mb-4">
                You can use the custom exception handler to manage exceptions in your application:
            </p>

            <div class="bg-gray-900 rounded-lg shadow-lg overflow-hidden mb-4">
                <div class="flex items-center bg-gray-800 px-4 py-2 border-b border-gray-700">
                    <div class="flex space-x-2">
                        <div class="w-3 h-3 rounded-full bg-red-500"></div>
                        <div class="w-3 h-3 rounded-full bg-yellow-500"></div>
                        <div class="w-3 h-3 rounded-full bg-green-500"></div>
                    </div>
                    <span class="ml-4 text-gray-400 text-sm">ExampleController.php</span>
                </div>
                <div class="flex">
                    <div class="py-4 px-2 text-right bg-gray-800 text-gray-500 select-none" aria-hidden="true" style="min-width: 2.5rem;">
                        <div>1</div>
                        <div>2</div>
                        <div>3</div>
                        <div>4</div>
                        <div>5</div>
                        <div>6</div>
                        <div>7</div>
                        <div>8</div>
                        <div>9</div>
                    </div>
                    <pre class="language-php flex-grow p-4 text-gray-300 overflow-x-auto" style="background-color: #2b2b2b;">
<code><span style="color: #cc7832;">public function</span> <span style="color: #ffc66d;">exampleAction</span>()
{
    <span style="color: #cc7832;">try</span> {
        <span style="color: #808080;">// Your code here</span>
    } <span style="color: #cc7832;">catch</span> (\Exception <span style="color: #bbb529;">$e</span>) {
        <span style="color: #bbb529;">$this</span>->exceptionHandler->handle(<span style="color: #bbb529;">$e</span>);
    }
}</code></pre>
                </div>
            </div>

            <h2 class="text-2xl font-semibold mb-3">Logging</h2>
            <p class="mb-4">
                Yabasi provides a powerful logging system through the Logger class. Here's how to use it:
            </p>

            <div class="bg-gray-900 rounded-lg shadow-lg overflow-hidden mb-4">
                <div class="flex items-center bg-gray-800 px-4 py-2 border-b border-gray-700">
                    <div class="flex space-x-2">
                        <div class="w-3 h-3 rounded-full bg-red-500"></div>
                        <div class="w-3 h-3 rounded-full bg-yellow-500"></div>
                        <div class="w-3 h-3 rounded-full bg-green-500"></div>
                    </div>
                    <span class="ml-4 text-gray-400 text-sm">LoggerExample.php</span>
                </div>
                <div class="flex">
                    <div class="py-4 px-2 text-right bg-gray-800 text-gray-500 select-none" aria-hidden="true" style="min-width: 2.5rem;">
                        <div>1</div>
                        <div>2</div>
                        <div>3</div>
                        <div>4</div>
                        <div>5</div>
                        <div>6</div>
                        <div>7</div>
                        <div>8</div>
                    </div>
                    <pre class="language-php flex-grow p-4 text-gray-300 overflow-x-auto" style="background-color: #2b2b2b;">
<code><span style="color: #cc7832;">use</span> Yabasi\Logging\Logger;

<span style="color: #bbb529;">$logger</span> = <span style="color: #cc7832;">new</span> Logger(<span style="color: #bbb529;">$config</span>);

<span style="color: #bbb529;">$logger</span>->info(<span style="color: #6a8759;">'This is an informational message'</span>);
<span style="color: #bbb529;">$logger</span>->warning(<span style="color: #6a8759;">'This is a warning'</span>);
<span style="color: #bbb529;">$logger</span>->error(<span style="color: #6a8759;">'An error occurred'</span>, [<span style="color: #6a8759;">'error_code'</span> => <span style="color: #6897bb;">500</span>]);
<span style="color: #bbb529;">$logger</span>->critical(<span style="color: #6a8759;">'A critical error occurred'</span>);</code></pre>
                </div>
            </div>

            <h3 class="text-xl font-semibold mb-2">Log Levels</h3>
            <p class="mb-4">
                Yabasi supports various log levels, allowing you to categorize your log messages:
            </p>
            <ul class="list-disc list-inside mb-4">
                <li>emergency</li>
                <li>alert</li>
                <li>critical</li>
                <li>error</li>
                <li>warning</li>
                <li>notice</li>
                <li>info</li>
                <li>debug</li>
            </ul>

            <h3 class="text-xl font-semibold mb-2">Custom Log Files</h3>
            <p class="mb-4">
                You can create custom log files for different parts of your application:
            </p>

            <div class="bg-gray-900 rounded-lg shadow-lg overflow-hidden mb-4">
                <div class="flex items-center bg-gray-800 px-4 py-2 border-b border-gray-700">
                    <div class="flex space-x-2">
                        <div class="w-3 h-3 rounded-full bg-red-500"></div>
                        <div class="w-3 h-3 rounded-full bg-yellow-500"></div>
                        <div class="w-3 h-3 rounded-full bg-green-500"></div>
                    </div>
                    <span class="ml-4 text-gray-400 text-sm">CustomLoggerExample.php</span>
                </div>
                <div class="flex">
                    <div class="py-4 px-2 text-right bg-gray-800 text-gray-500 select-none" aria-hidden="true" style="min-width: 2.5rem;">
                        <div>1</div>
                        <div>2</div>
                    </div>
                    <pre class="language-php flex-grow p-4 text-gray-300 overflow-x-auto" style="background-color: #2b2b2b;">
<code><span style="color: #bbb529;">$apiLogger</span> = <span style="color: #cc7832;">new</span> Logger(<span style="color: #bbb529;">$config</span>, <span style="color: #6a8759;">'api'</span>);
<span style="color: #bbb529;">$apiLogger</span>->info(<span style="color: #6a8759;">'API request received'</span>, [<span style="color: #6a8759;">'endpoint'</span> => <span style="color: #6a8759;">'/users'</span>]);</code></pre>
                </div>
            </div>

            <h2 class="text-2xl font-semibold mb-3">Best Practices</h2>
            <ul class="list-disc list-inside mb-4">
                <li>Use appropriate log levels to categorize your messages.</li>
                <li>Include relevant context data in your log messages.</li>
                <li>Implement proper error handling to catch and log exceptions.</li>
                <li>Regularly review and analyze your log files.</li>
                <li>Use custom log files for different components or services in your application.</li>
                <li>Configure log rotation to manage log file sizes.</li>
            </ul>

            <p class="mt-4">
                Proper error handling and logging are crucial for maintaining and debugging your Yabasi application. By leveraging these features, you can quickly identify and resolve issues, improving the overall reliability of your application.
            </p>
        </section>

        <section id="security" class="mb-12">
            <h1 class="text-4xl font-bold mb-6">Security</h1>

            <p class="mb-4">
                Yabasi framework provides robust security features to help protect your application against common web vulnerabilities. This section covers the key security components and best practices.
            </p>

            <h2 class="text-2xl font-semibold mb-3">CSRF Protection</h2>
            <p class="mb-4">
                Cross-Site Request Forgery (CSRF) protection is built into Yabasi to prevent unauthorized commands from being transmitted from a user that the web application trusts.
            </p>

            <h3 class="text-xl font-semibold mb-2">Generating CSRF Tokens</h3>
            <div class="bg-gray-900 rounded-lg shadow-lg overflow-hidden mb-4">
                <div class="flex items-center bg-gray-800 px-4 py-2 border-b border-gray-700">
                    <div class="flex space-x-2">
                        <div class="w-3 h-3 rounded-full bg-red-500"></div>
                        <div class="w-3 h-3 rounded-full bg-yellow-500"></div>
                        <div class="w-3 h-3 rounded-full bg-green-500"></div>
                    </div>
                    <span class="ml-4 text-gray-400 text-sm">CsrfProtection.php</span>
                </div>
                <div class="flex">
                    <div class="py-4 px-2 text-right bg-gray-800 text-gray-500 select-none" aria-hidden="true" style="min-width: 2.5rem;">
                        <div>1</div>
                        <div>2</div>
                        <div>3</div>
                        <div>4</div>
                    </div>
                    <pre class="language-php flex-grow p-4 text-gray-300 overflow-x-auto" style="background-color: #2b2b2b;">
<code><span style="color: #cc7832;">use</span> Yabasi\Security\CsrfProtection;

<span style="color: #bbb529;">$csrfProtection</span> = <span style="color: #cc7832;">new</span> CsrfProtection(<span style="color: #bbb529;">$session</span>);
<span style="color: #bbb529;">$token</span> = <span style="color: #bbb529;">$csrfProtection</span>->generateToken();</code></pre>
                </div>
            </div>

            <h3 class="text-xl font-semibold mb-2">Validating CSRF Tokens</h3>
            <div class="bg-gray-900 rounded-lg shadow-lg overflow-hidden mb-4">
                <div class="flex items-center bg-gray-800 px-4 py-2 border-b border-gray-700">
                    <div class="flex space-x-2">
                        <div class="w-3 h-3 rounded-full bg-red-500"></div>
                        <div class="w-3 h-3 rounded-full bg-yellow-500"></div>
                        <div class="w-3 h-3 rounded-full bg-green-500"></div>
                    </div>
                    <span class="ml-4 text-gray-400 text-sm">CsrfMiddleware.php</span>
                </div>
                <div class="flex">
                    <div class="py-4 px-2 text-right bg-gray-800 text-gray-500 select-none" aria-hidden="true" style="min-width: 2.5rem;">
                        <div>1</div>
                        <div>2</div>
                        <div>3</div>
                        <div>4</div>
                        <div>5</div>
                        <div>6</div>
                        <div>7</div>
                    </div>
                    <pre class="language-php flex-grow p-4 text-gray-300 overflow-x-auto" style="background-color: #2b2b2b;">
<code><span style="color: #cc7832;">public function</span> <span style="color: #ffc66d;">handle</span>(Request <span style="color: #bbb529;">$request</span>, Closure <span style="color: #bbb529;">$next</span>): Response
{
    <span style="color: #bbb529;">$token</span> = <span style="color: #bbb529;">$this</span>->csrfProtection->getTokenFromRequest(<span style="color: #bbb529;">$request</span>);
    <span style="color: #cc7832;">if</span> (!<span style="color: #bbb529;">$token</span> || !<span style="color: #bbb529;">$this</span>->csrfProtection->validateToken(<span style="color: #bbb529;">$token</span>)) {
        <span style="color: #cc7832;">return</span> <span style="color: #cc7832;">new</span> Response(<span style="color: #6a8759;">'CSRF token mismatch'</span>, <span style="color: #6897bb;">403</span>);
    }
    <span style="color: #cc7832;">return</span> <span style="color: #bbb529;">$next</span>(<span style="color: #bbb529;">$request</span>);
}</code></pre>
                </div>
            </div>

            <h2 class="text-2xl font-semibold mb-3">XSS Protection</h2>
            <p class="mb-4">
                Yabasi includes built-in protection against Cross-Site Scripting (XSS) attacks by automatically escaping output.
            </p>

            <div class="bg-gray-900 rounded-lg shadow-lg overflow-hidden mb-4">
                <div class="flex items-center bg-gray-800 px-4 py-2 border-b border-gray-700">
                    <div class="flex space-x-2">
                        <div class="w-3 h-3 rounded-full bg-red-500"></div>
                        <div class="w-3 h-3 rounded-full bg-yellow-500"></div>
                        <div class="w-3 h-3 rounded-full bg-green-500"></div>
                    </div>
                    <span class="ml-4 text-gray-400 text-sm">XssProtection.php</span>
                </div>
                <div class="flex">
                    <div class="py-4 px-2 text-right bg-gray-800 text-gray-500 select-none" aria-hidden="true" style="min-width: 2.5rem;">
                        <div>1</div>
                        <div>2</div>
                        <div>3</div>
                    </div>
                    <pre class="language-php flex-grow p-4 text-gray-300 overflow-x-auto" style="background-color: #2b2b2b;">
<code><span style="color: #bbb529;">$userInput</span> = <span style="color: #6a8759;">"&lt;script&gt;alert('XSS');&lt;/script&gt;"</span>;
<span style="color: #bbb529;">$cleanInput</span> = XssProtection::clean(<span style="color: #bbb529;">$userInput</span>);
<span style="color: #808080;">// Output: &amp;lt;script&amp;gt;alert('XSS');&amp;lt;/script&amp;gt;</span></code></pre>
                </div>
            </div>

            <h2 class="text-2xl font-semibold mb-3">Session Security</h2>
            <p class="mb-4">
                Yabasi provides robust session security features to protect against session hijacking and fixation attacks.
            </p>

            <h3 class="text-xl font-semibold mb-2">Secure Session Configuration</h3>
            <div class="bg-gray-900 rounded-lg shadow-lg overflow-hidden mb-4">
                <div class="flex items-center bg-gray-800 px-4 py-2 border-b border-gray-700">
                    <div class="flex space-x-2">
                        <div class="w-3 h-3 rounded-full bg-red-500"></div>
                        <div class="w-3 h-3 rounded-full bg-yellow-500"></div>
                        <div class="w-3 h-3 rounded-full bg-green-500"></div>
                    </div>
                    <span class="ml-4 text-gray-400 text-sm">SecurityHandler.php</span>
                </div>
                <div class="flex">
                    <div class="py-4 px-2 text-right bg-gray-800 text-gray-500 select-none" aria-hidden="true" style="min-width: 2.5rem;">
                        <div>1</div>
                        <div>2</div>
                    </div>
                    <pre class="language-php flex-grow p-4 text-gray-300 overflow-x-auto" style="background-color: #2b2b2b;">
<code><span style="color: #ffc66d;">SecurityHandler</span>::<span style="color: #ffc66d;">setSecureCookieParams</span>();
<span style="color: #ffc66d;">SecurityHandler</span>::<span style="color: #ffc66d;">preventSessionFixation</span>();</code></pre>
                </div>
            </div>

            <h3 class="text-xl font-semibold mb-2">Session Validation</h3>
            <div class="bg-gray-900 rounded-lg shadow-lg overflow-hidden mb-4">
                <div class="flex items-center bg-gray-800 px-4 py-2 border-b border-gray-700">
                    <div class="flex space-x-2">
                        <div class="w-3 h-3 rounded-full bg-red-500"></div>
                        <div class="w-3 h-3 rounded-full bg-yellow-500"></div>
                        <div class="w-3 h-3 rounded-full bg-green-500"></div>
                    </div>
                    <span class="ml-4 text-gray-400 text-sm">SecurityHandler.php</span>
                </div>
                <div class="flex">
                    <div class="py-4 px-2 text-right bg-gray-800 text-gray-500 select-none" aria-hidden="true" style="min-width: 2.5rem;">
                        <div>1</div>
                        <div>2</div>
                        <div>3</div>
                        <div>4</div>
                        <div>5</div>
                    </div>
                    <pre class="language-php flex-grow p-4 text-gray-300 overflow-x-auto" style="background-color: #2b2b2b;">
<code><span style="color: #bbb529;">$securityHandler</span> = <span style="color: #cc7832;">new</span> SecurityHandler();
<span style="color: #cc7832;">if</span> (!<span style="color: #bbb529;">$securityHandler</span>->validateSession()) {
    <span style="color: #808080;">// Session is invalid, handle accordingly</span>
    <span style="color: #bbb529;">$session</span>->regenerate();
}</code></pre>
                </div>
            </div>

            <h2 class="text-2xl font-semibold mb-3">Password Hashing</h2>
            <p class="mb-4">
                Yabasi uses secure password hashing by default when working with user models.
            </p>

            <div class="bg-gray-900 rounded-lg shadow-lg overflow-hidden mb-4">
                <div class="flex items-center bg-gray-800 px-4 py-2 border-b border-gray-700">
                    <div class="flex space-x-2">
                        <div class="w-3 h-3 rounded-full bg-red-500"></div>
                        <div class="w-3 h-3 rounded-full bg-yellow-500"></div>
                        <div class="w-3 h-3 rounded-full bg-green-500"></div>
                    </div>
                    <span class="ml-4 text-gray-400 text-sm">User.php</span>
                </div>
                <div class="flex">
                    <div class="py-4 px-2 text-right bg-gray-800 text-gray-500 select-none" aria-hidden="true" style="min-width: 2.5rem;">
                        <div>1</div>
                        <div>2</div>
                        <div>3</div>
                        <div>4</div>
                    </div>
                    <pre class="language-php flex-grow p-4 text-gray-300 overflow-x-auto" style="background-color: #2b2b2b;">
<code><span style="color: #cc7832;">public function</span> <span style="color: #ffc66d;">setPassword</span>(<span style="color: #bbb529;">$value</span>): <span style="color: #cc7832;">void</span>
{
    <span style="color: #bbb529;">$this</span>->attributes[<span style="color: #6a8759;">'password'</span>] = password_hash(<span style="color: #bbb529;">$value</span>, PASSWORD_DEFAULT);
}</code></pre>
                </div>
            </div>

            <h2 class="text-2xl font-semibold mb-3">Database Security</h2>
            <p class="mb-4">
                Yabasi uses prepared statements to prevent SQL injection attacks.
            </p>

            <div class="bg-gray-900 rounded-lg shadow-lg overflow-hidden mb-4">
                <div class="flex items-center bg-gray-800 px-4 py-2 border-b border-gray-700">
                    <div class="flex space-x-2">
                        <div class="w-3 h-3 rounded-full bg-red-500"></div>
                        <div class="w-3 h-3 rounded-full bg-yellow-500"></div>
                        <div class="w-3 h-3 rounded-full bg-green-500"></div>
                    </div>
                    <span class="ml-4 text-gray-400 text-sm">QueryBuilder.php</span>
                </div>
                <div class="flex">
                    <div class="py-4 px-2 text-right bg-gray-800 text-gray-500 select-none" aria-hidden="true" style="min-width: 2.5rem;">
                        <div>1</div>
                        <div>2</div>
                        <div>3</div>
                    </div>
                    <pre class="language-php flex-grow p-4 text-gray-300 overflow-x-auto" style="background-color: #2b2b2b;">
<code><span style="color: #bbb529;">$users</span> = User::query()
    ->where(<span style="color: #6a8759;">'email'</span>, <span style="color: #6a8759;">'='</span>, <span style="color: #bbb529;">$email</span>)
    ->get();</code></pre>
                </div>
            </div>

            <h2 class="text-2xl font-semibold mb-3">API Security</h2>
            <p class="mb-4">
                For API security, Yabasi includes rate limiting to prevent abuse.
            </p>

        </section>

        <section id="cli-artisan" class="mb-12">
            <h1 class="text-4xl font-bold mb-6">CLI & Artisan</h1>

            <p class="mb-4">
                Yabasi framework provides a powerful Command Line Interface (CLI) tool, similar to Laravel's Artisan, to help you manage and interact with your application. This tool simplifies many common tasks and allows you to create custom commands for your specific needs.
            </p>

            <h2 class="text-2xl font-semibold mb-3">1. Yabasi CLI Overview</h2>
            <p class="mb-4">
                The Yabasi CLI is a versatile tool that automates many development tasks, from generating boilerplate code to managing database migrations. To use the Yabasi CLI, you typically run commands in your terminal from your project's root directory.
            </p>

            <div class="bg-gray-900 rounded-lg p-4 mb-4 shadow-md relative">
                <button onclick="copyCode(this)" class="absolute top-2 right-2 text-gray-400 hover:text-white focus:outline-none">
                    <i class="fas fa-copy"></i>
                </button>
                <code class="font-mono text-white">
                    <span class="text-purple-400">php</span>
                    <span class="text-green-400">yabasi</span>
                    <span class="text-yellow-400">command:name</span>
                </code>
            </div>


            <h2 class="text-2xl font-semibold mb-3">2. Basic Commands</h2>
            <p class="mb-4">
                Yabasi comes with several built-in commands to help you generate common components of your application:
            </p>

            <h3 class="text-xl font-semibold mb-2">make:controller</h3>
            <p class="mb-4">
                Creates a new controller class.
            </p>

            <div class="bg-gray-900 rounded-lg p-4 mb-4 shadow-md relative">
                <button onclick="copyCode(this)" class="absolute top-2 right-2 text-gray-400 hover:text-white focus:outline-none">
                    <i class="fas fa-copy"></i>
                </button>
                <code><span class="text-purple-400">php</span>
                    <span class="text-green-400">yabasi</span>
                    <span class="text-blue-400">make:controller</span>
                    <span class="text-yellow-400">UserController</span></code>
            </div>


            <h3 class="text-xl font-semibold mb-2">make:model</h3>
            <p class="mb-4">
                Generates a new model class.
            </p>

            <div class="bg-gray-900 rounded-lg p-4 mb-4 shadow-md relative">
                <button onclick="copyCode(this)" class="absolute top-2 right-2 text-gray-400 hover:text-white focus:outline-none">
                    <i class="fas fa-copy"></i>
                </button>
                <code><span class="text-purple-400">php</span>
                    <span class="text-green-400">yabasi</span>
                    <span class="text-blue-400">make:model</span>
                    <span class="text-yellow-400">User</span></code>
            </div>

            <h3 class="text-xl font-semibold mb-2">make:middleware</h3>
            <p class="mb-4">
                Creates a new middleware class.
            </p>

            <div class="bg-gray-900 rounded-lg p-4 mb-4 shadow-md relative">
                <button onclick="copyCode(this)" class="absolute top-2 right-2 text-gray-400 hover:text-white focus:outline-none">
                    <i class="fas fa-copy"></i>
                </button>
                <code>
                    <span class="text-purple-400">php</span>
                    <span class="text-green-400">yabasi</span>
                    <span class="text-blue-400">make:middleware</span>
                    <span class="text-yellow-400">AuthMiddleware</span>
                </code>
            </div>

            <h3 class="text-xl font-semibold mb-2">make:migration</h3>
            <p class="mb-4">
                Generates a new database migration file.
            </p>

            <div class="bg-gray-900 rounded-lg p-4 mb-4 shadow-md relative">
                <button onclick="copyCode(this)" class="absolute top-2 right-2 text-gray-400 hover:text-white focus:outline-none">
                    <i class="fas fa-copy"></i>
                </button>
                <code>
                    <span class="text-purple-400">php</span>
                    <span class="text-green-400">yabasi</span>
                    <span class="text-blue-400">make:migration</span>
                    <span class="text-yellow-400">create_users_table</span>
                </code>
            </div>

            <h2 class="text-2xl font-semibold mb-3">3. Database Commands</h2>
            <p class="mb-4">
                Yabasi provides several commands to manage your database migrations:
            </p>

            <ul class="list-disc list-inside mb-4">
                <li><code>migrate</code>: Run all pending migrations</li>
                <li><code>migrate:rollback</code>: Rollback the last database migration</li>
                <li><code>migrate:reset</code>: Rollback all database migrations</li>
                <li><code>migrate:refresh</code>: Reset and re-run all migrations</li>
                <li><code>migrate:status</code>: Show the status of each migration</li>
                <li><code>db:dump</code>: Create a database dump</li>
                <li><code>db:restore</code>: Restore a database from a dump</li>
            </ul>

            <h2 class="text-2xl font-semibold mb-3">4. Creating Custom Commands</h2>
            <p class="mb-4">
                You can create your own custom commands in Yabasi. Here's an example of how to structure a custom command:
            </p>

            <div class="bg-gray-900 rounded-lg shadow-lg overflow-hidden mb-4">
                <div class="flex items-center bg-gray-800 px-4 py-2 border-b border-gray-700">
                    <div class="flex space-x-2">
                        <div class="w-3 h-3 rounded-full bg-red-500"></div>
                        <div class="w-3 h-3 rounded-full bg-yellow-500"></div>
                        <div class="w-3 h-3 rounded-full bg-green-500"></div>
                    </div>
                    <span class="ml-4 text-gray-400 text-sm">CustomCommand.php</span>
                </div>
                <div class="flex">
                    <div class="py-4 px-2 text-right bg-gray-800 text-gray-500 select-none" aria-hidden="true" style="min-width: 2.5rem;">
                        <div>1</div>
                        <div>2</div>
                        <div>3</div>
                        <div>4</div>
                        <div>5</div>
                        <div>6</div>
                        <div>7</div>
                        <div>8</div>
                        <div>9</div>
                        <div>10</div>
                        <div>11</div>
                        <div>12</div>
                        <div>13</div>
                        <div>14</div>
                        <div>15</div>
                        <div>16</div>
                    </div>
                    <pre class="language-php flex-grow p-4 text-gray-300 overflow-x-auto" style="background-color: #2b2b2b;">
<code><span style="color: #cc7832;">use</span> Symfony\Component\Console\Command\Command;
<span style="color: #cc7832;">use</span> Symfony\Component\Console\Input\InputInterface;
<span style="color: #cc7832;">use</span> Symfony\Component\Console\Output\OutputInterface;

<span style="color: #cc7832;">class</span> <span style="color: #ffc66d;">CustomCommand</span> <span style="color: #cc7832;">extends</span> Command
{
    <span style="color: #cc7832;">protected static</span> <span style="color: #bbb529;">$defaultName</span> = <span style="color: #6a8759;">'app:custom-command'</span>;

    <span style="color: #cc7832;">protected function</span> <span style="color: #ffc66d;">configure</span>()
    {
        <span style="color: #bbb529;">$this</span>->setDescription(<span style="color: #6a8759;">'A custom command description'</span>);
    }

    <span style="color: #cc7832;">protected function</span> <span style="color: #ffc66d;">execute</span>(InputInterface <span style="color: #bbb529;">$input</span>, OutputInterface <span style="color: #bbb529;">$output</span>)
    {
        <span style="color: #bbb529;">$output</span>->writeln(<span style="color: #6a8759;">'Custom command executed!'</span>);
        <span style="color: #cc7832;">return</span> Command::SUCCESS;
    }
}</code></pre>
                </div>
            </div>

            <p class="mb-4">
                After creating your custom command, you need to register it in the Console class:
            </p>

            <div class="bg-gray-900 rounded-lg shadow-lg overflow-hidden mb-4">
                <div class="flex items-center bg-gray-800 px-4 py-2 border-b border-gray-700">
                    <div class="flex space-x-2">
                        <div class="w-3 h-3 rounded-full bg-red-500"></div>
                        <div class="w-3 h-3 rounded-full bg-yellow-500"></div>
                        <div class="w-3 h-3 rounded-full bg-green-500"></div>
                    </div>
                    <span class="ml-4 text-gray-400 text-sm">Console.php</span>
                </div>
                <div class="flex">
                    <div class="py-4 px-2 text-right bg-gray-800 text-gray-500 select-none" aria-hidden="true" style="min-width: 2.5rem;">
                        <div>1</div>
                        <div>2</div>
                        <div>3</div>
                    </div>
                    <pre class="language-php flex-grow p-4 text-gray-300 overflow-x-auto" style="background-color: #2b2b2b;">
<code><span style="color: #cc7832;">protected function</span> <span style="color: #ffc66d;">registerCommands</span>(): <span style="color: #cc7832;">void</span>
{
    <span style="color: #bbb529;">$this</span>->console->add(<span style="color: #cc7832;">new</span> CustomCommand());
}</code></pre>
                </div>
            </div>

            <h2 class="text-2xl font-semibold mb-3">5. Console Class</h2>
            <p class="mb-4">
                The Console class in Yabasi is responsible for registering and running CLI commands. It uses Symfony's Console component to manage commands.
            </p>

            <div class="bg-gray-900 rounded-lg shadow-lg overflow-hidden mb-4">
                <div class="flex items-center bg-gray-800 px-4 py-2 border-b border-gray-700">
                    <div class="flex space-x-2">
                        <div class="w-3 h-3 rounded-full bg-red-500"></div>
                        <div class="w-3 h-3 rounded-full bg-yellow-500"></div>
                        <div class="w-3 h-3 rounded-full bg-green-500"></div>
                    </div>
                    <span class="ml-4 text-gray-400 text-sm">Console.php</span>
                </div>
                <div class="flex">
                    <div class="py-4 px-2 text-right bg-gray-800 text-gray-500 select-none" aria-hidden="true" style="min-width: 2.5rem;">
                        <div>1</div>
                        <div>2</div>
                        <div>3</div>
                        <div>4</div>
                        <div>5</div>
                        <div>6</div>
                        <div>7</div>
                        <div>8</div>
                        <div>9</div>
                        <div>10</div>
                        <div>11</div>
                        <div>12</div>
                    </div>
                    <pre class="language-php flex-grow p-4 text-gray-300 overflow-x-auto" style="background-color: #2b2b2b;">
<code><span style="color: #cc7832;">class</span> <span style="color: #ffc66d;">Console</span>
{
    <span style="color: #cc7832;">protected</span> Container <span style="color: #bbb529;">$container</span>;
    <span style="color: #cc7832;">protected</span> SymfonyConsole <span style="color: #bbb529;">$console</span>;

    <span style="color: #cc7832;">public function</span> <span style="color: #ffc66d;">__construct</span>(Container <span style="color: #bbb529;">$container</span>)
    {
        <span style="color: #bbb529;">$this</span>->container = <span style="color: #bbb529;">$container</span>;
        <span style="color: #bbb529;">$this</span>->console = <span style="color: #cc7832;">new</span> SymfonyConsole(<span style="color: #6a8759;">'Yabasi'</span>, <span style="color: #6a8759;">'1.0.0'</span>);
        <span style="color: #bbb529;">$this</span>->registerCommands();
    }

    <span style="color: #cc7832;">public function</span> <span style="color: #ffc66d;">run</span>(<span style="color: #cc7832;">array</span> <span style="color: #bbb529;">$argv</span>): <span style="color: #cc7832;">int</span>
    {
        <span style="color: #cc7832;">return</span> <span style="color: #bbb529;">$this</span>->console->run();
    }
}</code></pre>
                </div>
            </div>

            <h2 class="text-2xl font-semibold mb-3">6. Arguments and Options</h2>
            <p class="mb-4">
                You can add arguments and options to your custom commands to make them more flexible and powerful. Here's an example of how to define and use arguments and options:
            </p>

            <div class="bg-gray-900 rounded-lg shadow-lg overflow-hidden mb-4">
                <div class="flex items-center bg-gray-800 px-4 py-2 border-b border-gray-700">
                    <div class="flex space-x-2">
                        <div class="w-3 h-3 rounded-full bg-red-500"></div>
                        <div class="w-3 h-3 rounded-full bg-yellow-500"></div>
                        <div class="w-3 h-3 rounded-full bg-green-500"></div>
                    </div>
                    <span class="ml-4 text-gray-400 text-sm">CustomCommand.php</span>
                </div>
                <div class="flex">
                    <div class="py-4 px-2 text-right bg-gray-800 text-gray-500 select-none" aria-hidden="true" style="min-width: 2.5rem;">
                        <div>1</div>
                        <div>2</div>
                        <div>3</div>
                        <div>4</div>
                        <div>5</div>
                        <div>6</div>
                        <div>7</div>
                        <div>8</div>
                        <div>9</div>
                        <div>10</div>
                        <div>11</div>
                        <div>12</div>
                        <div>13</div>
                        <div>14</div>
                        <div>15</div>
                        <div>16</div>
                        <div>17</div>
                        <div>18</div>
                    </div>
                    <pre class="language-php flex-grow p-4 text-gray-300 overflow-x-auto" style="background-color: #2b2b2b;">
<code><span style="color: #cc7832;">protected function</span> <span style="color: #ffc66d;">configure</span>()
{
    <span style="color: #bbb529;">$this</span>
        ->setName(<span style="color: #6a8759;">'app:greet'</span>)
        ->setDescription(<span style="color: #6a8759;">'Greet someone'</span>)
        ->addArgument(<span style="color: #6a8759;">'name'</span>, InputArgument::REQUIRED, <span style="color: #6a8759;">'Who do you want to greet?'</span>)
        ->addOption(<span style="color: #6a8759;">'yell'</span>, <span style="color: #6a8759;">'y'</span>, InputOption::VALUE_NONE, <span style="color: #6a8759;">'Yell in uppercase letters'</span>);
}

<span style="color: #cc7832;">protected function</span> <span style="color: #ffc66d;">execute</span>(InputInterface <span style="color: #bbb529;">$input</span>, OutputInterface <span style="color: #bbb529;">$output</span>)
{
    <span style="color: #bbb529;">$name</span> = <span style="color: #bbb529;">$input</span>->getArgument(<span style="color: #6a8759;">'name'</span>);
    <span style="color: #bbb529;">$greeting</span> = <span style="color: #6a8759;">"Hello, </span><span style="color: #bbb529;">$name</span><span style="color: #6a8759;">!"</span>;

    <span style="color: #cc7832;">if</span> (<span style="color: #bbb529;">$input</span>->getOption(<span style="color: #6a8759;">'yell'</span>)) {
        <span style="color: #bbb529;">$greeting</span> = strtoupper(<span style="color: #bbb529;">$greeting</span>);
    }

    <span style="color: #bbb529;">$output</span>->writeln(<span style="color: #bbb529;">$greeting</span>);
    <span style="color: #cc7832;">return</span> Command::SUCCESS;
}</code></pre>
                </div>
            </div>

            <h2 class="text-2xl font-semibold mb-3">7. Output Formatting</h2>
            <p class="mb-4">
                Yabasi CLI commands support colorized and formatted output to enhance readability and user experience. Here's how you can use various output styles:
            </p>

            <div class="bg-gray-900 rounded-lg shadow-lg overflow-hidden mb-4">
                <div class="flex items-center bg-gray-800 px-4 py-2 border-b border-gray-700">
                    <div class="flex space-x-2">
                        <div class="w-3 h-3 rounded-full bg-red-500"></div>
                        <div class="w-3 h-3 rounded-full bg-yellow-500"></div>
                        <div class="w-3 h-3 rounded-full bg-green-500"></div>
                    </div>
                    <span class="ml-4 text-gray-400 text-sm">FormattedOutputCommand.php</span>
                </div>
                <div class="flex">
                    <div class="py-4 px-2 text-right bg-gray-800 text-gray-500 select-none" aria-hidden="true" style="min-width: 2.5rem;">
                        <div>1</div>
                        <div>2</div>
                        <div>3</div>
                        <div>4</div>
                        <div>5</div>
                        <div>6</div>
                        <div>7</div>
                        <div>8</div>
                        <div>9</div>
                    </div>
                    <pre class="language-php flex-grow p-4 text-gray-300 overflow-x-auto" style="background-color: #2b2b2b;">
<code><span style="color: #cc7832;">protected function</span> <span style="color: #ffc66d;">execute</span>(InputInterface <span style="color: #bbb529;">$input</span>, OutputInterface <span style="color: #bbb529;">$output</span>)
{
    <span style="color: #bbb529;">$output</span>->writeln(<span style="color: #6a8759;">'&lt;info&gt;This is a success message&lt;/info&gt;'</span>);
    <span style="color: #bbb529;">$output</span>->writeln(<span style="color: #6a8759;">'&lt;comment&gt;This is a comment&lt;/comment&gt;'</span>);
    <span style="color: #bbb529;">$output</span>->writeln(<span style="color: #6a8759;">'&lt;question&gt;This is a question&lt;/question&gt;'</span>);
    <span style="color: #bbb529;">$output</span>->writeln(<span style="color: #6a8759;">'&lt;error&gt;This is an error&lt;/error&gt;'</span>);

    <span style="color: #cc7832;">return</span> Command::SUCCESS;
}</code></pre>
                </div>
            </div>

            <h2 class="text-2xl font-semibold mb-3">8. Interactive Commands</h2>
            <p class="mb-4">
                You can create interactive commands that ask for user input or confirmation. Here's an example:
            </p>

            <div class="bg-gray-900 rounded-lg shadow-lg overflow-hidden mb-4">
                <div class="flex items-center bg-gray-800 px-4 py-2 border-b border-gray-700">
                    <div class="flex space-x-2">
                        <div class="w-3 h-3 rounded-full bg-red-500"></div>
                        <div class="w-3 h-3 rounded-full bg-yellow-500"></div>
                        <div class="w-3 h-3 rounded-full bg-green-500"></div>
                    </div>
                    <span class="ml-4 text-gray-400 text-sm">InteractiveCommand.php</span>
                </div>
                <div class="flex">
                    <div class="py-4 px-2 text-right bg-gray-800 text-gray-500 select-none" aria-hidden="true" style="min-width: 2.5rem;">
                        <div>1</div>
                        <div>2</div>
                        <div>3</div>
                        <div>4</div>
                        <div>5</div>
                        <div>6</div>
                        <div>7</div>
                        <div>8</div>
                        <div>9</div>
                        <div>10</div>
                        <div>11</div>
                        <div>12</div>
                    </div>
                    <pre class="language-php flex-grow p-4 text-gray-300 overflow-x-auto" style="background-color: #2b2b2b;">
<code><span style="color: #cc7832;">protected function</span> <span style="color: #ffc66d;">execute</span>(InputInterface <span style="color: #bbb529;">$input</span>, OutputInterface <span style="color: #bbb529;">$output</span>)
{
    <span style="color: #bbb529;">$helper</span> = <span style="color: #bbb529;">$this</span>->getHelper(<span style="color: #6a8759;">'question'</span>);
    <span style="color: #bbb529;">$question</span> = <span style="color: #cc7832;">new</span> Question(<span style="color: #6a8759;">'Please enter your name: '</span>, <span style="color: #6a8759;">'User'</span>);
    <span style="color: #bbb529;">$name</span> = <span style="color: #bbb529;">$helper</span>->ask(<span style="color: #bbb529;">$input</span>, <span style="color: #bbb529;">$output</span>, <span style="color: #bbb529;">$question</span>);

    <span style="color: #bbb529;">$question</span> = <span style="color: #cc7832;">new</span> ConfirmationQuestion(<span style="color: #6a8759;">'Do you want to continue? (y/n) '</span>, <span style="color: #cc7832;">false</span>);
    <span style="color: #cc7832;">if</span> (!<span style="color: #bbb529;">$helper</span>->ask(<span style="color: #bbb529;">$input</span>, <span style="color: #bbb529;">$output</span>, <span style="color: #bbb529;">$question</span>)) {
        <span style="color: #cc7832;">return</span> Command::SUCCESS;
    }

    <span style="color: #bbb529;">$output</span>->writeln(<span style="color: #6a8759;">"Hello, </span><span style="color: #bbb529;">$name</span><span style="color: #6a8759;">! You chose to continue."</span>);
    <span style="color: #cc7832;">return</span> Command::SUCCESS;
}</code></pre>
                </div>
            </div>

            <h2 class="text-2xl font-semibold mb-3">9. Help and Documentation</h2>
            <p class="mb-4">
                Yabasi automatically generates help documentation for your commands based on the descriptions and configurations you provide. You can view help for a command by running:
            </p>

            <div class="bg-gray-900 rounded-lg p-4 mb-4 shadow-md relative">
                <button onclick="copyCode(this)" class="absolute top-2 right-2 text-gray-400 hover:text-white focus:outline-none">
                    <i class="fas fa-copy"></i>
                </button>
                <code>
                    <span class="text-purple-400">php</span>
                    <span class="text-green-400">yabasi</span>
                    <span class="text-blue-400">command:name</span>
                    <span class="text-yellow-400">--help</span>
                </code>
            </div>

            <p class="mb-4">
                To provide more detailed help for your custom commands, you can override the <code>configure()</code> method:
            </p>

            <div class="bg-gray-900 rounded-lg shadow-lg overflow-hidden mb-4">
                <div class="flex items-center bg-gray-800 px-4 py-2 border-b border-gray-700">
                    <div class="flex space-x-2">
                        <div class="w-3 h-3 rounded-full bg-red-500"></div>
                        <div class="w-3 h-3 rounded-full bg-yellow-500"></div>
                        <div class="w-3 h-3 rounded-full bg-green-500"></div>
                    </div>
                    <span class="ml-4 text-gray-400 text-sm">CustomCommand.php</span>
                </div>
                <div class="flex">
                    <div class="py-4 px-2 text-right bg-gray-800 text-gray-500 select-none" aria-hidden="true" style="min-width: 2.5rem;">
                        <div>1</div>
                        <div>2</div>
                        <div>3</div>
                        <div>4</div>
                        <div>5</div>
                        <div>6</div>
                        <div>7</div>
                        <div>8</div>
                        <div>9</div>
                        <div>10</div>
                    </div>
                    <pre class="language-php flex-grow p-4 text-gray-300 overflow-x-auto" style="background-color: #2b2b2b;">
<code><span style="color: #cc7832;">protected function</span> <span style="color: #ffc66d;">configure</span>()
{
    <span style="color: #bbb529;">$this</span>
        ->setName(<span style="color: #6a8759;">'app:custom-command'</span>)
        ->setDescription(<span style="color: #6a8759;">'A custom command description'</span>)
        ->setHelp(<span style="color: #6a8759;">'This command allows you to...'</span>)
        ->addArgument(<span style="color: #6a8759;">'name'</span>, InputArgument::REQUIRED, <span style="color: #6a8759;">'Name description'</span>)
        ->addOption(<span style="color: #6a8759;">'option'</span>, <span style="color: #cc7832;">null</span>, InputOption::VALUE_NONE, <span style="color: #6a8759;">'Option description'</span>)
    ;
}</code></pre>
                </div>
            </div>

            <h2 class="text-2xl font-semibold mb-3">10. Best Practices</h2>
            <p class="mb-4">
                When writing CLI commands for Yabasi, consider the following best practices:
            </p>

            <ul class="list-disc list-inside mb-4">
                <li>Keep commands focused on a single task</li>
                <li>Use meaningful names for your commands, arguments, and options</li>
                <li>Provide clear and concise descriptions for your commands and their parameters</li>
                <li>Use input validation to prevent errors</li>
                <li>Implement proper error handling and provide informative error messages</li>
                <li>Use output formatting to improve readability</li>
                <li>For long-running commands, consider adding progress indicators</li>
                <li>Write unit tests for your commands to ensure they work as expected</li>
            </ul>

            <h3 class="text-xl font-semibold mb-2">Example: Progress Bar</h3>
            <p class="mb-4">
                For long-running tasks, you can use a progress bar to keep the user informed:
            </p>

            <div class="bg-gray-900 rounded-lg shadow-lg overflow-hidden mb-4">
                <div class="flex items-center bg-gray-800 px-4 py-2 border-b border-gray-700">
                    <div class="flex space-x-2">
                        <div class="w-3 h-3 rounded-full bg-red-500"></div>
                        <div class="w-3 h-3 rounded-full bg-yellow-500"></div>
                        <div class="w-3 h-3 rounded-full bg-green-500"></div>
                    </div>
                    <span class="ml-4 text-gray-400 text-sm">LongRunningCommand.php</span>
                </div>
                <div class="flex">
                    <div class="py-4 px-2 text-right bg-gray-800 text-gray-500 select-none" aria-hidden="true" style="min-width: 2.5rem;">
                        <div>1</div>
                        <div>2</div>
                        <div>3</div>
                        <div>4</div>
                        <div>5</div>
                        <div>6</div>
                        <div>7</div>
                        <div>8</div>
                        <div>9</div>
                        <div>10</div>
                        <div>11</div>
                    </div>
                    <pre class="language-php flex-grow p-4 text-gray-300 overflow-x-auto" style="background-color: #2b2b2b;">
<code><span style="color: #cc7832;">use</span> Symfony\Component\Console\Helper\ProgressBar;

<span style="color: #cc7832;">protected function</span> <span style="color: #ffc66d;">execute</span>(InputInterface <span style="color: #bbb529;">$input</span>, OutputInterface <span style="color: #bbb529;">$output</span>)
{
    <span style="color: #bbb529;">$progressBar</span> = <span style="color: #cc7832;">new</span> ProgressBar(<span style="color: #bbb529;">$output</span>, <span style="color: #6897bb;">100</span>);
    <span style="color: #bbb529;">$progressBar</span>->start();

    <span style="color: #cc7832;">for</span> (<span style="color: #bbb529;">$i</span> = <span style="color: #6897bb;">0</span>; <span style="color: #bbb529;">$i</span> < <span style="color: #6897bb;">100</span>; <span style="color: #bbb529;">$i</span>++) {
        <span style="color: #808080;">// ... do some work here</span>
        <span style="color: #bbb529;">$progressBar</span>->advance();
    }

    <span style="color: #bbb529;">$progressBar</span>->finish();
    <span style="color: #cc7832;">return</span> Command::SUCCESS;
}</code></pre>
                </div>
            </div>

            <p class="mt-4">
                By following these best practices and utilizing the features provided by Yabasi's CLI tools, you can create powerful, user-friendly command-line interfaces for your application. These tools can significantly improve your development workflow and provide valuable utilities for managing your Yabasi projects.
            </p>
        </section>

        <section id="testing" class="mb-12">
            <h1 class="text-4xl font-bold mb-6">Testing</h1>

            <p class="mb-4">
                Yabasi framework provides a robust testing infrastructure to ensure the reliability and stability of your applications. It uses PHPUnit as the testing framework, allowing you to write unit tests, integration tests, and feature tests with ease.
            </p>

            <h2 class="text-2xl font-semibold mb-3">Setting Up the Testing Environment</h2>
            <p class="mb-4">
                Yabasi comes with a pre-configured <code>phpunit.xml</code> file that defines test suites and environment variables for testing.
            </p>

            <div class="bg-gray-900 rounded-lg shadow-lg overflow-hidden mb-4">
                <div class="flex items-center bg-gray-800 px-4 py-2 border-b border-gray-700">
                    <div class="flex space-x-2">
                        <div class="w-3 h-3 rounded-full bg-red-500"></div>
                        <div class="w-3 h-3 rounded-full bg-yellow-500"></div>
                        <div class="w-3 h-3 rounded-full bg-green-500"></div>
                    </div>
                    <span class="ml-4 text-gray-400 text-sm">phpunit.xml</span>
                </div>
                <div class="flex">
                    <div class="py-4 px-2 text-right bg-gray-800 text-gray-500 select-none" aria-hidden="true" style="min-width: 2.5rem;">
                        <div>1</div>
                        <div>2</div>
                        <div>3</div>
                        <div>4</div>
                        <div>5</div>
                        <div>6</div>
                        <div>7</div>
                        <div>8</div>
                        <div>9</div>
                        <div>10</div>
                        <div>11</div>
                        <div>12</div>
                        <div>13</div>
                        <div>14</div>
                        <div>15</div>
                    </div>
                    <pre class="language-xml flex-grow p-4 text-gray-300 overflow-x-auto" style="background-color: #2b2b2b;">
<code><span style="color: #ffc66d;">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span>
<span style="color: #e8bf6a;">&lt;phpunit</span> <span style="color: #bababa;">bootstrap=</span><span style="color: #a5c261;">"../vendor/autoload.php"</span>
         <span style="color: #bababa;">colors=</span><span style="color: #a5c261;">"true"</span>
         <span style="color: #bababa;">verbose=</span><span style="color: #a5c261;">"true"</span>
         <span style="color: #bababa;">stopOnFailure=</span><span style="color: #a5c261;">"false"</span><span style="color: #e8bf6a;">&gt;</span>
    <span style="color: #e8bf6a;">&lt;testsuites&gt;</span>
        <span style="color: #e8bf6a;">&lt;testsuite</span> <span style="color: #bababa;">name=</span><span style="color: #a5c261;">"Unit"</span><span style="color: #e8bf6a;">&gt;</span>
            <span style="color: #e8bf6a;">&lt;directory</span> <span style="color: #bababa;">suffix=</span><span style="color: #a5c261;">"Test.php"</span><span style="color: #e8bf6a;">&gt;</span>./Unit<span style="color: #e8bf6a;">&lt;/directory&gt;</span>
        <span style="color: #e8bf6a;">&lt;/testsuite&gt;</span>
        <span style="color: #e8bf6a;">&lt;testsuite</span> <span style="color: #bababa;">name=</span><span style="color: #a5c261;">"Integration"</span><span style="color: #e8bf6a;">&gt;</span>
            <span style="color: #e8bf6a;">&lt;directory</span> <span style="color: #bababa;">suffix=</span><span style="color: #a5c261;">"Test.php"</span><span style="color: #e8bf6a;">&gt;</span>./Integration<span style="color: #e8bf6a;">&lt;/directory&gt;</span>
        <span style="color: #e8bf6a;">&lt;/testsuite&gt;</span>
    <span style="color: #e8bf6a;">&lt;/testsuites&gt;</span>
    <span style="color: #e8bf6a;">&lt;php&gt;</span>
        <span style="color: #e8bf6a;">&lt;env</span> <span style="color: #bababa;">name=</span><span style="color: #a5c261;">"APP_ENV"</span> <span style="color: #bababa;">value=</span><span style="color: #a5c261;">"testing"</span><span style="color: #e8bf6a;">/&gt;</span>
    <span style="color: #e8bf6a;">&lt;/php&gt;</span>
<span style="color: #e8bf6a;">&lt;/phpunit&gt;</span></code></pre>
                </div>
            </div>

            <h2 class="text-2xl font-semibold mb-3">Base Test Case</h2>
            <p class="mb-4">
                Yabasi provides a base test case class that sets up the testing environment and offers helpful utility methods for your tests.
            </p>

            <div class="bg-gray-900 rounded-lg shadow-lg overflow-hidden mb-4">
                <div class="flex items-center bg-gray-800 px-4 py-2 border-b border-gray-700">
                    <div class="flex space-x-2">
                        <div class="w-3 h-3 rounded-full bg-red-500"></div>
                        <div class="w-3 h-3 rounded-full bg-yellow-500"></div>
                        <div class="w-3 h-3 rounded-full bg-green-500"></div>
                    </div>
                    <span class="ml-4 text-gray-400 text-sm">YabasiTestCase.php</span>
                </div>
                <div class="flex">
                    <div class="py-4 px-2 text-right bg-gray-800 text-gray-500 select-none" aria-hidden="true" style="min-width: 2.5rem;">
                        <div>1</div>
                        <div>2</div>
                        <div>3</div>
                        <div>4</div>
                        <div>5</div>
                        <div>6</div>
                        <div>7</div>
                        <div>8</div>
                        <div>9</div>
                        <div>10</div>
                        <div>11</div>
                        <div>12</div>
                        <div>13</div>
                        <div>14</div>
                        <div>15</div>
                        <div>16</div>
                        <div>17</div>
                        <div>18</div>
                        <div>19</div>
                        <div>20</div>
                        <div>21</div>
                        <div>22</div>
                        <div>23</div>
                    </div>
                    <pre class="language-php flex-grow p-4 text-gray-300 overflow-x-auto" style="background-color: #2b2b2b;">
<code><span style="color: #cc7832;">namespace</span> Yabasi\Tests;

<span style="color: #cc7832;">use</span> PHPUnit\Framework\TestCase;
<span style="color: #cc7832;">use</span> Yabasi\Application;
<span style="color: #cc7832;">use</span> Yabasi\Container\Container;

<span style="color: #cc7832;">class</span> <span style="color: #ffc66d;">YabasiTestCase</span> <span style="color: #cc7832;">extends</span> TestCase
{
    <span style="color: #cc7832;">protected</span> <span style="color: #bbb529;">$app</span>;
    <span style="color: #cc7832;">protected</span> <span style="color: #bbb529;">$container</span>;

    <span style="color: #cc7832;">protected function</span> <span style="color: #ffc66d;">setUp</span>(): <span style="color: #cc7832;">void</span>
    {
        parent::setUp();
        <span style="color: #bbb529;">$this</span>->container = <span style="color: #cc7832;">new</span> Container();
        <span style="color: #bbb529;">$this</span>->app = <span style="color: #cc7832;">new</span> Application(<span style="color: #bbb529;">$this</span>->container);
    }

    <span style="color: #cc7832;">protected function</span> <span style="color: #ffc66d;">tearDown</span>(): <span style="color: #cc7832;">void</span>
    {
        <span style="color: #bbb529;">$this</span>->app = <span style="color: #cc7832;">null</span>;
        <span style="color: #bbb529;">$this</span>->container = <span style="color: #cc7832;">null</span>;
        parent::tearDown();
    }
}</code></pre>
                </div>
            </div>

            <h2 class="text-2xl font-semibold mb-3">Writing Unit Tests</h2>
            <p class="mb-4">
                Unit tests are used to test the smallest parts of your application in isolation. Here's an example of a simple unit test:
            </p>

            <div class="bg-gray-900 rounded-lg shadow-lg overflow-hidden mb-4">
                <div class="flex items-center bg-gray-800 px-4 py-2 border-b border-gray-700">
                    <div class="flex space-x-2">
                        <div class="w-3 h-3 rounded-full bg-red-500"></div>
                        <div class="w-3 h-3 rounded-full bg-yellow-500"></div>
                        <div class="w-3 h-3 rounded-full bg-green-500"></div>
                    </div>
                    <span class="ml-4 text-gray-400 text-sm">ExampleTest.php</span>
                </div>
                <div class="flex">
                    <div class="py-4 px-2 text-right bg-gray-800 text-gray-500 select-none" aria-hidden="true" style="min-width: 2.5rem;">
                        <div>1</div>
                        <div>2</div>
                        <div>3</div>
                        <div>4</div>
                        <div>5</div>
                        <div>6</div>
                        <div>7</div>
                        <div>8</div>
                        <div>9</div>
                        <div>10</div>
                        <div>11</div>
                        <div>12</div>
                        <div>13</div>
                        <div>14</div>
                        <div>15</div>
                        <div>16</div>
                    </div>
                    <pre class="language-php flex-grow p-4 text-gray-300 overflow-x-auto" style="background-color: #2b2b2b;">
<code><span style="color: #cc7832;">namespace</span> Yabasi\Tests\Unit;

<span style="color: #cc7832;">use</span> Yabasi\Application;
<span style="color: #cc7832;">use</span> Yabasi\Tests\YabasiTestCase;

<span style="color: #cc7832;">class</span> <span style="color: #ffc66d;">ExampleTest</span> <span style="color: #cc7832;">extends</span> YabasiTestCase
{
    <span style="color: #cc7832;">public function</span> <span style="color: #ffc66d;">testExample</span>()
    {
        <span style="color: #bbb529;">$this</span>->assertTrue(<span style="color: #cc7832;">true</span>);
    }

    <span style="color: #cc7832;">public function</span> <span style="color: #ffc66d;">testApplicationInstance</span>()
    {
        <span style="color: #bbb529;">$this</span>->assertInstanceOf(Application::<span style="color: #cc7832;">class</span>, <span style="color: #bbb529;">$this</span>->app);
    }
}</code></pre>
                </div>
            </div>

            <h2 class="text-2xl font-semibold mb-3">Integration Tests</h2>
            <p class="mb-4">
                Integration tests are used to test how different components of your application work together. Here's an example of a router integration test:
            </p>

            <div class="bg-gray-900 rounded-lg shadow-lg overflow-hidden mb-4">
                <div class="flex items-center bg-gray-800 px-4 py-2 border-b border-gray-700">
                    <div class="flex space-x-2">
                        <div class="w-3 h-3 rounded-full bg-red-500"></div>
                        <div class="w-3 h-3 rounded-full bg-yellow-500"></div>
                        <div class="w-3 h-3 rounded-full bg-green-500"></div>
                    </div>
                    <span class="ml-4 text-gray-400 text-sm">RouterTest.php</span>
                </div>
                <div class="flex">
                    <div class="py-4 px-2 text-right bg-gray-800 text-gray-500 select-none" aria-hidden="true" style="min-width: 2.5rem;">
                        <div>1</div>
                        <div>2</div>
                        <div>3</div>
                        <div>4</div>
                        <div>5</div>
                        <div>6</div>
                        <div>7</div>
                        <div>8</div>
                        <div>9</div>
                        <div>10</div>
                        <div>11</div>
                        <div>12</div>
                        <div>13</div>
                        <div>14</div>
                        <div>15</div>
                        <div>16</div>
                        <div>17</div>
                        <div>18</div>
                        <div>19</div>
                        <div>20</div>
                        <div>21</div>
                        <div>22</div>
                        <div>23</div>
                        <div>24</div>
                        <div>25</div>
                        <div>26</div>
                        <div>27</div>
                        <div>28</div>
                    </div>
                    <pre class="language-php flex-grow p-4 text-gray-300 overflow-x-auto" style="background-color: #2b2b2b;">
<code><span style="color: #cc7832;">namespace</span> Yabasi\Tests\Integration;

<span style="color: #cc7832;">use</span> Yabasi\Http\Request;
<span style="color: #cc7832;">use</span> Yabasi\Routing\Router;
<span style="color: #cc7832;">use</span> Yabasi\Tests\YabasiTestCase;

<span style="color: #cc7832;">class</span> <span style="color: #ffc66d;">RouterTest</span> <span style="color: #cc7832;">extends</span> YabasiTestCase
{
    <span style="color: #cc7832;">public function</span> <span style="color: #ffc66d;">testBasicRouting</span>()
    {
        <span style="color: #bbb529;">$router</span> = <span style="color: #bbb529;">$this</span>->app->make(Router::<span style="color: #cc7832;">class</span>);
        <span style="color: #bbb529;">$router</span>->get(<span style="color: #6a8759;">'/test'</span>, <span style="color: #cc7832;">function</span>() {
            <span style="color: #cc7832;">return</span> <span style="color: #6a8759;">'Hello Test'</span>;
        });

        <span style="color: #bbb529;">$request</span> = <span style="color: #bbb529;">$this</span>->createRequest(<span style="color: #6a8759;">'/test'</span>, <span style="color: #6a8759;">'GET'</span>);
        <span style="color: #bbb529;">$response</span> = <span style="color: #bbb529;">$router</span>->dispatch(<span style="color: #bbb529;">$request</span>);

        <span style="color: #bbb529;">$this</span>->assertEquals(<span style="color: #6a8759;">'Hello Test'</span>, <span style="color: #bbb529;">$response</span>->getContent());
    }

    <span style="color: #cc7832;">private function</span> <span style="color: #ffc66d;">createRequest</span>(<span style="color: #bbb529;">$uri</span>, <span style="color: #bbb529;">$method</span>, <span style="color: #bbb529;">$parameters</span> = [], <span style="color: #bbb529;">$cookies</span> = [], <span style="color: #bbb529;">$files</span> = [], <span style="color: #bbb529;">$server</span> = [])
    {
        <span style="color: #808080;">// Implementation of createRequest method</span>
    }
}</code></pre>
                </div>
            </div>

            <h2 class="text-2xl font-semibold mb-3">Running Tests</h2>
            <p class="mb-4">
                To run your tests, use the PHPUnit command from your project root:
            </p>

            <div class="bg-gray-900 rounded-lg p-4 mb-4 shadow-md relative">
                <button onclick="copyCode(this)" class="absolute top-2 right-2 text-gray-400 hover:text-white focus:outline-none">
                    <i class="fas fa-copy"></i>
                </button>
                <code class="font-mono text-white">
                    <span class="text-green-400">./vendor/bin/phpunit</span>
                </code>
            </div>

            <p class="mb-4">
                You can also run specific test suites or individual test files:
            </p>

            <div class="bg-gray-900 rounded-lg p-4 mb-4 shadow-md relative">
                <button onclick="copyCode(this)" class="absolute top-2 right-2 text-gray-400 hover:text-white focus:outline-none">
                    <i class="fas fa-copy"></i>
                </button>
                <code class="font-mono text-white">
                    <span class="text-green-400">./vendor/bin/phpunit</span>
                    <span class="text-yellow-400">--testsuite Unit</span>
                </code>
            </div>

            <div class="bg-gray-900 rounded-lg p-4 mb-4 shadow-md relative">
                <button onclick="copyCode(this)" class="absolute top-2 right-2 text-gray-400 hover:text-white focus:outline-none">
                    <i class="fas fa-copy"></i>
                </button>

                <code class="font-mono text-white">
                    <span class="text-green-400">./vendor/bin/phpunit</span>
                    <span class="text-yellow-400">tests/Unit/ExampleTest.php</span>
                </code>
            </div>

            <h2 class="text-2xl font-semibold mb-3">Best Practices</h2>
            <ul class="list-disc list-inside mb-4">
                <li>Write tests for all new features and bug fixes</li>
                <li>Aim for high test coverage, but focus on critical paths</li>
                <li>Keep tests fast and independent of each other</li>
                <li>Use descriptive test method names</li>
                <li>Follow the Arrange-Act-Assert (AAA) pattern in your tests</li>
                <li>Use data providers for testing multiple scenarios</li>
                <li>Mock external dependencies to isolate the code being tested</li>
            </ul>

            <p class="mt-4">
                By following these testing practices and utilizing Yabasi's testing infrastructure, you can ensure the reliability and maintainability of your applications.
            </p>
        </section>

        <section id="events-listeners" class="mb-12">
            <h1 class="text-4xl font-bold mb-6">Events & Listeners</h1>

            <p class="mb-4">
                Yabasi framework provides a robust event system that allows you to easily implement and manage application events. This system helps in decoupling various aspects of your application, making it more maintainable and extensible.
            </p>

            <h2 class="text-2xl font-semibold mb-3">Event Dispatcher</h2>
            <p class="mb-4">
                The core of Yabasi's event system is the <code>EventDispatcher</code> class. It manages event registration and dispatching.
            </p>

            <div class="bg-gray-900 rounded-lg shadow-lg overflow-hidden mb-4">
                <div class="flex items-center bg-gray-800 px-4 py-2 border-b border-gray-700">
                    <div class="flex space-x-2">
                        <div class="w-3 h-3 rounded-full bg-red-500"></div>
                        <div class="w-3 h-3 rounded-full bg-yellow-500"></div>
                        <div class="w-3 h-3 rounded-full bg-green-500"></div>
                    </div>
                    <span class="ml-4 text-gray-400 text-sm">EventDispatcher.php</span>
                </div>
                <div class="flex">
                    <div class="py-4 px-2 text-right bg-gray-800 text-gray-500 select-none" aria-hidden="true" style="min-width: 2.5rem;">
                        <div>1</div>
                        <div>2</div>
                        <div>3</div>
                        <div>4</div>
                        <div>5</div>
                        <div>6</div>
                        <div>7</div>
                        <div>8</div>
                        <div>9</div>
                        <div>10</div>
                        <div>11</div>
                        <div>12</div>
                        <div>13</div>
                        <div>14</div>
                        <div>15</div>
                        <div>16</div>
                        <div>17</div>
                        <div>18</div>
                        <div>19</div>
                        <div>20</div>
                    </div>
                    <pre class="language-php flex-grow p-4 text-gray-300 overflow-x-auto" style="background-color: #2b2b2b;">
<code><span style="color: #cc7832;">namespace</span> Yabasi\Events;

<span style="color: #cc7832;">use</span> Closure;

<span style="color: #cc7832;">class</span> <span style="color: #ffc66d;">EventDispatcher</span>
{
    <span style="color: #cc7832;">protected</span> <span style="color: #cc7832;">array</span> <span style="color: #9876aa;">$listeners</span> = [];

    <span style="color: #cc7832;">public function</span> <span style="color: #ffc66d;">listen</span>(<span style="color: #cc7832;">string</span> <span style="color: #9876aa;">$eventName</span>, <span style="color: #9876aa;">$listener</span>): <span style="color: #cc7832;">void</span>
    {
        <span style="color: #bbb529;">$this</span>->listeners[<span style="color: #9876aa;">$eventName</span>][] = <span style="color: #9876aa;">$listener</span>;
    }

    <span style="color: #cc7832;">public function</span> <span style="color: #ffc66d;">dispatch</span>(Event <span style="color: #9876aa;">$event</span>): <span style="color: #cc7832;">void</span>
    {
        <span style="color: #9876aa;">$eventName</span> = <span style="color: #9876aa;">$event</span>->getName();
        <span style="color: #cc7832;">if</span> (isset(<span style="color: #bbb529;">$this</span>->listeners[<span style="color: #9876aa;">$eventName</span>])) {
            <span style="color: #cc7832;">foreach</span> (<span style="color: #bbb529;">$this</span>->listeners[<span style="color: #9876aa;">$eventName</span>] <span style="color: #cc7832;">as</span> <span style="color: #9876aa;">$listener</span>) {
                <span style="color: #cc7832;">if</span> (<span style="color: #9876aa;">$listener</span> <span style="color: #cc7832;">instanceof</span> Closure) {
                    <span style="color: #9876aa;">$listener</span>(<span style="color: #9876aa;">$event</span>);
                } <span style="color: #cc7832;">elseif</span> (<span style="color: #cc7832;">is_array</span>(<span style="color: #9876aa;">$listener</span>) <span style="color: #cc7832;">&&</span> <span style="color: #cc7832;">count</span>(<span style="color: #9876aa;">$listener</span>) == <span style="color: #6897bb;">2</span>) {
                    [<span style="color: #9876aa;">$class</span>, <span style="color: #9876aa;">$method</span>] = <span style="color: #9876aa;">$listener</span>;
                    <span style="color: #cc7832;">if</span> (<span style="color: #cc7832;">is_string</span>(<span style="color: #9876aa;">$class</span>)) {
                        <span style="color: #9876aa;">$class</span> = <span style="color: #cc7832;">new</span> <span style="color: #9876aa;">$class</span>();
                    }
                    <span style="color: #9876aa;">$class</span>-><span style="color: #9876aa;">$method</span>(<span style="color: #9876aa;">$event</span>);
                }
            }
        }
    }
}</code></pre>
                </div>
            </div>

            <h2 class="text-2xl font-semibold mb-3">Creating Events</h2>
            <p class="mb-4">
                Events in Yabasi are simple classes that extend the base <code>Event</code> class. They typically contain data relevant to the event.
            </p>

            <div class="bg-gray-900 rounded-lg shadow-lg overflow-hidden mb-4">
                <div class="flex items-center bg-gray-800 px-4 py-2 border-b border-gray-700">
                    <div class="flex space-x-2">
                        <div class="w-3 h-3 rounded-full bg-red-500"></div>
                        <div class="w-3 h-3 rounded-full bg-yellow-500"></div>
                        <div class="w-3 h-3 rounded-full bg-green-500"></div>
                    </div>
                    <span class="ml-4 text-gray-400 text-sm">UserRegisteredEvent.php</span>
                </div>
                <div class="flex">
                    <div class="py-4 px-2 text-right bg-gray-800 text-gray-500 select-none" aria-hidden="true" style="min-width: 2.5rem;">
                        <div>1</div>
                        <div>2</div>
                        <div>3</div>
                        <div>4</div>
                        <div>5</div>
                        <div>6</div>
                        <div>7</div>
                        <div>8</div>
                        <div>9</div>
                        <div>10</div>
                        <div>11</div>
                        <div>12</div>
                    </div>
                    <pre class="language-php flex-grow p-4 text-gray-300 overflow-x-auto" style="background-color: #2b2b2b;">
<code><span style="color: #cc7832;">namespace</span> App\Events;

<span style="color: #cc7832;">use</span> Yabasi\Events\Event;
<span style="color: #cc7832;">use</span> App\Models\User;

<span style="color: #cc7832;">class</span> <span style="color: #ffc66d;">UserRegisteredEvent</span> <span style="color: #cc7832;">extends</span> Event
{
    <span style="color: #cc7832;">public function</span> <span style="color: #ffc66d;">__construct</span>(<span style="color: #cc7832;">public</span> User <span style="color: #9876aa;">$user</span>)
    {
        parent::__construct(<span style="color: #6a8759;">'user.registered'</span>);
    }
}</code></pre>
                </div>
            </div>

            <h2 class="text-2xl font-semibold mb-3">Creating Listeners</h2>
            <p class="mb-4">
                Listeners are classes or closures that respond to specific events. They perform actions based on the event data.
            </p>

            <div class="bg-gray-900 rounded-lg shadow-lg overflow-hidden mb-4">
                <div class="flex items-center bg-gray-800 px-4 py-2 border-b border-gray-700">
                    <div class="flex space-x-2">
                        <div class="w-3 h-3 rounded-full bg-red-500"></div>
                        <div class="w-3 h-3 rounded-full bg-yellow-500"></div>
                        <div class="w-3 h-3 rounded-full bg-green-500"></div>
                    </div>
                    <span class="ml-4 text-gray-400 text-sm">SendWelcomeEmail.php</span>
                </div>
                <div class="flex">
                    <div class="py-4 px-2 text-right bg-gray-800 text-gray-500 select-none" aria-hidden="true" style="min-width: 2.5rem;">
                        <div>1</div>
                        <div>2</div>
                        <div>3</div>
                        <div>4</div>
                        <div>5</div>
                        <div>6</div>
                        <div>7</div>
                        <div>8</div>
                        <div>9</div>
                        <div>10</div>
                        <div>11</div>
                    </div>
                    <pre class="language-php flex-grow p-4 text-gray-300 overflow-x-auto" style="background-color: #2b2b2b;">
<code><span style="color: #cc7832;">namespace</span> App\Listeners;

<span style="color: #cc7832;">use</span> App\Events\UserRegisteredEvent;

<span style="color: #cc7832;">class</span> <span style="color: #ffc66d;">SendWelcomeEmail</span>
{
    <span style="color: #cc7832;">public function</span> <span style="color: #ffc66d;">handle</span>(UserRegisteredEvent <span style="color: #9876aa;">$event</span>)
    {
        <span style="color: #808080;">// Send welcome email to $event->user</span>
    }
}</code></pre>
                </div>
            </div>

            <h2 class="text-2xl font-semibold mb-3">Registering Events and Listeners</h2>
            <p class="mb-4">
                You can register events and listeners in your service providers or anywhere you have access to the EventDispatcher.
            </p>

            <div class="bg-gray-900 rounded-lg shadow-lg overflow-hidden mb-4">
                <div class="flex items-center bg-gray-800 px-4 py-2 border-b border-gray-700">
                    <div class="flex space-x-2">
                        <div class="w-3 h-3 rounded-full bg-red-500"></div>
                        <div class="w-3 h-3 rounded-full bg-yellow-500"></div>
                        <div class="w-3 h-3 rounded-full bg-green-500"></div>
                    </div>
                    <span class="ml-4 text-gray-400 text-sm">EventServiceProvider.php</span>
                </div>
                <div class="flex">
                    <div class="py-4 px-2 text-right bg-gray-800 text-gray-500 select-none" aria-hidden="true" style="min-width: 2.5rem;">
                        <div>1</div>
                        <div>2</div>
                        <div>3</div>
                        <div>4</div>
                        <div>5</div>
                        <div>6</div>
                        <div>7</div>
                        <div>8</div>
                        <div>9</div>
                        <div>10</div>
                        <div>11</div>
                        <div>12</div>
                        <div>13</div>
                    </div>
                    <pre class="language-php flex-grow p-4 text-gray-300 overflow-x-auto" style="background-color: #2b2b2b;">
<code><span style="color: #cc7832;">namespace</span> App\Providers;

<span style="color: #cc7832;">use</span> Yabasi\Events\EventDispatcher;
<span style="color: #cc7832;">use</span> Yabasi\ServiceProvider\ServiceProvider;
<span style="color: #cc7832;">use</span> App\Events\UserRegisteredEvent;
<span style="color: #cc7832;">use</span> App\Listeners\SendWelcomeEmail;

<span style="color: #cc7832;">class</span> <span style="color: #ffc66d;">EventServiceProvider</span> <span style="color: #cc7832;">extends</span> ServiceProvider
{
    <span style="color: #cc7832;">public function</span> <span style="color: #ffc66d;">boot</span>(): <span style="color: #cc7832;">void</span>
    {
        <span style="color: #bbb529;">$this</span>->container->get(EventDispatcher::<span style="color: #cc7832;">class</span>)->listen(UserRegisteredEvent::<span style="color: #cc7832;">class</span>, [SendWelcomeEmail::<span style="color: #cc7832;">class</span>, <span style="color: #6a8759;">'handle'</span>]);
    }
}</code></pre>
                </div>
            </div>

            <h2 class="text-2xl font-semibold mb-3">Dispatching Events</h2>
            <p class="mb-4">
                To dispatch an event, you can use the EventDispatcher's dispatch method.
            </p>

            <div class="bg-gray-900 rounded-lg shadow-lg overflow-hidden mb-4">
                <div class="flex items-center bg-gray-800 px-4 py-2 border-b border-gray-700">
                    <div class="flex space-x-2">
                        <div class="w-3 h-3 rounded-full bg-red-500"></div>
                        <div class="w-3 h-3 rounded-full bg-yellow-500"></div>
                        <div class="w-3 h-3 rounded-full bg-green-500"></div>
                    </div>
                    <span class="ml-4 text-gray-400 text-sm">UserController.php</span>
                </div>
                <div class="flex">
                    <div class="py-4 px-2 text-right bg-gray-800 text-gray-500 select-none" aria-hidden="true" style="min-width: 2.5rem;">
                        <div>1</div>
                        <div>2</div>
                        <div>3</div>
                        <div>4</div>
                        <div>5</div>
                        <div>6</div>
                        <div>7</div>
                        <div>8</div>
                        <div>9</div>
                        <div>10</div>
                        <div>11</div>
                        <div>12</div>
                        <div>13</div>
                        <div>14</div>
                    </div>
                    <pre class="language-php flex-grow p-4 text-gray-300 overflow-x-auto" style="background-color: #2b2b2b;">
<code><span style="color: #cc7832;">use</span> App\Events\UserRegisteredEvent;
<span style="color: #cc7832;">use</span> Yabasi\Events\EventDispatcher;

<span style="color: #cc7832;">class</span> <span style="color: #ffc66d;">UserController</span>
{
    <span style="color: #cc7832;">public function</span> <span style="color: #ffc66d;">register</span>(Request <span style="color: #9876aa;">$request</span>, EventDispatcher <span style="color: #9876aa;">$eventDispatcher</span>)
    {
        <span style="color: #808080;">// User registration logic</span>
        <span style="color: #9876aa;">$user</span> = User::create(<span style="color: #9876aa;">$request</span>->all());

        <span style="color: #808080;">// Dispatch the event</span>
        <span style="color: #9876aa;">$eventDispatcher</span>->dispatch(<span style="color: #cc7832;">new</span> UserRegisteredEvent(<span style="color: #9876aa;">$user</span>));

        <span style="color: #cc7832;">return</span> response()->json([<span style="color: #6a8759;">'message'</span> => <span style="color: #6a8759;">'User registered successfully'</span>]);
    }
}</code></pre>
                </div>
            </div>

            <h2 class="text-2xl font-semibold mb-3">Event Subscribers</h2>
            <p class="mb-4">
                Event subscribers are classes that can listen to multiple events. They provide a more organized way to handle related events.
            </p>

            <div class="bg-gray-900 rounded-lg shadow-lg overflow-hidden mb-4">
                <div class="flex items-center bg-gray-800 px-4 py-2 border-b border-gray-700">
                    <div class="flex space-x-2">
                        <div class="w-3 h-3 rounded-full bg-red-500"></div>
                        <div class="w-3 h-3 rounded-full bg-yellow-500"></div>
                        <div class="w-3 h-3 rounded-full bg-green-500"></div>
                    </div>
                    <span class="ml-4 text-gray-400 text-sm">UserEventSubscriber.php</span>
                </div>
                <div class="flex">
                    <div class="py-4 px-2 text-right bg-gray-800 text-gray-500 select-none" aria-hidden="true" style="min-width: 2.5rem;">
                        <div>1</div>
                        <div>2</div>
                        <div>3</div>
                        <div>4</div>
                        <div>5</div>
                        <div>6</div>
                        <div>7</div>
                        <div>8</div>
                        <div>9</div>
                        <div>10</div>
                        <div>11</div>
                        <div>12</div>
                        <div>13</div>
                        <div>14</div>
                        <div>15</div>
                        <div>16</div>
                        <div>17</div>
                        <div>18</div>
                        <div>19</div>
                    </div>
                    <pre class="language-php flex-grow p-4 text-gray-300 overflow-x-auto" style="background-color: #2b2b2b;">
<code><span style="color: #cc7832;">namespace</span> App\Listeners;

<span style="color: #cc7832;">use</span> Yabasi\Events\EventDispatcher;

<span style="color: #cc7832;">class</span> <span style="color: #ffc66d;">UserEventSubscriber</span>
{
    <span style="color: #cc7832;">public function</span> <span style="color: #ffc66d;">subscribe</span>(EventDispatcher <span style="color: #9876aa;">$events</span>): <span style="color: #cc7832;">void</span>
    {
        <span style="color: #9876aa;">$events</span>->listen(
            <span style="color: #6a8759;">'user.registered'</span>,
            [<span style="color: #bbb529;">$this</span>, <span style="color: #6a8759;">'handleUserRegistered'</span>]
        );

        <span style="color: #9876aa;">$events</span>->listen(
            <span style="color: #6a8759;">'user.login'</span>,
            [<span style="color: #bbb529;">$this</span>, <span style="color: #6a8759;">'handleUserLogin'</span>]
        );
    }

    <span style="color: #cc7832;">public function</span> <span style="color: #ffc66d;">handleUserRegistered</span>(<span style="color: #9876aa;">$event</span>) { <span style="color: #808080;">/* ... */</span> }
    <span style="color: #cc7832;">public function</span> <span style="color: #ffc66d;">handleUserLogin</span>(<span style="color: #9876aa;">$event</span>) { <span style="color: #808080;">/* ... */</span> }
}</code></pre>
                </div>
            </div>

            <h2 class="text-2xl font-semibold mb-3">Best Practices</h2>
            <ul class="list-disc list-inside mb-4">
                <li>Keep events and listeners small and focused on a single responsibility.</li>
                <li>Use event names that clearly describe what happened (e.g., 'user.registered', 'order.shipped').</li>
                <li>Consider using event subscribers for closely related events.</li>
                <li>Avoid performing time-consuming tasks directly in listeners. Instead, dispatch jobs to be processed in the background.</li>
                <li>Use type-hinting in your listener methods to ensure you're working with the correct event type.</li>
            </ul>

            <p class="mt-4">
                By leveraging Yabasi's event system, you can create more modular and maintainable applications. Events allow you to decouple various parts of your application, making it easier to add new functionality without modifying existing code.
            </p>
        </section>

        <section id="queues-jobs" class="mb-12">
            <h1 class="text-4xl font-bold mb-6">Queues & Jobs</h1>

            <p class="mb-4">
                Yabasi provides a robust queue system for handling time-consuming tasks asynchronously. The queue system supports multiple drivers (with Redis as the default), job retries, batch processing, and event handling.
            </p>

            <h2 class="text-2xl font-semibold mb-3">Creating Jobs</h2>
            <p class="mb-4">To create a job, extend the base Job class:</p>

            <div class="bg-gray-900 rounded-lg shadow-lg overflow-hidden mb-4">
                <div class="flex items-center bg-gray-800 px-4 py-2 border-b border-gray-700">
                    <div class="flex space-x-2">
                        <div class="w-3 h-3 rounded-full bg-red-500"></div>
                        <div class="w-3 h-3 rounded-full bg-yellow-500"></div>
                        <div class="w-3 h-3 rounded-full bg-green-500"></div>
                    </div>
                    <span class="ml-4 text-gray-400 text-sm">ProcessVideoJob.php</span>
                </div>
                <div class="flex">
                    <div class="py-4 px-2 text-right bg-gray-800 text-gray-500 select-none" aria-hidden="true" style="min-width: 2.5rem;">
                        <div>1</div>
                        <div>2</div>
                        <div>3</div>
                        <div>4</div>
                        <div>5</div>
                        <div>6</div>
                        <div>7</div>
                        <div>8</div>
                        <div>9</div>
                        <div>10</div>
                        <div>11</div>
                        <div>12</div>
                        <div>13</div>
                        <div>14</div>
                        <div>15</div>
                    </div>
                    <pre class="language-php flex-grow p-4 text-gray-300 overflow-x-auto" style="background-color: #2b2b2b;">
<code><span style="color: #cc7832;">namespace</span> App\Jobs;

<span style="color: #cc7832;">use</span> Yabasi\Queue\Job;

<span style="color: #cc7832;">class</span> <span style="color: #ffc66d;">ProcessVideoJob</span> <span style="color: #cc7832;">extends</span> Job
{
    <span style="color: #cc7832;">protected</span> <span style="color: #ffc66d;">$maxAttempts</span> = 3;
    <span style="color: #cc7832;">protected</span> <span style="color: #ffc66d;">$delay</span> = 60;

    <span style="color: #cc7832;">public function</span> <span style="color: #ffc66d;">handle</span>()
    {
        <span style="color: #808080;">// Process video logic here</span>
        <span style="color: #cc7832;">$this</span>->setProgress(50);
        <span style="color: #808080;">// More processing...</span>
    }
}</code></pre>
                </div>
            </div>

            <h2 class="text-2xl font-semibold mb-3">Dispatching Jobs</h2>
            <p class="mb-4">You can dispatch jobs to the queue in several ways:</p>

            <div class="bg-gray-900 rounded-lg shadow-lg overflow-hidden mb-4">
                <div class="flex">
                    <div class="py-4 px-2 text-right bg-gray-800 text-gray-500 select-none" aria-hidden="true" style="min-width: 2.5rem;">
                        <div>1</div>
                        <div>2</div>
                        <div>3</div>
                        <div>4</div>
                        <div>5</div>
                        <div>6</div>
                        <div>7</div>
                        <div>8</div>
                    </div>
                    <pre class="language-php flex-grow p-4 text-gray-300 overflow-x-auto" style="background-color: #2b2b2b;">
<code><span style="color: #cc7832;">use</span> App\Jobs\ProcessVideoJob;

<span style="color: #808080;">// Dispatch immediately</span>
app()->get(<span style="color: #6a8759;">'queue'</span>)->push(<span style="color: #cc7832;">new</span> ProcessVideoJob($data));

<span style="color: #808080;">// Dispatch with delay</span>
app()->get(<span style="color: #6a8759;">'queue'</span>)->later(60, <span style="color: #cc7832;">new</span> ProcessVideoJob($data));</code></pre>
                </div>
            </div>

            <h2 class="text-2xl font-semibold mb-3">Job Configuration</h2>
            <p class="mb-4">Jobs can be configured with several options:</p>
            <ul class="list-disc list-inside mb-4">
                <li><code class="bg-gray-200 px-2 py-1 rounded">$maxAttempts</code>: Maximum number of retry attempts</li>
                <li><code class="bg-gray-200 px-2 py-1 rounded">$delay</code>: Delay between retry attempts in seconds</li>
                <li><code class="bg-gray-200 px-2 py-1 rounded">$progress</code>: Track job progress</li>
            </ul>

            <h2 class="text-2xl font-semibold mb-3">Running the Queue Worker</h2>
            <p class="mb-4">To process jobs, you need to run the queue worker:</p>

            <div class="bg-gray-900 rounded-lg shadow-md p-4 mb-4 relative">
                <button onclick="copyCode(this)" class="absolute top-2 right-2 text-gray-400 hover:text-white">
                    <i class="fas fa-copy"></i>
                </button>
                <code class="font-mono text-white">
                    <span class="text-blue-400">php</span>
                    <span class="text-yellow-400">yabasi</span>
                    <span class="text-green-400">queue:work</span>
                </code>
            </div>

            <h2 class="text-2xl font-semibold mb-3">Handling Failed Jobs</h2>
            <p class="mb-4">You can implement custom failure handling in your jobs:</p>

            <div class="bg-gray-900 rounded-lg shadow-lg overflow-hidden mb-4">
                <div class="flex">
                    <div class="py-4 px-2 text-right bg-gray-800 text-gray-500 select-none" aria-hidden="true" style="min-width: 2.5rem;">
                        <div>1</div>
                        <div>2</div>
                        <div>3</div>
                        <div>4</div>
                        <div>5</div>
                        <div>6</div>
                        <div>7</div>
                    </div>
                    <pre class="language-php flex-grow p-4 text-gray-300 overflow-x-auto" style="background-color: #2b2b2b;">
<code><span style="color: #cc7832;">public function</span> <span style="color: #ffc66d;">failed</span>(Exception $exception)
{
    <span style="color: #808080;">// Log the failure</span>
    <span style="color: #cc7832;">$this</span>->logger->error(<span style="color: #6a8759;">"Job failed: "</span> . $exception->getMessage());

    <span style="color: #808080;">// Notify or perform cleanup</span>
}</code></pre>
                </div>
            </div>

            <h2 class="text-2xl font-semibold mb-3">Monitoring Progress</h2>
            <p class="mb-4">Jobs can report their progress during execution:</p>

            <div class="bg-gray-900 rounded-lg shadow-lg overflow-hidden mb-4">
                <div class="flex">
                    <div class="py-4 px-2 text-right bg-gray-800 text-gray-500 select-none" aria-hidden="true" style="min-width: 2.5rem;">
                        <div>1</div>
                        <div>2</div>
                        <div>3</div>
                        <div>4</div>
                        <div>5</div>
                        <div>6</div>
                        <div>7</div>
                        <div>8</div>
                        <div>9</div>
                    </div>
                    <pre class="language-php flex-grow p-4 text-gray-300 overflow-x-auto" style="background-color: #2b2b2b;">
<code><span style="color: #cc7832;">public function</span> <span style="color: #ffc66d;">handle</span>()
{
    <span style="color: #cc7832;">$this</span>->setProgress(25);
    <span style="color: #808080;">// Process first stage...</span>

    <span style="color: #cc7832;">$this</span>->setProgress(50);
    <span style="color: #808080;">// Process second stage...</span>

    <span style="color: #cc7832;">$this</span>->setProgress(100);
}</code></pre>
                </div>
            </div>

            <h2 class="text-2xl font-semibold mb-3">Queue Events</h2>
            <p class="mb-4">The queue system dispatches various events that you can listen to:</p>
            <ul class="list-disc list-inside mb-4">
                <li>Job started</li>
                <li>Job processed</li>
                <li>Job failed</li>
                <li>Job retrying</li>
            </ul>

            <div class="bg-yellow-100 border-l-4 border-yellow-500 text-yellow-700 p-4 mb-4" role="alert">
                <h3 class="font-bold">Note</h3>
                <p>Make sure Redis is installed and properly configured in your <code>config/config.php</code> file before using the queue system.</p>
            </div>
        </section>

        <section id="api-development" class="mb-12">
            <h1 class="text-4xl font-bold mb-6">API Development</h1>

            <p class="mb-4">
                Yabasi provides a robust set of tools for building RESTful APIs, including versioning, rate limiting, CORS support, and standardized response formatting. The framework makes it easy to create secure and scalable APIs while following REST best practices.
            </p>

            <h2 class="text-2xl font-semibold mb-3">API Routes</h2>
            <p class="mb-4">Define API routes using the ApiRouter with automatic prefix and versioning:</p>

            <div class="bg-gray-900 rounded-lg shadow-lg overflow-hidden mb-4">
                <div class="flex items-center bg-gray-800 px-4 py-2 border-b border-gray-700">
                    <div class="flex space-x-2">
                        <div class="w-3 h-3 rounded-full bg-red-500"></div>
                        <div class="w-3 h-3 rounded-full bg-yellow-500"></div>
                        <div class="w-3 h-3 rounded-full bg-green-500"></div>
                    </div>
                    <span class="ml-4 text-gray-400 text-sm">routes/api.php</span>
                </div>
                <div class="flex">
                    <div class="py-4 px-2 text-right bg-gray-800 text-gray-500 select-none" aria-hidden="true" style="min-width: 2.5rem;">
                        <div>1</div>
                        <div>2</div>
                        <div>3</div>
                        <div>4</div>
                        <div>5</div>
                        <div>6</div>
                        <div>7</div>
                        <div>8</div>
                        <div>9</div>
                        <div>10</div>
                    </div>
                    <pre class="language-php flex-grow p-4 text-gray-300 overflow-x-auto" style="background-color: #2b2b2b;">
<code><span style="color: #cc7832;">use</span> Yabasi\Routing\ApiRouter;

<span style="color: #bbb529;">$apiRouter</span> = <span style="color: #cc7832;">new</span> ApiRouter(<span style="color: #bbb529;">$router</span>);

<span style="color: #bbb529;">$apiRouter</span>->setVersion(<span style="color: #6a8759;">'v1'</span>)->group([], <span style="color: #cc7832;">function</span>(<span style="color: #bbb529;">$router</span>) {
    <span style="color: #bbb529;">$router</span>->resource(<span style="color: #6a8759;">'users'</span>, <span style="color: #6a8759;">'UserApiController'</span>);
    <span style="color: #bbb529;">$router</span>->get(<span style="color: #6a8759;">'posts'</span>, <span style="color: #6a8759;">'PostApiController@index'</span>);
    <span style="color: #bbb529;">$router</span>->post(<span style="color: #6a8759;">'posts'</span>, <span style="color: #6a8759;">'PostApiController@store'</span>);
});</code></pre>
                </div>
            </div>

            <h2 class="text-2xl font-semibold mb-3">API Controllers</h2>
            <p class="mb-4">Extend the ApiController base class to get standardized response methods:</p>

            <div class="bg-gray-900 rounded-lg shadow-lg overflow-hidden mb-4">
                <div class="flex items-center bg-gray-800 px-4 py-2 border-b border-gray-700">
                    <div class="flex space-x-2">
                        <div class="w-3 h-3 rounded-full bg-red-500"></div>
                        <div class="w-3 h-3 rounded-full bg-yellow-500"></div>
                        <div class="w-3 h-3 rounded-full bg-green-500"></div>
                    </div>
                    <span class="ml-4 text-gray-400 text-sm">UserApiController.php</span>
                </div>
                <div class="flex">
                    <div class="py-4 px-2 text-right bg-gray-800 text-gray-500 select-none" aria-hidden="true" style="min-width: 2.5rem;">
                        <div>1</div>
                        <div>2</div>
                        <div>3</div>
                        <div>4</div>
                        <div>5</div>
                        <div>6</div>
                        <div>7</div>
                        <div>8</div>
                        <div>9</div>
                        <div>10</div>
                        <div>11</div>
                        <div>12</div>
                        <div>13</div>
                        <div>14</div>
                        <div>15</div>
                        <div>16</div>
                        <div>17</div>
                        <div>18</div>
                        <div>19</div>
                    </div>
                    <pre class="language-php flex-grow p-4 text-gray-300 overflow-x-auto" style="background-color: #2b2b2b;">
<code><span style="color: #cc7832;">namespace</span> App\Controllers;

<span style="color: #cc7832;">use</span> Yabasi\Http\Controllers\ApiController;
<span style="color: #cc7832;">use</span> Yabasi\Http\Request;

<span style="color: #cc7832;">class</span> <span style="color: #ffc66d;">UserApiController</span> <span style="color: #cc7832;">extends</span> ApiController
{
    <span style="color: #cc7832;">public function</span> <span style="color: #ffc66d;">index</span>()
    {
        <span style="color: #bbb529;">$users</span> = User::all();
        <span style="color: #cc7832;">return</span> <span style="color: #bbb529;">$this</span>->respondWithData(<span style="color: #bbb529;">$users</span>);
    }

    <span style="color: #cc7832;">public function</span> <span style="color: #ffc66d;">store</span>(Request <span style="color: #bbb529;">$request</span>)
    {
        <span style="color: #808080;">// Validation and creation logic</span>
        <span style="color: #cc7832;">return</span> <span style="color: #bbb529;">$this</span>->respondWithSuccess(<span style="color: #6a8759;">'User created successfully'</span>, 201);
    }
}</code></pre>
                </div>
            </div>

            <h2 class="text-2xl font-semibold mb-3">Rate Limiting</h2>
            <p class="mb-4">Protect your API endpoints with built-in rate limiting:</p>

            <div class="bg-gray-900 rounded-lg shadow-lg overflow-hidden mb-4">
                <div class="flex">
                    <div class="py-4 px-2 text-right bg-gray-800 text-gray-500 select-none" aria-hidden="true" style="min-width: 2.5rem;">
                        <div>1</div>
                        <div>2</div>
                        <div>3</div>
                        <div>4</div>
                        <div>5</div>
                        <div>6</div>
                        <div>7</div>
                    </div>
                    <pre class="language-php flex-grow p-4 text-gray-300 overflow-x-auto" style="background-color: #2b2b2b;">
<code><span style="color: #bbb529;">$apiRouter</span>->group([
    <span style="color: #6a8759;">'middleware'</span> => [
        RateLimitMiddleware::class
    ]
], <span style="color: #cc7832;">function</span>(<span style="color: #bbb529;">$router</span>) {
    <span style="color: #808080;">// Your rate-limited routes here</span>
});</code></pre>
                </div>
            </div>

            <h2 class="text-2xl font-semibold mb-3">API Versioning</h2>
            <p class="mb-4">API versioning is handled automatically through the URL or Accept header:</p>
            <ul class="list-disc list-inside mb-4">
                <li>URL-based: <code class="bg-gray-200 px-2 py-1 rounded">/api/v1/users</code></li>
                <li>Header-based: <code class="bg-gray-200 px-2 py-1 rounded">Accept-Version: v1</code></li>
            </ul>

            <h2 class="text-2xl font-semibold mb-3">CORS Configuration</h2>
            <p class="mb-4">Configure CORS for your API in the config/config.php file:</p>

            <div class="bg-gray-900 rounded-lg shadow-lg overflow-hidden mb-4">
                <div class="flex">
                    <div class="py-4 px-2 text-right bg-gray-800 text-gray-500 select-none" aria-hidden="true" style="min-width: 2.5rem;">
                        <div>1</div>
                        <div>2</div>
                        <div>3</div>
                        <div>4</div>
                        <div>5</div>
                        <div>6</div>
                        <div>7</div>
                        <div>8</div>
                    </div>
                    <pre class="language-php flex-grow p-4 text-gray-300 overflow-x-auto" style="background-color: #2b2b2b;">
<code><span style="color: #6a8759;">'cors'</span> => [
    <span style="color: #6a8759;">'allowed_origins'</span>   => [<span style="color: #6a8759;">'*'</span>],
    <span style="color: #6a8759;">'allowed_methods'</span>   => [<span style="color: #6a8759;">'*'</span>],
    <span style="color: #6a8759;">'allowed_headers'</span>   => [<span style="color: #6a8759;">'*'</span>],
    <span style="color: #6a8759;">'allow_credentials'</span> => <span style="color: #cc7832;">false</span>,
    <span style="color: #6a8759;">'max_age'</span>          => 0,
],</code></pre>
                </div>
            </div>

            <h2 class="text-2xl font-semibold mb-3">Standardized API Responses</h2>
            <p class="mb-4">ApiController provides methods for consistent response formatting:</p>

            <ul class="list-disc list-inside mb-4">
                <li><code class="bg-gray-200 px-2 py-1 rounded">respondWithData($data, $statusCode = 200)</code></li>
                <li><code class="bg-gray-200 px-2 py-1 rounded">respondWithError($message, $statusCode)</code></li>
                <li><code class="bg-gray-200 px-2 py-1 rounded">respondWithSuccess($message, $statusCode = 200)</code></li>
                <li><code class="bg-gray-200 px-2 py-1 rounded">respondWithValidationError($errors)</code></li>
                <li><code class="bg-gray-200 px-2 py-1 rounded">respondWithPaginatedData($data, $page, $perPage, $total)</code></li>
            </ul>

            <h2 class="text-2xl font-semibold mb-3">Response Examples</h2>
            <p class="mb-4">Example of standardized JSON responses:</p>

            <div class="bg-gray-900 rounded-lg shadow-lg overflow-hidden mb-4">
                <div class="flex">
                    <div class="py-4 px-2 text-right bg-gray-800 text-gray-500 select-none" aria-hidden="true" style="min-width: 2.5rem;">
                        <div>1</div>
                        <div>2</div>
                        <div>3</div>
                        <div>4</div>
                        <div>5</div>
                        <div>6</div>
                        <div>7</div>
                        <div>8</div>
                        <div>9</div>
                        <div>10</div>
                    </div>
                    <pre class="language-json flex-grow p-4 text-gray-300 overflow-x-auto" style="background-color: #2b2b2b;">
<code>{
    <span style="color: #6a8759;">"data"</span>: {
        <span style="color: #6a8759;">"id"</span>: 1,
        <span style="color: #6a8759;">"name"</span>: <span style="color: #6a8759;">"John Doe"</span>,
        <span style="color: #6a8759;">"email"</span>: <span style="color: #6a8759;">"john@example.com"</span>
    },
    <span style="color: #6a8759;">"meta"</span>: {
        <span style="color: #6a8759;">"version"</span>: <span style="color: #6a8759;">"v1"</span>
    }
}</code></pre>
                </div>
            </div>

            <div class="bg-yellow-100 border-l-4 border-yellow-500 text-yellow-700 p-4 mb-4" role="alert">
                <h3 class="font-bold">Best Practices</h3>
                <ul class="list-disc list-inside">
                    <li>Always version your APIs</li>
                    <li>Implement rate limiting for public endpoints</li>
                    <li>Use appropriate HTTP status codes</li>
                    <li>Include proper error messages in responses</li>
                    <li>Document your API endpoints</li>
                </ul>
            </div>
        </section>

        <section id="websockets" class="mb-12">
            <h1 class="text-4xl font-bold mb-6">WebSockets</h1>

            <p class="mb-4">
                Yabasi provides real-time communication capabilities through WebSockets using the Ratchet WebSocket server. This enables you to build real-time features like chat applications, live notifications, and real-time dashboards.
            </p>

            <h2 class="text-2xl font-semibold mb-3">Creating a WebSocket Server</h2>
            <p class="mb-4">Create a WebSocket server by extending the BaseWebSocketServer class:</p>

            <div class="bg-gray-900 rounded-lg shadow-lg overflow-hidden mb-4">
                <div class="flex items-center bg-gray-800 px-4 py-2 border-b border-gray-700">
                    <div class="flex space-x-2">
                        <div class="w-3 h-3 rounded-full bg-red-500"></div>
                        <div class="w-3 h-3 rounded-full bg-yellow-500"></div>
                        <div class="w-3 h-3 rounded-full bg-green-500"></div>
                    </div>
                    <span class="ml-4 text-gray-400 text-sm">NotificationServer.php</span>
                </div>
                <div class="flex">
                    <div class="py-4 px-2 text-right bg-gray-800 text-gray-500 select-none" aria-hidden="true" style="min-width: 2.5rem;">
                        <div>1</div>
                        <div>2</div>
                        <div>3</div>
                        <div>4</div>
                        <div>5</div>
                        <div>6</div>
                        <div>7</div>
                        <div>8</div>
                        <div>9</div>
                        <div>10</div>
                        <div>11</div>
                        <div>12</div>
                        <div>13</div>
                        <div>14</div>
                        <div>15</div>
                        <div>16</div>
                        <div>17</div>
                        <div>18</div>
                        <div>19</div>
                    </div>
                    <pre class="language-php flex-grow p-4 text-gray-300 overflow-x-auto" style="background-color: #2b2b2b;">
<code><span style="color: #cc7832;">namespace</span> App\WebSocket;

<span style="color: #cc7832;">use</span> Ratchet\ConnectionInterface;
<span style="color: #cc7832;">use</span> Yabasi\WebSocket\BaseWebSocketServer;

<span style="color: #cc7832;">class</span> <span style="color: #ffc66d;">NotificationServer</span> <span style="color: #cc7832;">extends</span> BaseWebSocketServer
{
    <span style="color: #cc7832;">public function</span> <span style="color: #ffc66d;">onMessage</span>(ConnectionInterface <span style="color: #bbb529;">$from</span>, <span style="color: #bbb529;">$msg</span>)
    {
        <span style="color: #bbb529;">$data</span> = json_decode(<span style="color: #bbb529;">$msg</span>, true);

        <span style="color: #808080;">// Broadcast message to all connected clients</span>
        <span style="color: #cc7832;">foreach</span> (<span style="color: #bbb529;">$this</span>->clients <span style="color: #cc7832;">as</span> <span style="color: #bbb529;">$client</span>) {
            <span style="color: #bbb529;">$client</span>->send(json_encode([
                <span style="color: #6a8759;">'type'</span> => <span style="color: #6a8759;">'notification'</span>,
                <span style="color: #6a8759;">'data'</span> => <span style="color: #bbb529;">$data</span>
            ]));
        }
    }
}</code></pre>
                </div>
            </div>

            <h2 class="text-2xl font-semibold mb-3">Running the WebSocket Server</h2>
            <p class="mb-4">Run your WebSocket server using the command line:</p>

            <div class="bg-gray-900 rounded-lg shadow-md p-4 mb-4 relative">
                <button onclick="copyCode(this)" class="absolute top-2 right-2 text-gray-400 hover:text-white">
                    <i class="fas fa-copy"></i>
                </button>
                <code class="font-mono text-white">
                    <span class="text-blue-400">php</span>
                    <span class="text-yellow-400">yabasi</span>
                    <span class="text-green-400">websocket:serve</span>
                </code>
            </div>

            <h2 class="text-2xl font-semibold mb-3">Client-Side Connection</h2>
            <p class="mb-4">Connect to your WebSocket server from the client side:</p>

            <div class="bg-gray-900 rounded-lg shadow-lg overflow-hidden mb-4">
                <div class="flex items-center bg-gray-800 px-4 py-2 border-b border-gray-700">
                    <div class="flex space-x-2">
                        <div class="w-3 h-3 rounded-full bg-red-500"></div>
                        <div class="w-3 h-3 rounded-full bg-yellow-500"></div>
                        <div class="w-3 h-3 rounded-full bg-green-500"></div>
                    </div>
                    <span class="ml-4 text-gray-400 text-sm">script.js</span>
                </div>
                <div class="flex">
                    <div class="py-4 px-2 text-right bg-gray-800 text-gray-500 select-none" aria-hidden="true" style="min-width: 2.5rem;">
                        <div>1</div>
                        <div>2</div>
                        <div>3</div>
                        <div>4</div>
                        <div>5</div>
                        <div>6</div>
                        <div>7</div>
                        <div>8</div>
                        <div>9</div>
                        <div>10</div>
                        <div>11</div>
                        <div>12</div>
                        <div>13</div>
                        <div>14</div>
                    </div>
                    <pre class="language-javascript flex-grow p-4 text-gray-300 overflow-x-auto" style="background-color: #2b2b2b;">
<code><span style="color: #cc7832;">const</span> <span style="color: #bbb529;">socket</span> = <span style="color: #cc7832;">new</span> WebSocket(<span style="color: #6a8759;">'ws://localhost:8080'</span>);

socket.onopen = <span style="color: #cc7832;">function</span>() {
    console.log(<span style="color: #6a8759;">'Connected to WebSocket server'</span>);
};

socket.onmessage = <span style="color: #cc7832;">function</span>(<span style="color: #bbb529;">event</span>) {
    <span style="color: #cc7832;">const</span> <span style="color: #bbb529;">data</span> = JSON.parse(<span style="color: #bbb529;">event</span>.data);

    <span style="color: #cc7832;">if</span> (<span style="color: #bbb529;">data</span>.type === <span style="color: #6a8759;">'notification'</span>) {
        console.log(<span style="color: #6a8759;">'New notification:'</span>, <span style="color: #bbb529;">data</span>.data);
    }
};</code></pre>
                </div>
            </div>

            <h2 class="text-2xl font-semibold mb-3">Handling Events</h2>
            <p class="mb-4">The BaseWebSocketServer provides several events you can handle:</p>

            <div class="bg-gray-900 rounded-lg shadow-lg overflow-hidden mb-4">
                <div class="flex">
                    <div class="py-4 px-2 text-right bg-gray-800 text-gray-500 select-none" aria-hidden="true" style="min-width: 2.5rem;">
                        <div>1</div>
                        <div>2</div>
                        <div>3</div>
                        <div>4</div>
                        <div>5</div>
                        <div>6</div>
                        <div>7</div>
                        <div>8</div>
                        <div>9</div>
                        <div>10</div>
                        <div>11</div>
                        <div>12</div>
                        <div>13</div>
                        <div>14</div>
                        <div>15</div>
                    </div>
                    <pre class="language-php flex-grow p-4 text-gray-300 overflow-x-auto" style="background-color: #2b2b2b;">
<code><span style="color: #cc7832;">class</span> <span style="color: #ffc66d;">GameServer</span> <span style="color: #cc7832;">extends</span> BaseWebSocketServer
{
    <span style="color: #cc7832;">public function</span> <span style="color: #ffc66d;">onOpen</span>(ConnectionInterface <span style="color: #bbb529;">$conn</span>)
    {
        <span style="color: #808080;">// New connection established</span>
        <span style="color: #cc7832;">parent</span>::onOpen(<span style="color: #bbb529;">$conn</span>);
    }

    <span style="color: #cc7832;">public function</span> <span style="color: #ffc66d;">onClose</span>(ConnectionInterface <span style="color: #bbb529;">$conn</span>)
    {
        <span style="color: #808080;">// Connection closed</span>
        <span style="color: #cc7832;">parent</span>::onClose(<span style="color: #bbb529;">$conn</span>);
    }

    <span style="color: #cc7832;">public function</span> <span style="color: #ffc66d;">onError</span>(ConnectionInterface <span style="color: #bbb529;">$conn</span>, \Exception <span style="color: #bbb529;">$e</span>)
    {
        <span style="color: #808080;">// Handle error</span>
        <span style="color: #cc7832;">parent</span>::onError(<span style="color: #bbb529;">$conn</span>, <span style="color: #bbb529;">$e</span>);
    }
}</code></pre>
                </div>
            </div>

            <h2 class="text-2xl font-semibold mb-3">Broadcasting Messages</h2>
            <p class="mb-4">Send messages to specific clients or broadcast to all connected clients:</p>

            <div class="bg-gray-900 rounded-lg shadow-lg overflow-hidden mb-4">
                <div class="flex">
                    <div class="py-4 px-2 text-right bg-gray-800 text-gray-500 select-none" aria-hidden="true" style="min-width: 2.5rem;">
                        <div>1</div>
                        <div>2</div>
                        <div>3</div>
                        <div>4</div>
                        <div>5</div>
                        <div>6</div>
                        <div>7</div>
                        <div>8</div>
                        <div>9</div>
                        <div>10</div>
                        <div>11</div>
                        <div>12</div>
                    </div>
                    <pre class="language-php flex-grow p-4 text-gray-300 overflow-x-auto" style="background-color: #2b2b2b;">
<code><span style="color: #808080;">// Broadcast to all clients except sender</span>
<span style="color: #cc7832;">foreach</span> (<span style="color: #bbb529;">$this</span>->clients <span style="color: #cc7832;">as</span> <span style="color: #bbb529;">$client</span>) {
    <span style="color: #cc7832;">if</span> (<span style="color: #bbb529;">$from</span> !== <span style="color: #bbb529;">$client</span>) {
        <span style="color: #bbb529;">$client</span>->send(<span style="color: #bbb529;">$msg</span>);
    }
}

<span style="color: #808080;">// Send to specific client</span>
<span style="color: #bbb529;">$targetClient</span>->send(json_encode([
    <span style="color: #6a8759;">'type'</span> => <span style="color: #6a8759;">'private'</span>,
    <span style="color: #6a8759;">'message'</span> => <span style="color: #6a8759;">'Private message'</span>
]));</code></pre>
                </div>
            </div>

            <div class="bg-yellow-100 border-l-4 border-yellow-500 text-yellow-700 p-4 mb-4" role="alert">
                <h3 class="font-bold">Note</h3>
                <ul class="list-disc list-inside">
                    <li>WebSocket server runs on port 8080 by default</li>
                    <li>Make sure your firewall allows WebSocket connections</li>
                    <li>Consider using a process manager like Supervisor in production</li>
                    <li>Use secure WebSocket (wss://) in production environments</li>
                </ul>
            </div>
        </section>

        <section id="localization" class="mb-12">
            <h1 class="text-4xl font-bold mb-6">Localization</h1>

            <p class="mb-4">
                Yabasi provides a powerful and flexible localization system for creating multilingual applications. The framework uses JSON-based language files and offers an intuitive API for managing translations.
            </p>

            <h2 class="text-2xl font-semibold mb-3">Configuration</h2>
            <p class="mb-4">
                First, set your application's default and fallback locales in your configuration file:
            </p>

            <div class="bg-gray-900 rounded-lg shadow-lg overflow-hidden mb-4">
                <div class="flex items-center bg-gray-800 px-4 py-2 border-b border-gray-700">
                    <div class="flex space-x-2">
                        <div class="w-3 h-3 rounded-full bg-red-500"></div>
                        <div class="w-3 h-3 rounded-full bg-yellow-500"></div>
                        <div class="w-3 h-3 rounded-full bg-green-500"></div>
                    </div>
                    <span class="ml-4 text-gray-400 text-sm">config/config.php</span>
                </div>
                <div class="flex">
                    <div class="py-4 px-2 text-right bg-gray-800 text-gray-500 select-none" aria-hidden="true">
                        <div>1</div>
                        <div>2</div>
                        <div>3</div>
                        <div>4</div>
                        <div>5</div>
                    </div>
                    <pre class="language-php flex-grow p-4 text-gray-300 overflow-x-auto" style="background-color: #2b2b2b;">
<code><span style="color: #cc7832;">return</span> [
    <span style="color: #6a8759;">'app'</span> => [
        <span style="color: #6a8759;">'locale'</span> => <span style="color: #6a8759;">'en'</span>,
        <span style="color: #6a8759;">'fallback_locale'</span> => <span style="color: #6a8759;">'en'</span>,
    ],
];</code></pre>
                </div>
            </div>

            <h2 class="text-2xl font-semibold mb-3">Language Files</h2>
            <p class="mb-4">
                Create JSON language files in the <code class="bg-gray-200 px-1 rounded">storage/lang</code> directory. Each language should have its own file:
            </p>

            <div class="bg-gray-900 rounded-lg shadow-lg overflow-hidden mb-4">
                <div class="flex items-center bg-gray-800 px-4 py-2 border-b border-gray-700">
                    <span class="ml-4 text-gray-400 text-sm">storage/lang/en.json</span>
                </div>
                <div class="flex">
                    <div class="py-4 px-2 text-right bg-gray-800 text-gray-500 select-none" aria-hidden="true">
                        <div>1</div>
                        <div>2</div>
                        <div>3</div>
                        <div>4</div>
                        <div>5</div>
                        <div>6</div>
                        <div>7</div>
                    </div>
                    <pre class="language-json flex-grow p-4 text-gray-300 overflow-x-auto" style="background-color: #2b2b2b;">
<code>{
    <span style="color: #6a8759;">"welcome"</span>: <span style="color: #6a8759;">"Welcome to our application"</span>,
    <span style="color: #6a8759;">"auth.failed"</span>: <span style="color: #6a8759;">"These credentials do not match our records"</span>,
    <span style="color: #6a8759;">"users.greeting"</span>: <span style="color: #6a8759;">"Hello, :name!"</span>,
    <span style="color: #6a8759;">"items.count"</span>: <span style="color: #6a8759;">"You have :count items"</span>
}</code></pre>
                </div>
            </div>

            <h2 class="text-2xl font-semibold mb-3">Basic Usage</h2>
            <p class="mb-4">
                You can use the translation helper function <code class="bg-gray-200 px-1 rounded">__()</code> or the Translator class directly:
            </p>

            <div class="bg-gray-900 rounded-lg shadow-lg overflow-hidden mb-4">
                <div class="flex items-center bg-gray-800 px-4 py-2 border-b border-gray-700">
                    <span class="ml-4 text-gray-400 text-sm">Example Usage</span>
                </div>
                <div class="flex">
                    <div class="py-4 px-2 text-right bg-gray-800 text-gray-500 select-none" aria-hidden="true">
                        <div>1</div>
                        <div>2</div>
                        <div>3</div>
                        <div>4</div>
                        <div>5</div>
                        <div>6</div>
                        <div>7</div>
                        <div>8</div>
                        <div>9</div>
                    </div>
                    <pre class="language-php flex-grow p-4 text-gray-300 overflow-x-auto" style="background-color: #2b2b2b;">
<code><span style="color: #cc7832;">// Using helper function</span>
<span style="color: #bbb529;">echo</span> __(<span style="color: #6a8759;">'welcome'</span>);

<span style="color: #cc7832;">// Using with parameters</span>
<span style="color: #bbb529;">echo</span> __(<span style="color: #6a8759;">'users.greeting'</span>, [<span style="color: #6a8759;">'name'</span> => <span style="color: #6a8759;">'John'</span>]);

<span style="color: #cc7832;">// Using Translator class</span>
<span style="color: #bbb529;">$translator</span> = <span style="color: #bbb529;">$container</span>->get(Translator::<span style="color: #cc7832;">class</span>);
<span style="color: #bbb529;">echo</span> <span style="color: #bbb529;">$translator</span>->get(<span style="color: #6a8759;">'welcome'</span>);</code></pre>
                </div>
            </div>

            <h2 class="text-2xl font-semibold mb-3">Using in Twig Templates</h2>
            <p class="mb-4">
                The translation function is also available in Twig templates:
            </p>

            <div class="bg-gray-900 rounded-lg shadow-lg overflow-hidden mb-4">
                <div class="flex items-center bg-gray-800 px-4 py-2 border-b border-gray-700">
                    <span class="ml-4 text-gray-400 text-sm">example.twig</span>
                </div>
                <div class="flex">
                    <div class="py-4 px-2 text-right bg-gray-800 text-gray-500 select-none" aria-hidden="true">
                        <div>1</div>
                        <div>2</div>
                        <div>3</div>
                        <div>4</div>
                    </div>
                    <pre class="language-twig flex-grow p-4 text-gray-300 overflow-x-auto" style="background-color: #2b2b2b;">
<code><span style="color: #e8bf6a">&lt;h1&gt;</span>{{ "{{ __('welcome') }}" }}<span style="color: #e8bf6a">&lt;/h1&gt;</span>

<span style="color: #e8bf6a">&lt;p&gt;</span>{{ "{{ __('users.greeting', {'name': user.name}) }}" }}<span style="color: #e8bf6a">&lt;/p&gt;</span></code></pre>
                </div>
            </div>

            <h2 class="text-2xl font-semibold mb-3">Switching Locales</h2>
            <p class="mb-4">
                You can change the application's locale at runtime:
            </p>

            <div class="bg-gray-900 rounded-lg shadow-lg overflow-hidden mb-4">
                <div class="flex">
                    <div class="py-4 px-2 text-right bg-gray-800 text-gray-500 select-none" aria-hidden="true">
                        <div>1</div>
                        <div>2</div>
                        <div>3</div>
                        <div>4</div>
                    </div>
                    <pre class="language-php flex-grow p-4 text-gray-300 overflow-x-auto" style="background-color: #2b2b2b;">
<code><span style="color: #bbb529;">$translator</span> = <span style="color: #bbb529;">$container</span>->get(Translator::<span style="color: #cc7832;">class</span>);

<span style="color: #cc7832;">// Switch to Spanish</span>
<span style="color: #bbb529;">$translator</span>->setLocale(<span style="color: #6a8759;">'es'</span>);</code></pre>
                </div>
            </div>

            <h2 class="text-2xl font-semibold mb-3">Pluralization</h2>
            <p class="mb-4">
                Handle pluralization in your translations using the count parameter:
            </p>

            <div class="bg-gray-900 rounded-lg shadow-lg overflow-hidden mb-4">
                <div class="flex items-center bg-gray-800 px-4 py-2 border-b border-gray-700">
                    <span class="ml-4 text-gray-400 text-sm">storage/lang/en.json</span>
                </div>
                <div class="flex">
                    <div class="py-4 px-2 text-right bg-gray-800 text-gray-500 select-none" aria-hidden="true">
                        <div>1</div>
                        <div>2</div>
                        <div>3</div>
                        <div>4</div>
                        <div>5</div>
                    </div>
                    <pre class="language-json flex-grow p-4 text-gray-300 overflow-x-auto" style="background-color: #2b2b2b;">
<code>{
    <span style="color: #6a8759;">"items.zero"</span>: <span style="color: #6a8759;">"No items found"</span>,
    <span style="color: #6a8759;">"items.one"</span>: <span style="color: #6a8759;">"One item found"</span>,
    <span style="color: #6a8759;">"items.many"</span>: <span style="color: #6a8759;">":count items found"</span>
}</code></pre>
                </div>
            </div>

            <h2 class="text-2xl font-semibold mb-3">Best Practices</h2>
            <ul class="list-disc list-inside mb-4">
                <li>Use dot notation to organize translations hierarchically</li>
                <li>Always provide a fallback locale for missing translations</li>
                <li>Keep translation keys lowercase and use dots for namespacing</li>
                <li>Use meaningful key names that describe the content</li>
                <li>Group related translations together</li>
            </ul>

            <div class="bg-yellow-50 border-l-4 border-yellow-400 p-4 mb-4">
                <div class="flex">
                    <div class="flex-shrink-0">
                        <i class="fas fa-exclamation-triangle text-yellow-400"></i>
                    </div>
                    <div class="ml-3">
                        <p class="text-sm text-yellow-700">
                            Remember to create language files for all supported locales before deploying your application. Missing translations will fall back to the default locale.
                        </p>
                    </div>
                </div>
            </div>
        </section>

    </div>
</main>

<footer class="bg-gray-900 text-white py-12">
    <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        <div class="grid grid-cols-1 md:grid-cols-4 gap-8">
            <div>
                <h3 class="text-lg font-semibold mb-4">Yabasi</h3>
                <p class="text-gray-400">A powerful, flexible, and modern PHP framework designed for rapid application development.</p>
            </div>
            <div>
                <h3 class="text-lg font-semibold mb-4">Quick Links</h3>
                <ul class="space-y-2">
                    <li><a href="{{ url('/#features') }}" class="text-gray-400 hover:text-white">Features</a></li>
                    <li><a href="{{ url('#ecosystem') }}" class="text-gray-400 hover:text-white">Ecosystem</a></li>
                    <li><a href="{{ url('#docs') }}" class="text-gray-400 hover:text-white">Documentation</a></li>
                    <li><a href="https://github.com/yabasi/yabasi" class="text-gray-400 hover:text-white">GitHub</a></li>
                </ul>
            </div>
            <div>
                <h3 class="text-lg font-semibold mb-4">Community</h3>
                <ul class="space-y-2">
                    <li><a href="#" class="text-gray-400 hover:text-white">Forum</a></li>
                    <li><a href="#" class="text-gray-400 hover:text-white">Blog</a></li>
                    <li><a target="_blank" href="https://x.com/abbaskandemir" class="text-gray-400 hover:text-white">Twitter</a></li>
                    <li><a href="#" class="text-gray-400 hover:text-white">Discord</a></li>
                </ul>
            </div>
            <div>
                <h3 class="text-lg font-semibold mb-4">Newsletter</h3>
                <p class="text-gray-400 mb-4">Stay up to date with the latest Yabasi news and updates.</p>
                <form action="#" method="POST" class="flex">
                    <input type="email" placeholder="Your email" class="flex-grow px-4 py-2 rounded-l-md focus:outline-none focus:ring-2 focus:ring-indigo-600">
                    <button type="submit" class="bg-indigo-600 text-white px-4 py-2 rounded-r-md hover:bg-indigo-700 transition-colors">Subscribe</button>
                </form>
            </div>
        </div>
        <div class="mt-8 pt-8 border-t border-gray-800 text-center">
            <p class="text-gray-400">&copy; {{ year }} {{ frameworkName }}. All rights reserved.</p>
        </div>
    </div>
</footer>

<script>
    // Smooth scrolling for anchor links
    document.querySelectorAll('a[href^="#"]').forEach(anchor => {
        anchor.addEventListener('click', function (e) {
            e.preventDefault();

            document.querySelector(this.getAttribute('href')).scrollIntoView({
                behavior: 'smooth'
            });
        });
    });

    // Highlight active section in sidebar
    window.addEventListener('scroll', () => {
        let current = '';
        document.querySelectorAll('main section').forEach(section => {
            const sectionTop = section.offsetTop;
            if (pageYOffset >= sectionTop - 60) {
                current = section.getAttribute('id');
            }
        });

        document.querySelectorAll('aside a').forEach(link => {
            link.classList.remove('text-indigo-600');
            if (link.getAttribute('href') === `#${current}`) {
                link.classList.add('text-indigo-600');
            }
        });
    });

    function copyCode(button) {
        const code = button.nextElementSibling.innerText;
        navigator.clipboard.writeText(code).then(() => {
            button.innerHTML = '<i class="fas fa-check text-green-400"></i>';
            setTimeout(() => {
                button.innerHTML = '<i class="fas fa-copy"></i>';
            }, 2000);
        }).catch(err => console.error('Copy error:', err));
    }
</script>
</body>
</html>